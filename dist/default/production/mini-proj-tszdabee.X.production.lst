

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Thu Nov 11 15:38:45 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=3
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=3
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=3
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=3
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=3
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=3
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=2
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=2
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=3
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=3
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=3
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=2
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    54                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    55                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    56                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    57                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    58                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    59                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    60                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    61  0000                     
    62                           ; Version 2.20
    63                           ; Generated 05/05/2020 GMT
    64                           ; 
    65                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    66                           ; All rights reserved.
    67                           ; 
    68                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    69                           ; 
    70                           ; Redistribution and use in source and binary forms, with or without modification, are
    71                           ; permitted provided that the following conditions are met:
    72                           ; 
    73                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    74                           ;        conditions and the following disclaimer.
    75                           ; 
    76                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    77                           ;        of conditions and the following disclaimer in the documentation and/or other
    78                           ;        materials provided with the distribution.
    79                           ; 
    80                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    81                           ;        software without specific prior written permission.
    82                           ; 
    83                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    84                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    85                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    86                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    87                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    88                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    89                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    90                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    91                           ; 
    92                           ; 
    93                           ; Code-generator required, PIC18F67K40 Definitions
    94                           ; 
    95                           ; SFR Addresses
    96  0000                     
    97                           	psect	idataCOMRAM
    98  0000'                    __pidataCOMRAM:
    99                           	callstack 0
   100                           
   101                           ;initializer for _light
   102  0000' 01                 	db	1
   103                           
   104                           	psect	idataBANK0
   105  0000'                    __pidataBANK0:
   106                           	callstack 0
   107                           
   108                           ;initializer for _sec
   109  0000' 0028               	dw	40
   110                           
   111                           ;initializer for _min
   112  0002' 003B               	dw	59
   113                           
   114                           ;initializer for _day
   115  0004' 001F               	dw	31
   116                           
   117                           ;initializer for _month
   118  0006' 000C               	dw	12
   119                           
   120                           ;initializer for _year
   121  0008' 07E5               	dw	2021
   122  0000                     _PIR0bits	set	3635
   123  0000                     _IPR0bits	set	3615
   124  0000                     _PIE0bits	set	3625
   125  0000                     _IPR2bits	set	3617
   126  0000                     _PIE2bits	set	3627
   127  0000                     _PIR2bits	set	3637
   128  0000                     _CM1CON1bits	set	3793
   129  0000                     _CM1CON0bits	set	3792
   130  0000                     _CM1PCHbits	set	3795
   131  0000                     _CM1NCHbits	set	3794
   132  0000                     _DAC1CON1bits	set	3783
   133  0000                     _DAC1CON0bits	set	3782
   134  0000                     _INTCONbits	set	4082
   135  0000                     _TRISEbits	set	3973
   136  0000                     _TRISCbits	set	3971
   137  0000                     _LATEbits	set	3965
   138  0000                     _LATCbits	set	3963
   139  0000                     _TMR0L	set	4051
   140  0000                     _TMR0H	set	4052
   141  0000                     _T0CON0bits	set	4053
   142  0000                     _T0CON1bits	set	4054
   143  0000                     _TRISDbits	set	3972
   144  0000                     _LATDbits	set	3964
   145  0000                     _TRISHbits	set	3976
   146  0000                     _LATHbits	set	3968
   147  0000                     _LATBbits	set	3962
   148  0000                     _LATFbits	set	3966
   149  0000                     _LATAbits	set	3961
   150  0000                     _LATGbits	set	3967
   151  0000                     _TRISBbits	set	3970
   152  0000                     _TRISFbits	set	3974
   153  0000                     _TRISAbits	set	3969
   154  0000                     _TRISGbits	set	3975
   155                           
   156                           	psect	smallconst
   157  0000'                    __psmallconst:
   158                           	callstack 0
   159  0000' 00                 	db	0
   160  0001'                    STR_2:
   161                           
   162                           ; BSR set to: 14
   163  0001' 54                 	db	84	;'T'
   164  0002' 69                 	db	105	;'i'
   165  0003' 6D                 	db	109	;'m'
   166  0004' 65                 	db	101	;'e'
   167  0005' 20                 	db	32
   168  0006' 25                 	db	37
   169  0007' 30                 	db	48	;'0'
   170  0008' 32                 	db	50	;'2'
   171  0009' 64                 	db	100	;'d'
   172  000A' 3A                 	db	58	;':'
   173  000B' 25                 	db	37
   174  000C' 30                 	db	48	;'0'
   175  000D' 32                 	db	50	;'2'
   176  000E' 64                 	db	100	;'d'
   177  000F' 3A                 	db	58	;':'
   178  0010' 25                 	db	37
   179  0011' 30                 	db	48	;'0'
   180  0012' 32                 	db	50	;'2'
   181  0013' 64                 	db	100	;'d'
   182  0014' 20                 	db	32
   183  0015' 20                 	db	32
   184  0016' 25                 	db	37
   185  0017' 64                 	db	100	;'d'
   186  0018' 00                 	db	0
   187  0019'                    STR_1:
   188                           
   189                           ; BSR set to: 14
   190  0019' 44                 	db	68	;'D'
   191  001A' 61                 	db	97	;'a'
   192  001B' 74                 	db	116	;'t'
   193  001C' 65                 	db	101	;'e'
   194  001D' 20                 	db	32
   195  001E' 25                 	db	37
   196  001F' 30                 	db	48	;'0'
   197  0020' 32                 	db	50	;'2'
   198  0021' 64                 	db	100	;'d'
   199  0022' 2F                 	db	47
   200  0023' 25                 	db	37
   201  0024' 30                 	db	48	;'0'
   202  0025' 32                 	db	50	;'2'
   203  0026' 64                 	db	100	;'d'
   204  0027' 2F                 	db	47
   205  0028' 25                 	db	37
   206  0029' 30                 	db	48	;'0'
   207  002A' 34                 	db	52	;'4'
   208  002B' 64                 	db	100	;'d'
   209  002C' 00                 	db	0
   210  002D' 00                 	db	0	; dummy byte at the end
   211  0000                     
   212                           ; #config settings
   213                           
   214                           	psect	cinit
   215  0000'                    __pcinit:
   216                           	callstack 0
   217  0000'                    start_initialization:
   218                           	callstack 0
   219  0000'                    __initialization:
   220                           	callstack 0
   221                           
   222                           ; Initialize objects allocated to BANK0 (10 bytes)
   223                           ; load TBLPTR registers with __pidataBANK0
   224  0000' 0E00'              	movlw	low __pidataBANK0
   225  0002' 6EF6               	movwf	tblptrl,c
   226  0004' 0E00'              	movlw	high __pidataBANK0
   227  0006' 6EF7               	movwf	tblptrh,c
   228  0008' 0E00'              	movlw	low (__pidataBANK0 shr (0+16))
   229  000A' 6EF8               	movwf	tblptru,c
   230  000C' EE00' F000'        	lfsr	0,__pdataBANK0
   231  0010' EE10 F00A          	lfsr	1,10
   232  0014'                    copy_data0:
   233  0014' 0009               	tblrd		*+
   234  0016' CFF5 FFEE          	movff	tablat,postinc0
   235  001A' 50E5               	movf	postdec1,w,c
   236  001C' 50E1               	movf	fsr1l,w,c
   237  001E' E1FA               	bnz	copy_data0
   238                           
   239                           ; Initialize objects allocated to COMRAM (1 bytes)
   240                           ; load TBLPTR registers with __pidataCOMRAM
   241  0020' 0E00'              	movlw	low __pidataCOMRAM
   242  0022' 6EF6               	movwf	tblptrl,c
   243  0024' 0E00'              	movlw	high __pidataCOMRAM
   244  0026' 6EF7               	movwf	tblptrh,c
   245  0028' 0E00'              	movlw	low (__pidataCOMRAM shr (0+16))
   246  002A' 6EF8               	movwf	tblptru,c
   247  002C' 0009               	tblrd		*+	;fetch initializer
   248  002E' CFF5 F000'         	movff	tablat,__pdataCOMRAM
   249                           
   250                           ; Clear objects allocated to BANK0 (40 bytes)
   251  0032' EE00' F000'        	lfsr	0,__pbssBANK0
   252  0036' 0E28               	movlw	40
   253  0038'                    clear_0:
   254  0038' 6AEE               	clrf	postinc0,c
   255  003A' 06E8               	decf	wreg,f,c
   256  003C' E1FD               	bnz	clear_0
   257                           
   258                           ; Clear objects allocated to COMRAM (2 bytes)
   259  003E' 6A00'              	clrf	(__pbssCOMRAM+1)& (0+255),c
   260  0040' 6A00'              	clrf	__pbssCOMRAM& (0+255),c
   261  0042'                    end_of_initialization:
   262                           	callstack 0
   263  0042'                    __end_of__initialization:
   264                           	callstack 0
   265  0042' 9000'              	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   266  0044' 9200'              	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   267  0046' 0100               	movlb	0
   268  0048' EF00' F000'        	goto	_main	;jump to C main() function
   269                           
   270                           	psect	bssCOMRAM
   271  0000'                    __pbssCOMRAM:
   272                           	callstack 0
   273  0000'                    _flags:
   274                           	callstack 0
   275  0000'                    	ds	2
   276                           
   277                           	psect	dataCOMRAM
   278  0000'                    __pdataCOMRAM:
   279                           	callstack 0
   280  0000'                    _light:
   281                           	callstack 0
   282  0000'                    	ds	1
   283                           
   284                           	psect	bssBANK0
   285  0000'                    __pbssBANK0:
   286                           	callstack 0
   287  0000'                    _nout:
   288                           	callstack 0
   289  0000'                    	ds	2
   290  0002'                    _width:
   291                           	callstack 0
   292  0002'                    	ds	2
   293  0004'                    _prec:
   294                           	callstack 0
   295  0004'                    	ds	2
   296  0006'                    _dbuf:
   297                           	callstack 0
   298  0006'                    	ds	32
   299  0026'                    _hour:
   300                           	callstack 0
   301  0026'                    	ds	2
   302                           
   303                           	psect	dataBANK0
   304  0000'                    __pdataBANK0:
   305                           	callstack 0
   306  0000'                    _sec:
   307                           	callstack 0
   308  0000'                    	ds	2
   309  0002'                    _min:
   310                           	callstack 0
   311  0002'                    	ds	2
   312  0004'                    _day:
   313                           	callstack 0
   314  0004'                    	ds	2
   315  0006'                    _month:
   316                           	callstack 0
   317  0006'                    	ds	2
   318  0008'                    _year:
   319                           	callstack 0
   320  0008'                    	ds	2
   321                           
   322                           	psect	cstackBANK0
   323  0000'                    __pcstackBANK0:
   324                           	callstack 0
   325  0000'                    ?_vfprintf:
   326                           	callstack 0
   327  0000'                    vfprintf@fp:
   328                           	callstack 0
   329                           
   330                           ; 2 bytes @ 0x0
   331  0000'                    	ds	2
   332  0002'                    vfprintf@fmt:
   333                           	callstack 0
   334                           
   335                           ; 2 bytes @ 0x2
   336  0002'                    	ds	2
   337  0004'                    vfprintf@ap:
   338                           	callstack 0
   339                           
   340                           ; 2 bytes @ 0x4
   341  0004'                    	ds	2
   342  0006'                    vfprintf@cfmt:
   343                           	callstack 0
   344                           
   345                           ; 2 bytes @ 0x6
   346  0006'                    	ds	2
   347  0008'                    ?_sprintf:
   348                           	callstack 0
   349  0008'                    sprintf@s:
   350                           	callstack 0
   351                           
   352                           ; 2 bytes @ 0x8
   353  0008'                    	ds	2
   354  000A'                    sprintf@fmt:
   355                           	callstack 0
   356                           
   357                           ; 2 bytes @ 0xA
   358  000A'                    	ds	10
   359  0014'                    sprintf@ap:
   360                           	callstack 0
   361                           
   362                           ; 2 bytes @ 0x14
   363  0014'                    	ds	2
   364  0016'                    sprintf@f:
   365                           	callstack 0
   366                           
   367                           ; 6 bytes @ 0x16
   368  0016'                    	ds	6
   369  001C'                    LCD_Disp@buf:
   370                           	callstack 0
   371                           
   372                           ; 2 bytes @ 0x1C
   373  001C'                    	ds	2
   374  001E'                    LCD_Disp@year:
   375                           	callstack 0
   376                           
   377                           ; 2 bytes @ 0x1E
   378  001E'                    	ds	2
   379  0020'                    LCD_Disp@month:
   380                           	callstack 0
   381                           
   382                           ; 2 bytes @ 0x20
   383  0020'                    	ds	2
   384  0022'                    LCD_Disp@day:
   385                           	callstack 0
   386                           
   387                           ; 2 bytes @ 0x22
   388  0022'                    	ds	2
   389  0024'                    LCD_Disp@hour:
   390                           	callstack 0
   391                           
   392                           ; 2 bytes @ 0x24
   393  0024'                    	ds	2
   394  0026'                    LCD_Disp@min:
   395                           	callstack 0
   396                           
   397                           ; 2 bytes @ 0x26
   398  0026'                    	ds	2
   399  0028'                    LCD_Disp@sec:
   400                           	callstack 0
   401                           
   402                           ; 2 bytes @ 0x28
   403  0028'                    	ds	2
   404  002A'                    LCD_Disp@weekday:
   405                           	callstack 0
   406                           
   407                           ; 2 bytes @ 0x2A
   408  002A'                    	ds	2
   409  002C'                    ??_LCD_Disp:
   410                           
   411                           ; 1 bytes @ 0x2C
   412  002C'                    	ds	2
   413  002E'                    ??_main:
   414                           
   415                           ; 1 bytes @ 0x2E
   416  002E'                    	ds	2
   417  0030'                    main@buf:
   418                           	callstack 0
   419                           
   420                           ; 16 bytes @ 0x30
   421  0030'                    	ds	16
   422  0040'                    main@weekday:
   423                           	callstack 0
   424                           
   425                           ; 2 bytes @ 0x40
   426  0040'                    	ds	2
   427  0042'                    main@bwdcheck:
   428                           	callstack 0
   429                           
   430                           ; 2 bytes @ 0x42
   431  0042'                    	ds	2
   432                           
   433                           	psect	cstackCOMRAM
   434  0000'                    __pcstackCOMRAM:
   435                           	callstack 0
   436  0000'                    ??_LowISR:
   437  0000'                    
   438                           ; 1 bytes @ 0x0
   439  0000'                    	ds	3
   440  0003'                    ?_strlen:
   441                           	callstack 0
   442  0003'                    ?_isdigit:
   443                           	callstack 0
   444  0003'                    ?_isspace:
   445                           	callstack 0
   446  0003'                    ?___wmul:
   447                           	callstack 0
   448  0003'                    ?___aodiv:
   449                           	callstack 0
   450  0003'                    ?___aomod:
   451                           	callstack 0
   452  0003'                    LCD_sendnibble@number:
   453                           	callstack 0
   454  0003'                    LEDarray_disp_bin@number:
   455                           	callstack 0
   456  0003'                    seccount@sec:
   457                           	callstack 0
   458  0003'                    mincount@min:
   459                           	callstack 0
   460  0003'                    dst@hour:
   461                           	callstack 0
   462  0003'                    ___wmul@multiplier:
   463                           	callstack 0
   464  0003'                    isdigit@c:
   465                           	callstack 0
   466  0003'                    isspace@c:
   467                           	callstack 0
   468  0003'                    fputc@c:
   469                           	callstack 0
   470  0003'                    strlen@s:
   471                           	callstack 0
   472  0003'                    ___aodiv@dividend:
   473                           	callstack 0
   474  0003'                    ___aomod@dividend:
   475                           	callstack 0
   476                           
   477                           ; 8 bytes @ 0x3
   478  0003'                    	ds	1
   479  0004'                    LCD_sendbyte@type:
   480                           	callstack 0
   481                           
   482                           ; 1 bytes @ 0x4
   483  0004'                    	ds	1
   484  0005'                    ??_LEDarray_disp_bin:
   485  0005'                    ??_isdigit:
   486  0005'                    ??_isspace:
   487  0005'                    LCD_sendbyte@Byte:
   488                           	callstack 0
   489  0005'                    dst@day:
   490                           	callstack 0
   491  0005'                    ___wmul@multiplicand:
   492                           	callstack 0
   493  0005'                    fputc@fp:
   494                           	callstack 0
   495  0005'                    strlen@a:
   496                           	callstack 0
   497                           
   498                           ; 2 bytes @ 0x5
   499  0005'                    	ds	1
   500  0006'                    ??_LCD_Init:
   501  0006'                    LCD_setline@line:
   502                           	callstack 0
   503  0006'                    LCD_sendstring@string:
   504                           	callstack 0
   505                           
   506                           ; 2 bytes @ 0x6
   507  0006'                    	ds	1
   508  0007'                    ??_fputc:
   509  0007'                    dst@month:
   510                           	callstack 0
   511  0007'                    ___wmul@product:
   512                           	callstack 0
   513                           
   514                           ; 2 bytes @ 0x7
   515  0007'                    	ds	1
   516  0008'                    
   517                           ; 1 bytes @ 0x8
   518  0008'                    	ds	1
   519  0009'                    ?___awdiv:
   520                           	callstack 0
   521  0009'                    _isspace$1965:
   522                           	callstack 0
   523  0009'                    dst@weekday:
   524                           	callstack 0
   525  0009'                    ___awdiv@dividend:
   526                           	callstack 0
   527                           
   528                           ; 2 bytes @ 0x9
   529  0009'                    	ds	1
   530  000A'                    ?_atoi:
   531                           	callstack 0
   532  000A'                    atoi@s:
   533                           	callstack 0
   534                           
   535                           ; 2 bytes @ 0xA
   536  000A'                    	ds	1
   537  000B'                    dst@bwdcheck:
   538                           	callstack 0
   539  000B'                    ___awdiv@divisor:
   540                           	callstack 0
   541  000B'                    ___aodiv@divisor:
   542                           	callstack 0
   543  000B'                    ___aomod@divisor:
   544                           	callstack 0
   545                           
   546                           ; 8 bytes @ 0xB
   547  000B'                    	ds	1
   548  000C'                    ??_atoi:
   549  000C'                    fputs@s:
   550                           	callstack 0
   551                           
   552                           ; 2 bytes @ 0xC
   553  000C'                    	ds	1
   554  000D'                    ___awdiv@counter:
   555                           	callstack 0
   556                           
   557                           ; 1 bytes @ 0xD
   558  000D'                    	ds	1
   559  000E'                    ___awdiv@sign:
   560                           	callstack 0
   561  000E'                    fputs@fp:
   562                           	callstack 0
   563                           
   564                           ; 2 bytes @ 0xE
   565  000E'                    	ds	1
   566  000F'                    ___awdiv@quotient:
   567                           	callstack 0
   568                           
   569                           ; 2 bytes @ 0xF
   570  000F'                    	ds	1
   571  0010'                    fputs@c:
   572                           	callstack 0
   573  0010'                    atoi@neg:
   574                           	callstack 0
   575                           
   576                           ; 2 bytes @ 0x10
   577  0010'                    	ds	1
   578  0011'                    ?___awmod:
   579                           	callstack 0
   580  0011'                    ___awmod@dividend:
   581                           	callstack 0
   582  0011'                    fputs@i:
   583                           	callstack 0
   584                           
   585                           ; 2 bytes @ 0x11
   586  0011'                    	ds	1
   587  0012'                    _atoi$1947:
   588                           	callstack 0
   589                           
   590                           ; 2 bytes @ 0x12
   591  0012'                    	ds	1
   592  0013'                    ?_pad:
   593                           	callstack 0
   594  0013'                    ___aodiv@counter:
   595                           	callstack 0
   596  0013'                    ___aomod@counter:
   597                           	callstack 0
   598  0013'                    ___awmod@divisor:
   599                           	callstack 0
   600  0013'                    pad@fp:
   601                           	callstack 0
   602                           
   603                           ; 2 bytes @ 0x13
   604  0013'                    	ds	1
   605  0014'                    ___aodiv@sign:
   606                           	callstack 0
   607  0014'                    ___aomod@sign:
   608                           	callstack 0
   609  0014'                    _atoi$1949:
   610                           	callstack 0
   611                           
   612                           ; 2 bytes @ 0x14
   613  0014'                    	ds	1
   614  0015'                    ?_abs:
   615                           	callstack 0
   616  0015'                    ___awmod@counter:
   617                           	callstack 0
   618  0015'                    pad@buf:
   619                           	callstack 0
   620  0015'                    abs@a:
   621                           	callstack 0
   622  0015'                    ___aodiv@quotient:
   623                           	callstack 0
   624                           
   625                           ; 8 bytes @ 0x15
   626  0015'                    	ds	1
   627  0016'                    ___awmod@sign:
   628                           	callstack 0
   629  0016'                    _atoi$1948:
   630                           	callstack 0
   631                           
   632                           ; 1 bytes @ 0x16
   633  0016'                    	ds	1
   634  0017'                    ??_abs:
   635  0017'                    ?_weekdaycheck:
   636                           	callstack 0
   637  0017'                    datecount@hour:
   638                           	callstack 0
   639  0017'                    weekdaycheck@d:
   640                           	callstack 0
   641  0017'                    pad@p:
   642                           	callstack 0
   643  0017'                    atoi@n:
   644                           	callstack 0
   645                           
   646                           ; 2 bytes @ 0x17
   647  0017'                    	ds	2
   648  0019'                    ??_pad:
   649  0019'                    datecount@day:
   650                           	callstack 0
   651  0019'                    weekdaycheck@m:
   652                           	callstack 0
   653                           
   654                           ; 2 bytes @ 0x19
   655  0019'                    	ds	1
   656  001A'                    pad@i:
   657                           	callstack 0
   658                           
   659                           ; 2 bytes @ 0x1A
   660  001A'                    	ds	1
   661  001B'                    datecount@month:
   662                           	callstack 0
   663  001B'                    weekdaycheck@y:
   664                           	callstack 0
   665                           
   666                           ; 2 bytes @ 0x1B
   667  001B'                    	ds	1
   668  001C'                    pad@w:
   669                           	callstack 0
   670                           
   671                           ; 2 bytes @ 0x1C
   672  001C'                    	ds	1
   673  001D'                    ??_weekdaycheck:
   674  001D'                    datecount@year:
   675                           	callstack 0
   676                           
   677                           ; 2 bytes @ 0x1D
   678  001D'                    	ds	1
   679  001E'                    ?_dtoa:
   680                           	callstack 0
   681  001E'                    dtoa@fp:
   682                           	callstack 0
   683                           
   684                           ; 2 bytes @ 0x1E
   685  001E'                    	ds	1
   686  001F'                    datecount@bwdcheck:
   687                           	callstack 0
   688                           
   689                           ; 2 bytes @ 0x1F
   690  001F'                    	ds	1
   691  0020'                    dtoa@d:
   692                           	callstack 0
   693                           
   694                           ; 8 bytes @ 0x20
   695  0020'                    	ds	1
   696  0021'                    ??_datecount:
   697                           
   698                           ; 1 bytes @ 0x21
   699  0021'                    	ds	7
   700  0028'                    ??_dtoa:
   701                           
   702                           ; 1 bytes @ 0x28
   703  0028'                    	ds	8
   704  0030'                    _dtoa$1912:
   705                           	callstack 0
   706                           
   707                           ; 2 bytes @ 0x30
   708  0030'                    	ds	2
   709  0032'                    dtoa@p:
   710                           	callstack 0
   711                           
   712                           ; 2 bytes @ 0x32
   713  0032'                    	ds	2
   714  0034'                    dtoa@w:
   715                           	callstack 0
   716                           
   717                           ; 2 bytes @ 0x34
   718  0034'                    	ds	2
   719  0036'                    dtoa@s:
   720                           	callstack 0
   721                           
   722                           ; 2 bytes @ 0x36
   723  0036'                    	ds	2
   724  0038'                    dtoa@n:
   725                           	callstack 0
   726                           
   727                           ; 8 bytes @ 0x38
   728  0038'                    	ds	8
   729  0040'                    dtoa@i:
   730                           	callstack 0
   731                           
   732                           ; 2 bytes @ 0x40
   733  0040'                    	ds	2
   734  0042'                    ?_vfpfcnvrt:
   735                           	callstack 0
   736  0042'                    vfpfcnvrt@fp:
   737                           	callstack 0
   738                           
   739                           ; 2 bytes @ 0x42
   740  0042'                    	ds	2
   741  0044'                    vfpfcnvrt@fmt:
   742                           	callstack 0
   743                           
   744                           ; 2 bytes @ 0x44
   745  0044'                    	ds	2
   746  0046'                    vfpfcnvrt@ap:
   747                           	callstack 0
   748                           
   749                           ; 2 bytes @ 0x46
   750  0046'                    	ds	2
   751  0048'                    ??_vfpfcnvrt:
   752                           
   753                           ; 1 bytes @ 0x48
   754  0048'                    	ds	4
   755  004C'                    vfpfcnvrt@ll:
   756                           	callstack 0
   757                           
   758                           ; 8 bytes @ 0x4C
   759  004C'                    	ds	8
   760  0054'                    vfpfcnvrt@done:
   761                           	callstack 0
   762                           
   763                           ; 2 bytes @ 0x54
   764  0054'                    	ds	2
   765  0056'                    _vfpfcnvrt$1927:
   766                           	callstack 0
   767                           
   768                           ; 2 bytes @ 0x56
   769  0056'                    	ds	2
   770  0058'                    
   771                           ; 1 bytes @ 0x58
   772 ;;
   773 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   774 ;;
   775 ;; *************** function _main *****************
   776 ;; Defined at:
   777 ;;		line 28 in file "main.c"
   778 ;; Parameters:    Size  Location     Type
   779 ;;		None
   780 ;; Auto vars:     Size  Location     Type
   781 ;;  buf            16   48[BANK0 ] unsigned char [16]
   782 ;;  bwdcheck        2   66[BANK0 ] int 
   783 ;;  weekday         2   64[BANK0 ] int 
   784 ;; Return value:  Size  Location     Type
   785 ;;                  1    wreg      void 
   786 ;; Registers used:
   787 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   788 ;; Tracked objects:
   789 ;;		On entry : 0/0
   790 ;;		On exit  : 0/0
   791 ;;		Unchanged: 0/0
   792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   794 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   795 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   796 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   797 ;;Total ram usage:       22 bytes
   798 ;; Hardware stack levels required when called: 11
   799 ;; This function calls:
   800 ;;		_Comp1_init
   801 ;;		_Interrupts_init
   802 ;;		_LCD_Disp
   803 ;;		_LCD_Init
   804 ;;		_LEDarray_disp_bin
   805 ;;		_LEDarray_init
   806 ;;		_RH3_RD7_init
   807 ;;		_Timer0_init
   808 ;;		_datecount
   809 ;;		_dst
   810 ;;		_mincount
   811 ;;		_seccount
   812 ;;		_weekdaycheck
   813 ;; This function is called by:
   814 ;;		Startup code after reset
   815 ;; This function uses a non-reentrant model
   816 ;;
   817                           
   818                           	psect	text0
   819  0000'                    __ptext0:
   820                           	callstack 0
   821  0000'                    _main:
   822                           	callstack 20
   823  0000'                    
   824                           ;main.c: 29:     RH3_RD7_init();
   825  0000' EC00' F000'        	call	_RH3_RD7_init	;wreg free
   826                           
   827                           ;main.c: 30:     LEDarray_init();
   828  0004' EC00' F000'        	call	_LEDarray_init	;wreg free
   829  0008'                    
   830                           ;main.c: 31:     Timer0_init();
   831  0008' EC00' F000'        	call	_Timer0_init	;wreg free
   832  000C'                    
   833                           ;main.c: 32:     Interrupts_init();
   834  000C' EC00' F000'        	call	_Interrupts_init	;wreg free
   835                           
   836                           ;main.c: 33:     Comp1_init();
   837  0010' EC00' F000'        	call	_Comp1_init	;wreg free
   838  0014'                    
   839                           ;main.c: 34:     LCD_Init();
   840  0014' EC00' F000'        	call	_LCD_Init	;wreg free
   841  0018'                    
   842                           ;main.c: 36:     char buf[16];;main.c: 37:     int weekday, bwdcheck=0;
   843  0018' 0E00               	movlw	0
   844  001A' 0100               	movlb	0	; () banked
   845  001C' 6F00'              	movwf	(main@bwdcheck+1)& (0+255),b
   846  001E' 0E00               	movlw	0
   847  0020' 6F00'              	movwf	main@bwdcheck& (0+255),b
   848  0022'                    l3239:
   849                           
   850                           ;main.c: 40:         seccount(&sec);
   851  0022' 0E00'              	movlw	low _sec
   852  0024' 6E00'              	movwf	seccount@sec^0,c
   853  0026' 0E00'              	movlw	high _sec
   854  0028' 6E00'              	movwf	(seccount@sec+1)^0,c
   855  002A' EC00' F000'        	call	_seccount	;wreg free
   856  002E'                    
   857                           ;main.c: 41:         mincount(&min);
   858  002E' 0E00'              	movlw	low _min
   859  0030' 6E00'              	movwf	mincount@min^0,c
   860  0032' 0E00'              	movlw	high _min
   861  0034' 6E00'              	movwf	(mincount@min+1)^0,c
   862  0036' EC00' F000'        	call	_mincount	;wreg free
   863  003A'                    
   864                           ;main.c: 42:         datecount(&hour, &day, &month, &year, &bwdcheck);
   865  003A' 0E00'              	movlw	low _hour
   866  003C' 6E00'              	movwf	datecount@hour^0,c
   867  003E' 0E00'              	movlw	high _hour
   868  0040' 6E00'              	movwf	(datecount@hour+1)^0,c
   869  0042' 0E00'              	movlw	low _day
   870  0044' 6E00'              	movwf	datecount@day^0,c
   871  0046' 0E00'              	movlw	high _day
   872  0048' 6E00'              	movwf	(datecount@day+1)^0,c
   873  004A' 0E00'              	movlw	low _month
   874  004C' 6E00'              	movwf	datecount@month^0,c
   875  004E' 0E00'              	movlw	high _month
   876  0050' 6E00'              	movwf	(datecount@month+1)^0,c
   877  0052' 0E00'              	movlw	low _year
   878  0054' 6E00'              	movwf	datecount@year^0,c
   879  0056' 0E00'              	movlw	high _year
   880  0058' 6E00'              	movwf	(datecount@year+1)^0,c
   881  005A' 0E00'              	movlw	low main@bwdcheck
   882  005C' 6E00'              	movwf	datecount@bwdcheck^0,c
   883  005E' 0E00'              	movlw	high main@bwdcheck
   884  0060' 6E00'              	movwf	(datecount@bwdcheck+1)^0,c
   885  0062' EC00' F000'        	call	_datecount	;wreg free
   886  0066'                    
   887                           ;main.c: 43:         weekday = weekdaycheck(day, month, year);
   888  0066' C004' F017'        	movff	_day,weekdaycheck@d	;volatile
   889  006A' C005' F018'        	movff	_day+1,weekdaycheck@d+1	;volatile
   890  006E' C006' F019'        	movff	_month,weekdaycheck@m	;volatile
   891  0072' C007' F01A'        	movff	_month+1,weekdaycheck@m+1	;volatile
   892  0076' C008' F01B'        	movff	_year,weekdaycheck@y	;volatile
   893  007A' C009' F01C'        	movff	_year+1,weekdaycheck@y+1	;volatile
   894  007E' EC00' F000'        	call	_weekdaycheck	;wreg free
   895  0082' C017' F040'        	movff	?_weekdaycheck,main@weekday
   896  0086' C018' F041'        	movff	?_weekdaycheck+1,main@weekday+1
   897  008A'                    
   898                           ;main.c: 44:         dst(&hour, day, month, weekday, &bwdcheck);
   899  008A' 0E00'              	movlw	low _hour
   900  008C' 6E00'              	movwf	dst@hour^0,c
   901  008E' 0E00'              	movlw	high _hour
   902  0090' 6E00'              	movwf	(dst@hour+1)^0,c
   903  0092' C004' F005'        	movff	_day,dst@day	;volatile
   904  0096' C005' F006'        	movff	_day+1,dst@day+1	;volatile
   905  009A' C006' F007'        	movff	_month,dst@month	;volatile
   906  009E' C007' F008'        	movff	_month+1,dst@month+1	;volatile
   907  00A2' C040' F009'        	movff	main@weekday,dst@weekday
   908  00A6' C041' F00A'        	movff	main@weekday+1,dst@weekday+1
   909  00AA' 0E00'              	movlw	low main@bwdcheck
   910  00AC' 6E00'              	movwf	dst@bwdcheck^0,c
   911  00AE' 0E00'              	movlw	high main@bwdcheck
   912  00B0' 6E00'              	movwf	(dst@bwdcheck+1)^0,c
   913  00B2' EC00' F000'        	call	_dst	;wreg free
   914  00B6'                    
   915                           ;main.c: 45:         LEDarray_disp_bin(hour);
   916  00B6' C026' F003'        	movff	_hour,LEDarray_disp_bin@number	;volatile
   917  00BA' C027' F004'        	movff	_hour+1,LEDarray_disp_bin@number+1	;volatile
   918  00BE' EC00' F000'        	call	_LEDarray_disp_bin	;wreg free
   919  00C2'                    
   920                           ;main.c: 46:         LCD_Disp(buf,year,month,day,hour,min,sec,weekday);
   921  00C2' 0E00'              	movlw	low main@buf
   922  00C4' 0100               	movlb	0	; () banked
   923  00C6' 6F00'              	movwf	LCD_Disp@buf& (0+255),b
   924  00C8' 0E00'              	movlw	high main@buf
   925  00CA' 6F00'              	movwf	(LCD_Disp@buf+1)& (0+255),b
   926  00CC' C008' F01E'        	movff	_year,LCD_Disp@year	;volatile
   927  00D0' C009' F01F'        	movff	_year+1,LCD_Disp@year+1	;volatile
   928  00D4' C006' F020'        	movff	_month,LCD_Disp@month	;volatile
   929  00D8' C007' F021'        	movff	_month+1,LCD_Disp@month+1	;volatile
   930  00DC' C004' F022'        	movff	_day,LCD_Disp@day	;volatile
   931  00E0' C005' F023'        	movff	_day+1,LCD_Disp@day+1	;volatile
   932  00E4' C026' F024'        	movff	_hour,LCD_Disp@hour	;volatile
   933  00E8' C027' F025'        	movff	_hour+1,LCD_Disp@hour+1	;volatile
   934  00EC' C002' F026'        	movff	_min,LCD_Disp@min	;volatile
   935  00F0' C003' F027'        	movff	_min+1,LCD_Disp@min+1	;volatile
   936  00F4' C000' F028'        	movff	_sec,LCD_Disp@sec	;volatile
   937  00F8' C001' F029'        	movff	_sec+1,LCD_Disp@sec+1	;volatile
   938  00FC' C040' F02A'        	movff	main@weekday,LCD_Disp@weekday
   939  0100' C041' F02B'        	movff	main@weekday+1,LCD_Disp@weekday+1
   940  0104' EC00' F000'        	call	_LCD_Disp	;wreg free
   941  0108'                    
   942                           ;main.c: 47:         _delay((unsigned long)((20)*(64000000/4000.0)));
   943  0108' 0E02               	movlw	2
   944  010A' 0100               	movlb	0	; () banked
   945  010C' 6F00'              	movwf	(??_main+1)& (0+255),b
   946  010E' 0EA0               	movlw	160
   947  0110' 6F00'              	movwf	??_main& (0+255),b
   948  0112' 0E92               	movlw	146
   949  0114'                    u3407:
   950  0114' 2EE8               	decfsz	wreg,f,c
   951  0116' D7FE               	bra	u3407
   952  0118' 2F00'              	decfsz	??_main& (0+255),f,b
   953  011A' D7FC               	bra	u3407
   954  011C' 2F00'              	decfsz	(??_main+1)& (0+255),f,b
   955  011E' D7FA               	bra	u3407
   956  0120' F000               	nop	
   957  0122' EF00' F000'        	goto	l3239
   958  0126' EF00' F000'        	goto	start
   959  012A'                    __end_of_main:
   960                           	callstack 0
   961                           
   962 ;; *************** function _weekdaycheck *****************
   963 ;; Defined at:
   964 ;;		line 76 in file "date.c"
   965 ;; Parameters:    Size  Location     Type
   966 ;;  d               2   23[COMRAM] int 
   967 ;;  m               2   25[COMRAM] int 
   968 ;;  y               2   27[COMRAM] int 
   969 ;; Auto vars:     Size  Location     Type
   970 ;;		None
   971 ;; Return value:  Size  Location     Type
   972 ;;                  2   23[COMRAM] int 
   973 ;; Registers used:
   974 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   975 ;; Tracked objects:
   976 ;;		On entry : 0/0
   977 ;;		On exit  : 0/0
   978 ;;		Unchanged: 0/0
   979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   980 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   982 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   983 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   984 ;;Total ram usage:       10 bytes
   985 ;; Hardware stack levels used: 1
   986 ;; Hardware stack levels required when called: 3
   987 ;; This function calls:
   988 ;;		___awdiv
   989 ;;		___awmod
   990 ;;		___wmul
   991 ;; This function is called by:
   992 ;;		_main
   993 ;; This function uses a non-reentrant model
   994 ;;
   995                           
   996                           	psect	text1
   997  0000'                    __ptext1:
   998                           	callstack 0
   999  0000'                    _weekdaycheck:
  1000                           	callstack 27
  1001  0000'                    
  1002                           ;date.c: 77:     return ((d+=m < 3 ? y-- : y-2, 23*m/9+d+4+y/4-y/100+y/400)%7);
  1003  0000' BE00'              	btfsc	(weekdaycheck@m+1)^0,7,c
  1004  0002' EF00' F000'        	goto	u3391
  1005  0006' 5000'              	movf	(weekdaycheck@m+1)^0,w,c
  1006  0008' E109               	bnz	u3390
  1007  000A' 0E03               	movlw	3
  1008  000C' 5C00'              	subwf	weekdaycheck@m^0,w,c
  1009  000E' A0D8               	btfss	status,0,c
  1010  0010' EF00' F000'        	goto	u3391
  1011  0014' EF00' F000'        	goto	u3390
  1012  0018'                    u3391:
  1013  0018' EF00' F000'        	goto	l3209
  1014  001C'                    u3390:
  1015  001C' 0EFE               	movlw	254
  1016  001E' 6E00'              	movwf	??_weekdaycheck^0,c
  1017  0020' 0EFF               	movlw	255
  1018  0022' 6E00'              	movwf	(??_weekdaycheck+1)^0,c
  1019  0024' C01B' F01F'        	movff	weekdaycheck@y,??_weekdaycheck+2
  1020  0028' C01C' F020'        	movff	weekdaycheck@y+1,??_weekdaycheck+3
  1021  002C' 5000'              	movf	??_weekdaycheck^0,w,c
  1022  002E' 2600'              	addwf	(??_weekdaycheck+2)^0,f,c
  1023  0030' 5000'              	movf	(??_weekdaycheck+1)^0,w,c
  1024  0032' 2200'              	addwfc	(??_weekdaycheck+3)^0,f,c
  1025  0034' 5000'              	movf	(??_weekdaycheck+2)^0,w,c
  1026  0036' 2600'              	addwf	weekdaycheck@d^0,f,c
  1027  0038' 5000'              	movf	(??_weekdaycheck+3)^0,w,c
  1028  003A' 2200'              	addwfc	(weekdaycheck@d+1)^0,f,c
  1029  003C' EF00' F000'        	goto	l3213
  1030  0040'                    l3209:
  1031  0040' 5000'              	movf	weekdaycheck@y^0,w,c
  1032  0042' 2600'              	addwf	weekdaycheck@d^0,f,c
  1033  0044' 5000'              	movf	(weekdaycheck@y+1)^0,w,c
  1034  0046' 2200'              	addwfc	(weekdaycheck@d+1)^0,f,c
  1035  0048' 0600'              	decf	weekdaycheck@y^0,f,c
  1036  004A' A0D8               	btfss	status,0,c
  1037  004C' 0600'              	decf	(weekdaycheck@y+1)^0,f,c
  1038  004E'                    l3213:
  1039  004E' 0E00               	movlw	0
  1040  0050' 6E00'              	movwf	(___awdiv@divisor+1)^0,c
  1041  0052' 0E09               	movlw	9
  1042  0054' 6E00'              	movwf	___awdiv@divisor^0,c
  1043  0056' C019' F003'        	movff	weekdaycheck@m,___wmul@multiplier
  1044  005A' C01A' F004'        	movff	weekdaycheck@m+1,___wmul@multiplier+1
  1045  005E' 0E00               	movlw	0
  1046  0060' 6E00'              	movwf	(___wmul@multiplicand+1)^0,c
  1047  0062' 0E17               	movlw	23
  1048  0064' 6E00'              	movwf	___wmul@multiplicand^0,c
  1049  0066' EC00' F000'        	call	___wmul	;wreg free
  1050  006A' C003' F009'        	movff	?___wmul,___awdiv@dividend
  1051  006E' C004' F00A'        	movff	?___wmul+1,___awdiv@dividend+1
  1052  0072' EC00' F000'        	call	___awdiv	;wreg free
  1053  0076' C009' F01D'        	movff	?___awdiv,??_weekdaycheck
  1054  007A' C00A' F01E'        	movff	?___awdiv+1,??_weekdaycheck+1
  1055  007E' 0E00               	movlw	0
  1056  0080' 6E00'              	movwf	(___awdiv@divisor+1)^0,c
  1057  0082' 0E04               	movlw	4
  1058  0084' 6E00'              	movwf	___awdiv@divisor^0,c
  1059  0086' C01B' F009'        	movff	weekdaycheck@y,___awdiv@dividend
  1060  008A' C01C' F00A'        	movff	weekdaycheck@y+1,___awdiv@dividend+1
  1061  008E' EC00' F000'        	call	___awdiv	;wreg free
  1062  0092' 5000'              	movf	?___awdiv^0,w,c
  1063  0094' 2600'              	addwf	??_weekdaycheck^0,f,c
  1064  0096' 5000'              	movf	(?___awdiv+1)^0,w,c
  1065  0098' 2200'              	addwfc	(??_weekdaycheck+1)^0,f,c
  1066  009A' 0E01               	movlw	1
  1067  009C' 6E00'              	movwf	(___awdiv@divisor+1)^0,c
  1068  009E' 0E90               	movlw	144
  1069  00A0' 6E00'              	movwf	___awdiv@divisor^0,c
  1070  00A2' C01B' F009'        	movff	weekdaycheck@y,___awdiv@dividend
  1071  00A6' C01C' F00A'        	movff	weekdaycheck@y+1,___awdiv@dividend+1
  1072  00AA' EC00' F000'        	call	___awdiv	;wreg free
  1073  00AE' 5000'              	movf	?___awdiv^0,w,c
  1074  00B0' 2600'              	addwf	??_weekdaycheck^0,f,c
  1075  00B2' 5000'              	movf	(?___awdiv+1)^0,w,c
  1076  00B4' 2200'              	addwfc	(??_weekdaycheck+1)^0,f,c
  1077  00B6' 0E00               	movlw	0
  1078  00B8' 6E00'              	movwf	(___awdiv@divisor+1)^0,c
  1079  00BA' 0E64               	movlw	100
  1080  00BC' 6E00'              	movwf	___awdiv@divisor^0,c
  1081  00BE' C01B' F009'        	movff	weekdaycheck@y,___awdiv@dividend
  1082  00C2' C01C' F00A'        	movff	weekdaycheck@y+1,___awdiv@dividend+1
  1083  00C6' EC00' F000'        	call	___awdiv	;wreg free
  1084  00CA' 5000'              	movf	?___awdiv^0,w,c
  1085  00CC' 5E00'              	subwf	??_weekdaycheck^0,f,c
  1086  00CE' 5000'              	movf	(?___awdiv+1)^0,w,c
  1087  00D0' 5A00'              	subwfb	(??_weekdaycheck+1)^0,f,c
  1088  00D2' 5000'              	movf	weekdaycheck@d^0,w,c
  1089  00D4' 2600'              	addwf	??_weekdaycheck^0,f,c
  1090  00D6' 5000'              	movf	(weekdaycheck@d+1)^0,w,c
  1091  00D8' 2200'              	addwfc	(??_weekdaycheck+1)^0,f,c
  1092  00DA' 0E04               	movlw	4
  1093  00DC' 2400'              	addwf	??_weekdaycheck^0,w,c
  1094  00DE' 6E00'              	movwf	___awmod@dividend^0,c
  1095  00E0' 0E00               	movlw	0
  1096  00E2' 2000'              	addwfc	(??_weekdaycheck+1)^0,w,c
  1097  00E4' 6E00'              	movwf	(___awmod@dividend+1)^0,c
  1098  00E6' 0E00               	movlw	0
  1099  00E8' 6E00'              	movwf	(___awmod@divisor+1)^0,c
  1100  00EA' 0E07               	movlw	7
  1101  00EC' 6E00'              	movwf	___awmod@divisor^0,c
  1102  00EE' EC00' F000'        	call	___awmod	;wreg free
  1103  00F2' C011' F017'        	movff	?___awmod,?_weekdaycheck
  1104  00F6' C012' F018'        	movff	?___awmod+1,?_weekdaycheck+1
  1105  00FA' 0012               	return		;funcret
  1106  00FC'                    __end_of_weekdaycheck:
  1107                           	callstack 0
  1108                           
  1109 ;; *************** function ___awdiv *****************
  1110 ;; Defined at:
  1111 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awdiv.c"
  1112 ;; Parameters:    Size  Location     Type
  1113 ;;  dividend        2    9[COMRAM] int 
  1114 ;;  divisor         2   11[COMRAM] int 
  1115 ;; Auto vars:     Size  Location     Type
  1116 ;;  quotient        2   15[COMRAM] int 
  1117 ;;  sign            1   14[COMRAM] unsigned char 
  1118 ;;  counter         1   13[COMRAM] unsigned char 
  1119 ;; Return value:  Size  Location     Type
  1120 ;;                  2    9[COMRAM] int 
  1121 ;; Registers used:
  1122 ;;		wreg, status,2, status,0
  1123 ;; Tracked objects:
  1124 ;;		On entry : 0/0
  1125 ;;		On exit  : 0/0
  1126 ;;		Unchanged: 0/0
  1127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1128 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1129 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1131 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1132 ;;Total ram usage:        8 bytes
  1133 ;; Hardware stack levels used: 1
  1134 ;; Hardware stack levels required when called: 2
  1135 ;; This function calls:
  1136 ;;		Nothing
  1137 ;; This function is called by:
  1138 ;;		_weekdaycheck
  1139 ;; This function uses a non-reentrant model
  1140 ;;
  1141                           
  1142                           	psect	text2
  1143  0000'                    __ptext2:
  1144                           	callstack 0
  1145  0000'                    ___awdiv:
  1146                           	callstack 27
  1147  0000' 0E00               	movlw	0
  1148  0002' 6E00'              	movwf	___awdiv@sign^0,c
  1149  0004' BE00'              	btfsc	(___awdiv@divisor+1)^0,7,c
  1150  0006' EF00' F000'        	goto	u2090
  1151  000A' EF00' F000'        	goto	u2091
  1152  000E'                    u2091:
  1153  000E' EF00' F000'        	goto	l2431
  1154  0012'                    u2090:
  1155  0012' 6C00'              	negf	___awdiv@divisor^0,c
  1156  0014' 1E00'              	comf	(___awdiv@divisor+1)^0,f,c
  1157  0016' B0D8               	btfsc	status,0,c
  1158  0018' 2A00'              	incf	(___awdiv@divisor+1)^0,f,c
  1159  001A' 0E01               	movlw	1
  1160  001C' 6E00'              	movwf	___awdiv@sign^0,c
  1161  001E'                    l2431:
  1162  001E' BE00'              	btfsc	(___awdiv@dividend+1)^0,7,c
  1163  0020' EF00' F000'        	goto	u2100
  1164  0024' EF00' F000'        	goto	u2101
  1165  0028'                    u2101:
  1166  0028' EF00' F000'        	goto	l2437
  1167  002C'                    u2100:
  1168  002C' 6C00'              	negf	___awdiv@dividend^0,c
  1169  002E' 1E00'              	comf	(___awdiv@dividend+1)^0,f,c
  1170  0030' B0D8               	btfsc	status,0,c
  1171  0032' 2A00'              	incf	(___awdiv@dividend+1)^0,f,c
  1172  0034' 0E01               	movlw	1
  1173  0036' 1A00'              	xorwf	___awdiv@sign^0,f,c
  1174  0038'                    l2437:
  1175  0038' 0E00               	movlw	0
  1176  003A' 6E00'              	movwf	(___awdiv@quotient+1)^0,c
  1177  003C' 0E00               	movlw	0
  1178  003E' 6E00'              	movwf	___awdiv@quotient^0,c
  1179  0040' 5000'              	movf	___awdiv@divisor^0,w,c
  1180  0042' 1000'              	iorwf	(___awdiv@divisor+1)^0,w,c
  1181  0044' B4D8               	btfsc	status,2,c
  1182  0046' EF00' F000'        	goto	u2111
  1183  004A' EF00' F000'        	goto	u2110
  1184  004E'                    u2111:
  1185  004E' EF00' F000'        	goto	l2459
  1186  0052'                    u2110:
  1187  0052' 0E01               	movlw	1
  1188  0054' 6E00'              	movwf	___awdiv@counter^0,c
  1189  0056' EF00' F000'        	goto	l2445
  1190  005A'                    l2443:
  1191  005A' 90D8               	bcf	status,0,c
  1192  005C' 3600'              	rlcf	___awdiv@divisor^0,f,c
  1193  005E' 3600'              	rlcf	(___awdiv@divisor+1)^0,f,c
  1194  0060' 2A00'              	incf	___awdiv@counter^0,f,c
  1195  0062'                    l2445:
  1196  0062' AE00'              	btfss	(___awdiv@divisor+1)^0,7,c
  1197  0064' EF00' F000'        	goto	u2121
  1198  0068' EF00' F000'        	goto	u2120
  1199  006C'                    u2121:
  1200  006C' EF00' F000'        	goto	l2443
  1201  0070'                    u2120:
  1202  0070'                    l2447:
  1203  0070' 90D8               	bcf	status,0,c
  1204  0072' 3600'              	rlcf	___awdiv@quotient^0,f,c
  1205  0074' 3600'              	rlcf	(___awdiv@quotient+1)^0,f,c
  1206  0076' 5000'              	movf	___awdiv@divisor^0,w,c
  1207  0078' 5C00'              	subwf	___awdiv@dividend^0,w,c
  1208  007A' 5000'              	movf	(___awdiv@divisor+1)^0,w,c
  1209  007C' 5800'              	subwfb	(___awdiv@dividend+1)^0,w,c
  1210  007E' A0D8               	btfss	status,0,c
  1211  0080' EF00' F000'        	goto	u2131
  1212  0084' EF00' F000'        	goto	u2130
  1213  0088'                    u2131:
  1214  0088' EF00' F000'        	goto	l2455
  1215  008C'                    u2130:
  1216  008C' 5000'              	movf	___awdiv@divisor^0,w,c
  1217  008E' 5E00'              	subwf	___awdiv@dividend^0,f,c
  1218  0090' 5000'              	movf	(___awdiv@divisor+1)^0,w,c
  1219  0092' 5A00'              	subwfb	(___awdiv@dividend+1)^0,f,c
  1220  0094' 8000'              	bsf	___awdiv@quotient^0,0,c
  1221  0096'                    l2455:
  1222  0096' 90D8               	bcf	status,0,c
  1223  0098' 3200'              	rrcf	(___awdiv@divisor+1)^0,f,c
  1224  009A' 3200'              	rrcf	___awdiv@divisor^0,f,c
  1225  009C' 2E00'              	decfsz	___awdiv@counter^0,f,c
  1226  009E' EF00' F000'        	goto	l2447
  1227  00A2'                    l2459:
  1228  00A2' 5000'              	movf	___awdiv@sign^0,w,c
  1229  00A4' B4D8               	btfsc	status,2,c
  1230  00A6' EF00' F000'        	goto	u2141
  1231  00AA' EF00' F000'        	goto	u2140
  1232  00AE'                    u2141:
  1233  00AE' EF00' F000'        	goto	l2463
  1234  00B2'                    u2140:
  1235  00B2' 6C00'              	negf	___awdiv@quotient^0,c
  1236  00B4' 1E00'              	comf	(___awdiv@quotient+1)^0,f,c
  1237  00B6' B0D8               	btfsc	status,0,c
  1238  00B8' 2A00'              	incf	(___awdiv@quotient+1)^0,f,c
  1239  00BA'                    l2463:
  1240  00BA' C00F' F009'        	movff	___awdiv@quotient,?___awdiv
  1241  00BE' C010' F00A'        	movff	___awdiv@quotient+1,?___awdiv+1
  1242  00C2' 0012               	return		;funcret
  1243  00C4'                    __end_of___awdiv:
  1244                           	callstack 0
  1245                           
  1246 ;; *************** function _seccount *****************
  1247 ;; Defined at:
  1248 ;;		line 10 in file "date.c"
  1249 ;; Parameters:    Size  Location     Type
  1250 ;;  sec             2    3[COMRAM] PTR volatile int 
  1251 ;;		 -> sec(2), 
  1252 ;; Auto vars:     Size  Location     Type
  1253 ;;		None
  1254 ;; Return value:  Size  Location     Type
  1255 ;;                  1    wreg      void 
  1256 ;; Registers used:
  1257 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1258 ;; Tracked objects:
  1259 ;;		On entry : 0/0
  1260 ;;		On exit  : 0/0
  1261 ;;		Unchanged: 0/0
  1262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1263 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1265 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1266 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1267 ;;Total ram usage:        4 bytes
  1268 ;; Hardware stack levels used: 1
  1269 ;; Hardware stack levels required when called: 2
  1270 ;; This function calls:
  1271 ;;		Nothing
  1272 ;; This function is called by:
  1273 ;;		_main
  1274 ;; This function uses a non-reentrant model
  1275 ;;
  1276                           
  1277                           	psect	text3
  1278  0000'                    __ptext3:
  1279                           	callstack 0
  1280  0000'                    _seccount:
  1281                           	callstack 28
  1282  0000'                    
  1283                           ;date.c: 11:     if(*sec==60){
  1284  0000' C003' FFD9         	movff	seccount@sec,fsr2l
  1285  0004' C004' FFDA         	movff	seccount@sec+1,fsr2h
  1286  0008' 0E3C               	movlw	60
  1287  000A' 18DE               	xorwf	postinc2,w,c
  1288  000C' 10DE               	iorwf	postinc2,w,c
  1289  000E' A4D8               	btfss	status,2,c
  1290  0010' EF00' F000'        	goto	u2211
  1291  0014' EF00' F000'        	goto	u2210
  1292  0018'                    u2211:
  1293  0018' EF00' F000'        	goto	l188
  1294  001C'                    u2210:
  1295  001C'                    
  1296                           ;date.c: 12:         ++min;
  1297  001C' 0100               	movlb	0	; () banked
  1298  001E' 4B00'              	infsnz	_min& (0+255),f,b	;volatile
  1299  0020' 2B00'              	incf	(_min+1)& (0+255),f,b	;volatile
  1300  0022'                    
  1301                           ; BSR set to: 0
  1302                           ;date.c: 13:         *sec = 0;
  1303  0022' C003' FFD9         	movff	seccount@sec,fsr2l
  1304  0026' C004' FFDA         	movff	seccount@sec+1,fsr2h
  1305  002A' 0E00               	movlw	0
  1306  002C' 6EDE               	movwf	postinc2,c
  1307  002E' 0E00               	movlw	0
  1308  0030' 6EDD               	movwf	postdec2,c
  1309  0032'                    l188:
  1310  0032' 0012               	return		;funcret
  1311  0034'                    __end_of_seccount:
  1312                           	callstack 0
  1313                           
  1314 ;; *************** function _mincount *****************
  1315 ;; Defined at:
  1316 ;;		line 20 in file "date.c"
  1317 ;; Parameters:    Size  Location     Type
  1318 ;;  min             2    3[COMRAM] PTR volatile int 
  1319 ;;		 -> min(2), 
  1320 ;; Auto vars:     Size  Location     Type
  1321 ;;		None
  1322 ;; Return value:  Size  Location     Type
  1323 ;;                  1    wreg      void 
  1324 ;; Registers used:
  1325 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1326 ;; Tracked objects:
  1327 ;;		On entry : 0/0
  1328 ;;		On exit  : 0/0
  1329 ;;		Unchanged: 0/0
  1330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1331 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1333 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1334 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1335 ;;Total ram usage:        4 bytes
  1336 ;; Hardware stack levels used: 1
  1337 ;; Hardware stack levels required when called: 2
  1338 ;; This function calls:
  1339 ;;		Nothing
  1340 ;; This function is called by:
  1341 ;;		_main
  1342 ;; This function uses a non-reentrant model
  1343 ;;
  1344                           
  1345                           	psect	text4
  1346  0000'                    __ptext4:
  1347                           	callstack 0
  1348  0000'                    _mincount:
  1349                           	callstack 28
  1350  0000'                    
  1351                           ;date.c: 21:     if(*min==60){
  1352  0000' C003' FFD9         	movff	mincount@min,fsr2l
  1353  0004' C004' FFDA         	movff	mincount@min+1,fsr2h
  1354  0008' 0E3C               	movlw	60
  1355  000A' 18DE               	xorwf	postinc2,w,c
  1356  000C' 10DE               	iorwf	postinc2,w,c
  1357  000E' A4D8               	btfss	status,2,c
  1358  0010' EF00' F000'        	goto	u2221
  1359  0014' EF00' F000'        	goto	u2220
  1360  0018'                    u2221:
  1361  0018' EF00' F000'        	goto	l192
  1362  001C'                    u2220:
  1363  001C'                    
  1364                           ;date.c: 22:         ++hour;
  1365  001C' 0100               	movlb	0	; () banked
  1366  001E' 4B00'              	infsnz	_hour& (0+255),f,b	;volatile
  1367  0020' 2B00'              	incf	(_hour+1)& (0+255),f,b	;volatile
  1368  0022'                    
  1369                           ; BSR set to: 0
  1370                           ;date.c: 23:         *min = 0;
  1371  0022' C003' FFD9         	movff	mincount@min,fsr2l
  1372  0026' C004' FFDA         	movff	mincount@min+1,fsr2h
  1373  002A' 0E00               	movlw	0
  1374  002C' 6EDE               	movwf	postinc2,c
  1375  002E' 0E00               	movlw	0
  1376  0030' 6EDD               	movwf	postdec2,c
  1377  0032'                    l192:
  1378  0032' 0012               	return		;funcret
  1379  0034'                    __end_of_mincount:
  1380                           	callstack 0
  1381                           
  1382 ;; *************** function _dst *****************
  1383 ;; Defined at:
  1384 ;;		line 85 in file "date.c"
  1385 ;; Parameters:    Size  Location     Type
  1386 ;;  hour            2    3[COMRAM] PTR volatile int 
  1387 ;;		 -> hour(2), 
  1388 ;;  day             2    5[COMRAM] volatile int 
  1389 ;;  month           2    7[COMRAM] volatile int 
  1390 ;;  weekday         2    9[COMRAM] int 
  1391 ;;  bwdcheck        2   11[COMRAM] PTR int 
  1392 ;;		 -> main@bwdcheck(2), 
  1393 ;; Auto vars:     Size  Location     Type
  1394 ;;		None
  1395 ;; Return value:  Size  Location     Type
  1396 ;;                  1    wreg      void 
  1397 ;; Registers used:
  1398 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1399 ;; Tracked objects:
  1400 ;;		On entry : 0/0
  1401 ;;		On exit  : 0/0
  1402 ;;		Unchanged: 0/0
  1403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1404 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1406 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1407 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1408 ;;Total ram usage:       12 bytes
  1409 ;; Hardware stack levels used: 1
  1410 ;; Hardware stack levels required when called: 2
  1411 ;; This function calls:
  1412 ;;		Nothing
  1413 ;; This function is called by:
  1414 ;;		_main
  1415 ;; This function uses a non-reentrant model
  1416 ;;
  1417                           
  1418                           	psect	text5
  1419  0000'                    __ptext5:
  1420                           	callstack 0
  1421  0000'                    _dst:
  1422                           	callstack 28
  1423  0000'                    
  1424                           ;date.c: 86:     if(day >= 25 && day <= 31 && month == 3 && weekday == 0){
  1425  0000' BE00'              	btfsc	(dst@day+1)^0,7,c	;volatile
  1426  0002' EF00' F000'        	goto	u2411
  1427  0006' 5000'              	movf	(dst@day+1)^0,w,c	;volatile
  1428  0008' E109               	bnz	u2410
  1429  000A' 0E19               	movlw	25
  1430  000C' 5C00'              	subwf	dst@day^0,w,c	;volatile
  1431  000E' A0D8               	btfss	status,0,c
  1432  0010' EF00' F000'        	goto	u2411
  1433  0014' EF00' F000'        	goto	u2410
  1434  0018'                    u2411:
  1435  0018' EF00' F000'        	goto	l2673
  1436  001C'                    u2410:
  1437  001C' BE00'              	btfsc	(dst@day+1)^0,7,c	;volatile
  1438  001E' EF00' F000'        	goto	u2420
  1439  0022' 5000'              	movf	(dst@day+1)^0,w,c	;volatile
  1440  0024' E107               	bnz	u2421
  1441  0026' 0E20               	movlw	32
  1442  0028' 5C00'              	subwf	dst@day^0,w,c	;volatile
  1443  002A' B0D8               	btfsc	status,0,c
  1444  002C' EF00' F000'        	goto	u2421
  1445  0030' EF00' F000'        	goto	u2420
  1446  0034'                    u2421:
  1447  0034' EF00' F000'        	goto	l2673
  1448  0038'                    u2420:
  1449  0038' 0E03               	movlw	3
  1450  003A' 1800'              	xorwf	dst@month^0,w,c	;volatile
  1451  003C' 1000'              	iorwf	(dst@month+1)^0,w,c	;volatile
  1452  003E' A4D8               	btfss	status,2,c
  1453  0040' EF00' F000'        	goto	u2431
  1454  0044' EF00' F000'        	goto	u2430
  1455  0048'                    u2431:
  1456  0048' EF00' F000'        	goto	l2673
  1457  004C'                    u2430:
  1458  004C' 5000'              	movf	dst@weekday^0,w,c
  1459  004E' 1000'              	iorwf	(dst@weekday+1)^0,w,c
  1460  0050' A4D8               	btfss	status,2,c
  1461  0052' EF00' F000'        	goto	u2441
  1462  0056' EF00' F000'        	goto	u2440
  1463  005A'                    u2441:
  1464  005A' EF00' F000'        	goto	l2673
  1465  005E'                    u2440:
  1466  005E'                    
  1467                           ;date.c: 87:         if(*hour == 1){
  1468  005E' C003' FFD9         	movff	dst@hour,fsr2l
  1469  0062' C004' FFDA         	movff	dst@hour+1,fsr2h
  1470  0066' 04DE               	decf	postinc2,w,c
  1471  0068' 10DE               	iorwf	postinc2,w,c
  1472  006A' A4D8               	btfss	status,2,c
  1473  006C' EF00' F000'        	goto	u2451
  1474  0070' EF00' F000'        	goto	u2450
  1475  0074'                    u2451:
  1476  0074' EF00' F000'        	goto	l236
  1477  0078'                    u2450:
  1478  0078'                    
  1479                           ;date.c: 88:             *hour = 2;
  1480  0078' C003' FFD9         	movff	dst@hour,fsr2l
  1481  007C' C004' FFDA         	movff	dst@hour+1,fsr2h
  1482  0080' 0E02               	movlw	2
  1483  0082' 6EDE               	movwf	postinc2,c
  1484  0084' 0E00               	movlw	0
  1485  0086' 6EDD               	movwf	postdec2,c
  1486  0088' EF00' F000'        	goto	l236
  1487  008C'                    l2673:
  1488  008C' BE00'              	btfsc	(dst@day+1)^0,7,c	;volatile
  1489  008E' EF00' F000'        	goto	u2461
  1490  0092' 5000'              	movf	(dst@day+1)^0,w,c	;volatile
  1491  0094' E109               	bnz	u2460
  1492  0096' 0E19               	movlw	25
  1493  0098' 5C00'              	subwf	dst@day^0,w,c	;volatile
  1494  009A' A0D8               	btfss	status,0,c
  1495  009C' EF00' F000'        	goto	u2461
  1496  00A0' EF00' F000'        	goto	u2460
  1497  00A4'                    u2461:
  1498  00A4' EF00' F000'        	goto	l236
  1499  00A8'                    u2460:
  1500  00A8' BE00'              	btfsc	(dst@day+1)^0,7,c	;volatile
  1501  00AA' EF00' F000'        	goto	u2470
  1502  00AE' 5000'              	movf	(dst@day+1)^0,w,c	;volatile
  1503  00B0' E107               	bnz	u2471
  1504  00B2' 0E20               	movlw	32
  1505  00B4' 5C00'              	subwf	dst@day^0,w,c	;volatile
  1506  00B6' B0D8               	btfsc	status,0,c
  1507  00B8' EF00' F000'        	goto	u2471
  1508  00BC' EF00' F000'        	goto	u2470
  1509  00C0'                    u2471:
  1510  00C0' EF00' F000'        	goto	l236
  1511  00C4'                    u2470:
  1512  00C4' 0E0A               	movlw	10
  1513  00C6' 1800'              	xorwf	dst@month^0,w,c	;volatile
  1514  00C8' 1000'              	iorwf	(dst@month+1)^0,w,c	;volatile
  1515  00CA' A4D8               	btfss	status,2,c
  1516  00CC' EF00' F000'        	goto	u2481
  1517  00D0' EF00' F000'        	goto	u2480
  1518  00D4'                    u2481:
  1519  00D4' EF00' F000'        	goto	l236
  1520  00D8'                    u2480:
  1521  00D8' 5000'              	movf	dst@weekday^0,w,c
  1522  00DA' 1000'              	iorwf	(dst@weekday+1)^0,w,c
  1523  00DC' A4D8               	btfss	status,2,c
  1524  00DE' EF00' F000'        	goto	u2491
  1525  00E2' EF00' F000'        	goto	u2490
  1526  00E6'                    u2491:
  1527  00E6' EF00' F000'        	goto	l236
  1528  00EA'                    u2490:
  1529  00EA' C00B' FFD9         	movff	dst@bwdcheck,fsr2l
  1530  00EE' C00C' FFDA         	movff	dst@bwdcheck+1,fsr2h
  1531  00F2' 50DE               	movf	postinc2,w,c
  1532  00F4' 10DE               	iorwf	postinc2,w,c
  1533  00F6' A4D8               	btfss	status,2,c
  1534  00F8' EF00' F000'        	goto	u2501
  1535  00FC' EF00' F000'        	goto	u2500
  1536  0100'                    u2501:
  1537  0100' EF00' F000'        	goto	l236
  1538  0104'                    u2500:
  1539  0104'                    
  1540                           ;date.c: 91:         if(*hour == 2){
  1541  0104' C003' FFD9         	movff	dst@hour,fsr2l
  1542  0108' C004' FFDA         	movff	dst@hour+1,fsr2h
  1543  010C' 0E02               	movlw	2
  1544  010E' 18DE               	xorwf	postinc2,w,c
  1545  0110' 10DE               	iorwf	postinc2,w,c
  1546  0112' A4D8               	btfss	status,2,c
  1547  0114' EF00' F000'        	goto	u2511
  1548  0118' EF00' F000'        	goto	u2510
  1549  011C'                    u2511:
  1550  011C' EF00' F000'        	goto	l236
  1551  0120'                    u2510:
  1552  0120'                    
  1553                           ;date.c: 92:             *hour = 1;
  1554  0120' C003' FFD9         	movff	dst@hour,fsr2l
  1555  0124' C004' FFDA         	movff	dst@hour+1,fsr2h
  1556  0128' 0E01               	movlw	1
  1557  012A' 6EDE               	movwf	postinc2,c
  1558  012C' 0E00               	movlw	0
  1559  012E' 6EDD               	movwf	postdec2,c
  1560                           
  1561                           ;date.c: 93:             *bwdcheck = 1;
  1562  0130' C00B' FFD9         	movff	dst@bwdcheck,fsr2l
  1563  0134' C00C' FFDA         	movff	dst@bwdcheck+1,fsr2h
  1564  0138' 0E01               	movlw	1
  1565  013A' 6EDE               	movwf	postinc2,c
  1566  013C' 0E00               	movlw	0
  1567  013E' 6EDD               	movwf	postdec2,c
  1568  0140'                    l236:
  1569  0140' 0012               	return		;funcret
  1570  0142'                    __end_of_dst:
  1571                           	callstack 0
  1572                           
  1573 ;; *************** function _datecount *****************
  1574 ;; Defined at:
  1575 ;;		line 30 in file "date.c"
  1576 ;; Parameters:    Size  Location     Type
  1577 ;;  hour            2   23[COMRAM] PTR volatile int 
  1578 ;;		 -> hour(2), 
  1579 ;;  day             2   25[COMRAM] PTR volatile int 
  1580 ;;		 -> day(2), 
  1581 ;;  month           2   27[COMRAM] PTR volatile int 
  1582 ;;		 -> month(2), 
  1583 ;;  year            2   29[COMRAM] PTR volatile int 
  1584 ;;		 -> year(2), 
  1585 ;;  bwdcheck        2   31[COMRAM] PTR int 
  1586 ;;		 -> main@bwdcheck(2), 
  1587 ;; Auto vars:     Size  Location     Type
  1588 ;;		None
  1589 ;; Return value:  Size  Location     Type
  1590 ;;                  1    wreg      void 
  1591 ;; Registers used:
  1592 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1593 ;; Tracked objects:
  1594 ;;		On entry : 0/0
  1595 ;;		On exit  : 0/0
  1596 ;;		Unchanged: 0/0
  1597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1598 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1600 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1601 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1602 ;;Total ram usage:       12 bytes
  1603 ;; Hardware stack levels used: 1
  1604 ;; Hardware stack levels required when called: 3
  1605 ;; This function calls:
  1606 ;;		___awmod
  1607 ;; This function is called by:
  1608 ;;		_main
  1609 ;; This function uses a non-reentrant model
  1610 ;;
  1611                           
  1612                           	psect	text6
  1613  0000'                    __ptext6:
  1614                           	callstack 0
  1615  0000'                    _datecount:
  1616                           	callstack 27
  1617  0000'                    
  1618                           ;date.c: 31:     if(*hour==24){
  1619  0000' C017' FFD9         	movff	datecount@hour,fsr2l
  1620  0004' C018' FFDA         	movff	datecount@hour+1,fsr2h
  1621  0008' 0E18               	movlw	24
  1622  000A' 18DE               	xorwf	postinc2,w,c
  1623  000C' 10DE               	iorwf	postinc2,w,c
  1624  000E' A4D8               	btfss	status,2,c
  1625  0010' EF00' F000'        	goto	u2231
  1626  0014' EF00' F000'        	goto	u2230
  1627  0018'                    u2231:
  1628  0018' EF00' F000'        	goto	l221
  1629  001C'                    u2230:
  1630  001C'                    
  1631                           ;date.c: 32:         if(*day > 0 && *day < 28){
  1632  001C' C019' FFD9         	movff	datecount@day,fsr2l
  1633  0020' C01A' FFDA         	movff	datecount@day+1,fsr2h
  1634  0024' 0E01               	movlw	1
  1635  0026' BEDB               	btfsc	plusw2,7,c
  1636  0028' EF00' F000'        	goto	u2241
  1637  002C' 0E01               	movlw	1
  1638  002E' 50DB               	movf	plusw2,w,c
  1639  0030' E108               	bnz	u2240
  1640  0032' 04DE               	decf	postinc2,w,c
  1641  0034' A0D8               	btfss	status,0,c
  1642  0036' EF00' F000'        	goto	u2241
  1643  003A' EF00' F000'        	goto	u2240
  1644  003E'                    u2241:
  1645  003E' EF00' F000'        	goto	l2589
  1646  0042'                    u2240:
  1647  0042' C019' FFD9         	movff	datecount@day,fsr2l
  1648  0046' C01A' FFDA         	movff	datecount@day+1,fsr2h
  1649  004A' 0E01               	movlw	1
  1650  004C' BEDB               	btfsc	plusw2,7,c
  1651  004E' EF00' F000'        	goto	u2250
  1652  0052' 0E01               	movlw	1
  1653  0054' 50DB               	movf	plusw2,w,c
  1654  0056' E107               	bnz	u2251
  1655  0058' 0E1C               	movlw	28
  1656  005A' 5CDE               	subwf	postinc2,w,c
  1657  005C' B0D8               	btfsc	status,0,c
  1658  005E' EF00' F000'        	goto	u2251
  1659  0062' EF00' F000'        	goto	u2250
  1660  0066'                    u2251:
  1661  0066' EF00' F000'        	goto	l2589
  1662  006A'                    u2250:
  1663  006A'                    l2587:
  1664                           
  1665                           ;date.c: 33:             ++*day;
  1666  006A' C019' FFD9         	movff	datecount@day,fsr2l
  1667  006E' C01A' FFDA         	movff	datecount@day+1,fsr2h
  1668  0072' 2ADE               	incf	postinc2,f,c
  1669  0074' 0E00               	movlw	0
  1670  0076' 22DD               	addwfc	postdec2,f,c
  1671                           
  1672                           ;date.c: 34:         }else if(*day == 28){
  1673  0078' EF00' F000'        	goto	l2647
  1674  007C'                    l2589:
  1675  007C' C019' FFD9         	movff	datecount@day,fsr2l
  1676  0080' C01A' FFDA         	movff	datecount@day+1,fsr2h
  1677  0084' 0E1C               	movlw	28
  1678  0086' 18DE               	xorwf	postinc2,w,c
  1679  0088' 10DE               	iorwf	postinc2,w,c
  1680  008A' A4D8               	btfss	status,2,c
  1681  008C' EF00' F000'        	goto	u2261
  1682  0090' EF00' F000'        	goto	u2260
  1683  0094'                    u2261:
  1684  0094' EF00' F000'        	goto	l2607
  1685  0098'                    u2260:
  1686  0098'                    
  1687                           ;date.c: 35:             if(*month==2){
  1688  0098' C01B' FFD9         	movff	datecount@month,fsr2l
  1689  009C' C01C' FFDA         	movff	datecount@month+1,fsr2h
  1690  00A0' 0E02               	movlw	2
  1691  00A2' 18DE               	xorwf	postinc2,w,c
  1692  00A4' 10DE               	iorwf	postinc2,w,c
  1693  00A6' A4D8               	btfss	status,2,c
  1694  00A8' EF00' F000'        	goto	u2271
  1695  00AC' EF00' F000'        	goto	u2270
  1696  00B0'                    u2271:
  1697  00B0' EF00' F000'        	goto	l2587
  1698  00B4'                    u2270:
  1699  00B4'                    
  1700                           ;date.c: 36:                 if(((*year%400==0)&&(*year%100!=0))||(*year%4==0)){
  1701  00B4' C01D' FFD9         	movff	datecount@year,fsr2l
  1702  00B8' C01E' FFDA         	movff	datecount@year+1,fsr2h
  1703  00BC' CFDE F011'         	movff	postinc2,___awmod@dividend
  1704  00C0' CFDD F012'         	movff	postdec2,___awmod@dividend+1
  1705  00C4' 0E01               	movlw	1
  1706  00C6' 6E00'              	movwf	(___awmod@divisor+1)^0,c
  1707  00C8' 0E90               	movlw	144
  1708  00CA' 6E00'              	movwf	___awmod@divisor^0,c
  1709  00CC' EC00' F000'        	call	___awmod	;wreg free
  1710  00D0' 5000'              	movf	?___awmod^0,w,c
  1711  00D2' 1000'              	iorwf	(?___awmod+1)^0,w,c
  1712  00D4' A4D8               	btfss	status,2,c
  1713  00D6' EF00' F000'        	goto	u2281
  1714  00DA' EF00' F000'        	goto	u2280
  1715  00DE'                    u2281:
  1716  00DE' EF00' F000'        	goto	l2597
  1717  00E2'                    u2280:
  1718  00E2' C01D' FFD9         	movff	datecount@year,fsr2l
  1719  00E6' C01E' FFDA         	movff	datecount@year+1,fsr2h
  1720  00EA' CFDE F011'         	movff	postinc2,___awmod@dividend
  1721  00EE' CFDD F012'         	movff	postdec2,___awmod@dividend+1
  1722  00F2' 0E00               	movlw	0
  1723  00F4' 6E00'              	movwf	(___awmod@divisor+1)^0,c
  1724  00F6' 0E64               	movlw	100
  1725  00F8' 6E00'              	movwf	___awmod@divisor^0,c
  1726  00FA' EC00' F000'        	call	___awmod	;wreg free
  1727  00FE' 5000'              	movf	?___awmod^0,w,c
  1728  0100' 1000'              	iorwf	(?___awmod+1)^0,w,c
  1729  0102' A4D8               	btfss	status,2,c
  1730  0104' EF00' F000'        	goto	u2291
  1731  0108' EF00' F000'        	goto	u2290
  1732  010C'                    u2291:
  1733  010C' EF00' F000'        	goto	l2587
  1734  0110'                    u2290:
  1735  0110'                    l2597:
  1736  0110' C01D' FFD9         	movff	datecount@year,fsr2l
  1737  0114' C01E' FFDA         	movff	datecount@year+1,fsr2h
  1738  0118' CFDE F021'         	movff	postinc2,??_datecount
  1739  011C' CFDD F022'         	movff	postdec2,??_datecount+1
  1740  0120' 0E03               	movlw	3
  1741  0122' 1600'              	andwf	??_datecount^0,f,c
  1742  0124' 0E00               	movlw	0
  1743  0126' 1600'              	andwf	(??_datecount+1)^0,f,c
  1744  0128' 5000'              	movf	??_datecount^0,w,c
  1745  012A' 1000'              	iorwf	(??_datecount+1)^0,w,c
  1746  012C' A4D8               	btfss	status,2,c
  1747  012E' EF00' F000'        	goto	u2301
  1748  0132' EF00' F000'        	goto	u2300
  1749  0136'                    u2301:
  1750  0136' EF00' F000'        	goto	l2601
  1751  013A'                    u2300:
  1752  013A' EF00' F000'        	goto	l2587
  1753  013E'                    l2601:
  1754                           
  1755                           ;date.c: 39:                     *day = 1;
  1756  013E' C019' FFD9         	movff	datecount@day,fsr2l
  1757  0142' C01A' FFDA         	movff	datecount@day+1,fsr2h
  1758  0146' 0E01               	movlw	1
  1759  0148' 6EDE               	movwf	postinc2,c
  1760  014A' 0E00               	movlw	0
  1761  014C' 6EDD               	movwf	postdec2,c
  1762  014E'                    l2603:
  1763                           
  1764                           ;date.c: 40:                     ++*month;
  1765  014E' C01B' FFD9         	movff	datecount@month,fsr2l
  1766  0152' C01C' FFDA         	movff	datecount@month+1,fsr2h
  1767  0156' 2ADE               	incf	postinc2,f,c
  1768  0158' 0E00               	movlw	0
  1769  015A' 22DD               	addwfc	postdec2,f,c
  1770  015C' EF00' F000'        	goto	l2647
  1771  0160'                    l2607:
  1772  0160' C019' FFD9         	movff	datecount@day,fsr2l
  1773  0164' C01A' FFDA         	movff	datecount@day+1,fsr2h
  1774  0168' 0E1D               	movlw	29
  1775  016A' 18DE               	xorwf	postinc2,w,c
  1776  016C' 10DE               	iorwf	postinc2,w,c
  1777  016E' A4D8               	btfss	status,2,c
  1778  0170' EF00' F000'        	goto	u2311
  1779  0174' EF00' F000'        	goto	u2310
  1780  0178'                    u2311:
  1781  0178' EF00' F000'        	goto	l2617
  1782  017C'                    u2310:
  1783  017C'                    
  1784                           ;date.c: 46:             if(*month==2){
  1785  017C' C01B' FFD9         	movff	datecount@month,fsr2l
  1786  0180' C01C' FFDA         	movff	datecount@month+1,fsr2h
  1787  0184' 0E02               	movlw	2
  1788  0186' 18DE               	xorwf	postinc2,w,c
  1789  0188' 10DE               	iorwf	postinc2,w,c
  1790  018A' A4D8               	btfss	status,2,c
  1791  018C' EF00' F000'        	goto	u2321
  1792  0190' EF00' F000'        	goto	u2320
  1793  0194'                    u2321:
  1794  0194' EF00' F000'        	goto	l2587
  1795  0198'                    u2320:
  1796  0198' EF00' F000'        	goto	l2601
  1797  019C'                    l2617:
  1798  019C' C019' FFD9         	movff	datecount@day,fsr2l
  1799  01A0' C01A' FFDA         	movff	datecount@day+1,fsr2h
  1800  01A4' 0E1E               	movlw	30
  1801  01A6' 18DE               	xorwf	postinc2,w,c
  1802  01A8' 10DE               	iorwf	postinc2,w,c
  1803  01AA' A4D8               	btfss	status,2,c
  1804  01AC' EF00' F000'        	goto	u2331
  1805  01B0' EF00' F000'        	goto	u2330
  1806  01B4'                    u2331:
  1807  01B4' EF00' F000'        	goto	l2633
  1808  01B8'                    u2330:
  1809  01B8'                    
  1810                           ;date.c: 53:             if(*month == 4 || *month == 6 || *month == 9 || *month == 11){
  1811  01B8' C01B' FFD9         	movff	datecount@month,fsr2l
  1812  01BC' C01C' FFDA         	movff	datecount@month+1,fsr2h
  1813  01C0' 0E04               	movlw	4
  1814  01C2' 18DE               	xorwf	postinc2,w,c
  1815  01C4' 10DE               	iorwf	postinc2,w,c
  1816  01C6' B4D8               	btfsc	status,2,c
  1817  01C8' EF00' F000'        	goto	u2341
  1818  01CC' EF00' F000'        	goto	u2340
  1819  01D0'                    u2341:
  1820  01D0' EF00' F000'        	goto	l2601
  1821  01D4'                    u2340:
  1822  01D4' C01B' FFD9         	movff	datecount@month,fsr2l
  1823  01D8' C01C' FFDA         	movff	datecount@month+1,fsr2h
  1824  01DC' 0E06               	movlw	6
  1825  01DE' 18DE               	xorwf	postinc2,w,c
  1826  01E0' 10DE               	iorwf	postinc2,w,c
  1827  01E2' B4D8               	btfsc	status,2,c
  1828  01E4' EF00' F000'        	goto	u2351
  1829  01E8' EF00' F000'        	goto	u2350
  1830  01EC'                    u2351:
  1831  01EC' EF00' F000'        	goto	l2601
  1832  01F0'                    u2350:
  1833  01F0' C01B' FFD9         	movff	datecount@month,fsr2l
  1834  01F4' C01C' FFDA         	movff	datecount@month+1,fsr2h
  1835  01F8' 0E09               	movlw	9
  1836  01FA' 18DE               	xorwf	postinc2,w,c
  1837  01FC' 10DE               	iorwf	postinc2,w,c
  1838  01FE' B4D8               	btfsc	status,2,c
  1839  0200' EF00' F000'        	goto	u2361
  1840  0204' EF00' F000'        	goto	u2360
  1841  0208'                    u2361:
  1842  0208' EF00' F000'        	goto	l2601
  1843  020C'                    u2360:
  1844  020C' C01B' FFD9         	movff	datecount@month,fsr2l
  1845  0210' C01C' FFDA         	movff	datecount@month+1,fsr2h
  1846  0214' 0E0B               	movlw	11
  1847  0216' 18DE               	xorwf	postinc2,w,c
  1848  0218' 10DE               	iorwf	postinc2,w,c
  1849  021A' A4D8               	btfss	status,2,c
  1850  021C' EF00' F000'        	goto	u2371
  1851  0220' EF00' F000'        	goto	u2370
  1852  0224'                    u2371:
  1853  0224' EF00' F000'        	goto	l2587
  1854  0228'                    u2370:
  1855  0228' EF00' F000'        	goto	l2601
  1856  022C'                    l2633:
  1857  022C' C019' FFD9         	movff	datecount@day,fsr2l
  1858  0230' C01A' FFDA         	movff	datecount@day+1,fsr2h
  1859  0234' 0E1F               	movlw	31
  1860  0236' 18DE               	xorwf	postinc2,w,c
  1861  0238' 10DE               	iorwf	postinc2,w,c
  1862  023A' A4D8               	btfss	status,2,c
  1863  023C' EF00' F000'        	goto	u2381
  1864  0240' EF00' F000'        	goto	u2380
  1865  0244'                    u2381:
  1866  0244' EF00' F000'        	goto	l2647
  1867  0248'                    u2380:
  1868  0248'                    
  1869                           ;date.c: 60:             *day = 1;
  1870  0248' C019' FFD9         	movff	datecount@day,fsr2l
  1871  024C' C01A' FFDA         	movff	datecount@day+1,fsr2h
  1872  0250' 0E01               	movlw	1
  1873  0252' 6EDE               	movwf	postinc2,c
  1874  0254' 0E00               	movlw	0
  1875  0256' 6EDD               	movwf	postdec2,c
  1876  0258'                    
  1877                           ;date.c: 61:             if(*month == 12){
  1878  0258' C01B' FFD9         	movff	datecount@month,fsr2l
  1879  025C' C01C' FFDA         	movff	datecount@month+1,fsr2h
  1880  0260' 0E0C               	movlw	12
  1881  0262' 18DE               	xorwf	postinc2,w,c
  1882  0264' 10DE               	iorwf	postinc2,w,c
  1883  0266' A4D8               	btfss	status,2,c
  1884  0268' EF00' F000'        	goto	u2391
  1885  026C' EF00' F000'        	goto	u2390
  1886  0270'                    u2391:
  1887  0270' EF00' F000'        	goto	l2603
  1888  0274'                    u2390:
  1889  0274'                    
  1890                           ;date.c: 62:                 *month = 1;
  1891  0274' C01B' FFD9         	movff	datecount@month,fsr2l
  1892  0278' C01C' FFDA         	movff	datecount@month+1,fsr2h
  1893  027C' 0E01               	movlw	1
  1894  027E' 6EDE               	movwf	postinc2,c
  1895  0280' 0E00               	movlw	0
  1896  0282' 6EDD               	movwf	postdec2,c
  1897  0284'                    
  1898                           ;date.c: 63:                 ++*year;
  1899  0284' C01D' FFD9         	movff	datecount@year,fsr2l
  1900  0288' C01E' FFDA         	movff	datecount@year+1,fsr2h
  1901  028C' 2ADE               	incf	postinc2,f,c
  1902  028E' 0E00               	movlw	0
  1903  0290' 22DD               	addwfc	postdec2,f,c
  1904  0292'                    
  1905                           ;date.c: 64:                 *bwdcheck = 0;
  1906  0292' C01F' FFD9         	movff	datecount@bwdcheck,fsr2l
  1907  0296' C020' FFDA         	movff	datecount@bwdcheck+1,fsr2h
  1908  029A' 0E00               	movlw	0
  1909  029C' 6EDE               	movwf	postinc2,c
  1910  029E' 0E00               	movlw	0
  1911  02A0' 6EDD               	movwf	postdec2,c
  1912  02A2'                    l2647:
  1913                           
  1914                           ;date.c: 69:         *hour = 0;
  1915  02A2' C017' FFD9         	movff	datecount@hour,fsr2l
  1916  02A6' C018' FFDA         	movff	datecount@hour+1,fsr2h
  1917  02AA' 0E00               	movlw	0
  1918  02AC' 6EDE               	movwf	postinc2,c
  1919  02AE' 0E00               	movlw	0
  1920  02B0' 6EDD               	movwf	postdec2,c
  1921  02B2'                    l221:
  1922  02B2' 0012               	return		;funcret
  1923  02B4'                    __end_of_datecount:
  1924                           	callstack 0
  1925                           
  1926 ;; *************** function ___awmod *****************
  1927 ;; Defined at:
  1928 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awmod.c"
  1929 ;; Parameters:    Size  Location     Type
  1930 ;;  dividend        2   17[COMRAM] int 
  1931 ;;  divisor         2   19[COMRAM] int 
  1932 ;; Auto vars:     Size  Location     Type
  1933 ;;  sign            1   22[COMRAM] unsigned char 
  1934 ;;  counter         1   21[COMRAM] unsigned char 
  1935 ;; Return value:  Size  Location     Type
  1936 ;;                  2   17[COMRAM] int 
  1937 ;; Registers used:
  1938 ;;		wreg, status,2, status,0
  1939 ;; Tracked objects:
  1940 ;;		On entry : 0/0
  1941 ;;		On exit  : 0/0
  1942 ;;		Unchanged: 0/0
  1943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1944 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1945 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1947 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1948 ;;Total ram usage:        6 bytes
  1949 ;; Hardware stack levels used: 1
  1950 ;; Hardware stack levels required when called: 2
  1951 ;; This function calls:
  1952 ;;		Nothing
  1953 ;; This function is called by:
  1954 ;;		_datecount
  1955 ;;		_weekdaycheck
  1956 ;; This function uses a non-reentrant model
  1957 ;;
  1958                           
  1959                           	psect	text7
  1960  0000'                    __ptext7:
  1961                           	callstack 0
  1962  0000'                    ___awmod:
  1963                           	callstack 27
  1964  0000' 0E00               	movlw	0
  1965  0002' 6E00'              	movwf	___awmod@sign^0,c
  1966  0004' BE00'              	btfsc	(___awmod@dividend+1)^0,7,c
  1967  0006' EF00' F000'        	goto	u2150
  1968  000A' EF00' F000'        	goto	u2151
  1969  000E'                    u2151:
  1970  000E' EF00' F000'        	goto	l2475
  1971  0012'                    u2150:
  1972  0012' 6C00'              	negf	___awmod@dividend^0,c
  1973  0014' 1E00'              	comf	(___awmod@dividend+1)^0,f,c
  1974  0016' B0D8               	btfsc	status,0,c
  1975  0018' 2A00'              	incf	(___awmod@dividend+1)^0,f,c
  1976  001A' 0E01               	movlw	1
  1977  001C' 6E00'              	movwf	___awmod@sign^0,c
  1978  001E'                    l2475:
  1979  001E' BE00'              	btfsc	(___awmod@divisor+1)^0,7,c
  1980  0020' EF00' F000'        	goto	u2160
  1981  0024' EF00' F000'        	goto	u2161
  1982  0028'                    u2161:
  1983  0028' EF00' F000'        	goto	l2479
  1984  002C'                    u2160:
  1985  002C' 6C00'              	negf	___awmod@divisor^0,c
  1986  002E' 1E00'              	comf	(___awmod@divisor+1)^0,f,c
  1987  0030' B0D8               	btfsc	status,0,c
  1988  0032' 2A00'              	incf	(___awmod@divisor+1)^0,f,c
  1989  0034'                    l2479:
  1990  0034' 5000'              	movf	___awmod@divisor^0,w,c
  1991  0036' 1000'              	iorwf	(___awmod@divisor+1)^0,w,c
  1992  0038' B4D8               	btfsc	status,2,c
  1993  003A' EF00' F000'        	goto	u2171
  1994  003E' EF00' F000'        	goto	u2170
  1995  0042'                    u2171:
  1996  0042' EF00' F000'        	goto	l2495
  1997  0046'                    u2170:
  1998  0046' 0E01               	movlw	1
  1999  0048' 6E00'              	movwf	___awmod@counter^0,c
  2000  004A' EF00' F000'        	goto	l2485
  2001  004E'                    l2483:
  2002  004E' 90D8               	bcf	status,0,c
  2003  0050' 3600'              	rlcf	___awmod@divisor^0,f,c
  2004  0052' 3600'              	rlcf	(___awmod@divisor+1)^0,f,c
  2005  0054' 2A00'              	incf	___awmod@counter^0,f,c
  2006  0056'                    l2485:
  2007  0056' AE00'              	btfss	(___awmod@divisor+1)^0,7,c
  2008  0058' EF00' F000'        	goto	u2181
  2009  005C' EF00' F000'        	goto	u2180
  2010  0060'                    u2181:
  2011  0060' EF00' F000'        	goto	l2483
  2012  0064'                    u2180:
  2013  0064'                    l2487:
  2014  0064' 5000'              	movf	___awmod@divisor^0,w,c
  2015  0066' 5C00'              	subwf	___awmod@dividend^0,w,c
  2016  0068' 5000'              	movf	(___awmod@divisor+1)^0,w,c
  2017  006A' 5800'              	subwfb	(___awmod@dividend+1)^0,w,c
  2018  006C' A0D8               	btfss	status,0,c
  2019  006E' EF00' F000'        	goto	u2191
  2020  0072' EF00' F000'        	goto	u2190
  2021  0076'                    u2191:
  2022  0076' EF00' F000'        	goto	l2491
  2023  007A'                    u2190:
  2024  007A' 5000'              	movf	___awmod@divisor^0,w,c
  2025  007C' 5E00'              	subwf	___awmod@dividend^0,f,c
  2026  007E' 5000'              	movf	(___awmod@divisor+1)^0,w,c
  2027  0080' 5A00'              	subwfb	(___awmod@dividend+1)^0,f,c
  2028  0082'                    l2491:
  2029  0082' 90D8               	bcf	status,0,c
  2030  0084' 3200'              	rrcf	(___awmod@divisor+1)^0,f,c
  2031  0086' 3200'              	rrcf	___awmod@divisor^0,f,c
  2032  0088' 2E00'              	decfsz	___awmod@counter^0,f,c
  2033  008A' EF00' F000'        	goto	l2487
  2034  008E'                    l2495:
  2035  008E' 5000'              	movf	___awmod@sign^0,w,c
  2036  0090' B4D8               	btfsc	status,2,c
  2037  0092' EF00' F000'        	goto	u2201
  2038  0096' EF00' F000'        	goto	u2200
  2039  009A'                    u2201:
  2040  009A' EF00' F000'        	goto	l2499
  2041  009E'                    u2200:
  2042  009E' 6C00'              	negf	___awmod@dividend^0,c
  2043  00A0' 1E00'              	comf	(___awmod@dividend+1)^0,f,c
  2044  00A2' B0D8               	btfsc	status,0,c
  2045  00A4' 2A00'              	incf	(___awmod@dividend+1)^0,f,c
  2046  00A6'                    l2499:
  2047  00A6' C011' F011'        	movff	___awmod@dividend,?___awmod
  2048  00AA' C012' F012'        	movff	___awmod@dividend+1,?___awmod+1
  2049  00AE' 0012               	return		;funcret
  2050  00B0'                    __end_of___awmod:
  2051                           	callstack 0
  2052                           
  2053 ;; *************** function _Timer0_init *****************
  2054 ;; Defined at:
  2055 ;;		line 7 in file "timers.c"
  2056 ;; Parameters:    Size  Location     Type
  2057 ;;		None
  2058 ;; Auto vars:     Size  Location     Type
  2059 ;;		None
  2060 ;; Return value:  Size  Location     Type
  2061 ;;                  1    wreg      void 
  2062 ;; Registers used:
  2063 ;;		wreg, status,2
  2064 ;; Tracked objects:
  2065 ;;		On entry : 0/0
  2066 ;;		On exit  : 0/0
  2067 ;;		Unchanged: 0/0
  2068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2072 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2073 ;;Total ram usage:        0 bytes
  2074 ;; Hardware stack levels used: 1
  2075 ;; Hardware stack levels required when called: 2
  2076 ;; This function calls:
  2077 ;;		Nothing
  2078 ;; This function is called by:
  2079 ;;		_main
  2080 ;; This function uses a non-reentrant model
  2081 ;;
  2082                           
  2083                           	psect	text8
  2084  0000'                    __ptext8:
  2085                           	callstack 0
  2086  0000'                    _Timer0_init:
  2087                           	callstack 28
  2088  0000'                    
  2089                           ;timers.c: 9:     T0CON1bits.T0CS=0b010;
  2090  0000' 50D6               	movf	214,w,c	;volatile
  2091  0002' 0B1F               	andlw	-225
  2092  0004' 0940               	iorlw	64
  2093  0006' 6ED6               	movwf	214,c	;volatile
  2094  0008'                    
  2095                           ;timers.c: 10:     T0CON1bits.T0ASYNC=1;
  2096  0008' 88D6               	bsf	214,4,c	;volatile
  2097                           
  2098                           ;timers.c: 11:     T0CON1bits.T0CKPS=0b1000;
  2099  000A' 50D6               	movf	214,w,c	;volatile
  2100  000C' 0BF0               	andlw	-16
  2101  000E' 0908               	iorlw	8
  2102  0010' 6ED6               	movwf	214,c	;volatile
  2103  0012'                    
  2104                           ;timers.c: 12:     T0CON0bits.T016BIT=1;
  2105  0012' 88D5               	bsf	213,4,c	;volatile
  2106                           
  2107                           ;timers.c: 18:     TMR0H=3035>>8;
  2108  0014' 0E0B               	movlw	11
  2109  0016' 6ED4               	movwf	212,c	;volatile
  2110                           
  2111                           ;timers.c: 19:     TMR0L=3035&0b11111111;
  2112  0018' 0EDB               	movlw	219
  2113  001A' 6ED3               	movwf	211,c	;volatile
  2114  001C'                    
  2115                           ;timers.c: 20:     T0CON0bits.T0EN=1;
  2116  001C' 8ED5               	bsf	213,7,c	;volatile
  2117  001E' 0012               	return		;funcret
  2118  0020'                    __end_of_Timer0_init:
  2119                           	callstack 0
  2120                           
  2121 ;; *************** function _RH3_RD7_init *****************
  2122 ;; Defined at:
  2123 ;;		line 37 in file "LEDarray.c"
  2124 ;; Parameters:    Size  Location     Type
  2125 ;;		None
  2126 ;; Auto vars:     Size  Location     Type
  2127 ;;		None
  2128 ;; Return value:  Size  Location     Type
  2129 ;;                  1    wreg      void 
  2130 ;; Registers used:
  2131 ;;		None
  2132 ;; Tracked objects:
  2133 ;;		On entry : 0/0
  2134 ;;		On exit  : 0/0
  2135 ;;		Unchanged: 0/0
  2136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2140 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2141 ;;Total ram usage:        0 bytes
  2142 ;; Hardware stack levels used: 1
  2143 ;; Hardware stack levels required when called: 2
  2144 ;; This function calls:
  2145 ;;		Nothing
  2146 ;; This function is called by:
  2147 ;;		_main
  2148 ;; This function uses a non-reentrant model
  2149 ;;
  2150                           
  2151                           	psect	text9
  2152  0000'                    __ptext9:
  2153                           	callstack 0
  2154  0000'                    _RH3_RD7_init:
  2155                           	callstack 28
  2156  0000'                    
  2157                           ;LEDarray.c: 39:     LATHbits.LATH3=0;
  2158  0000' 9680               	bcf	128,3,c	;volatile
  2159                           
  2160                           ;LEDarray.c: 40:     TRISHbits.TRISH3=0;
  2161  0002' 9688               	bcf	136,3,c	;volatile
  2162                           
  2163                           ;LEDarray.c: 41:     LATDbits.LATD7=1;
  2164  0004' 8E7C               	bsf	124,7,c	;volatile
  2165                           
  2166                           ;LEDarray.c: 42:     TRISDbits.TRISD7=0;
  2167  0006' 9E84               	bcf	132,7,c	;volatile
  2168  0008' 0012               	return		;funcret
  2169  000A'                    __end_of_RH3_RD7_init:
  2170                           	callstack 0
  2171                           
  2172 ;; *************** function _LEDarray_init *****************
  2173 ;; Defined at:
  2174 ;;		line 8 in file "LEDarray.c"
  2175 ;; Parameters:    Size  Location     Type
  2176 ;;		None
  2177 ;; Auto vars:     Size  Location     Type
  2178 ;;		None
  2179 ;; Return value:  Size  Location     Type
  2180 ;;                  1    wreg      void 
  2181 ;; Registers used:
  2182 ;;		None
  2183 ;; Tracked objects:
  2184 ;;		On entry : 0/0
  2185 ;;		On exit  : 0/0
  2186 ;;		Unchanged: 0/0
  2187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2191 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2192 ;;Total ram usage:        0 bytes
  2193 ;; Hardware stack levels used: 1
  2194 ;; Hardware stack levels required when called: 2
  2195 ;; This function calls:
  2196 ;;		Nothing
  2197 ;; This function is called by:
  2198 ;;		_main
  2199 ;; This function uses a non-reentrant model
  2200 ;;
  2201                           
  2202                           	psect	text10
  2203  0000'                    __ptext10:
  2204                           	callstack 0
  2205  0000'                    _LEDarray_init:
  2206                           	callstack 28
  2207  0000'                    
  2208                           ;LEDarray.c: 12:     TRISGbits.TRISG0 = 0;
  2209  0000' 9087               	bcf	135,0,c	;volatile
  2210                           
  2211                           ;LEDarray.c: 13:     TRISGbits.TRISG1 = 0;
  2212  0002' 9287               	bcf	135,1,c	;volatile
  2213                           
  2214                           ;LEDarray.c: 14:     TRISAbits.TRISA2 = 0;
  2215  0004' 9481               	bcf	129,2,c	;volatile
  2216                           
  2217                           ;LEDarray.c: 15:     TRISFbits.TRISF6 = 0;
  2218  0006' 9C86               	bcf	134,6,c	;volatile
  2219                           
  2220                           ;LEDarray.c: 16:     TRISAbits.TRISA4 = 0;
  2221  0008' 9881               	bcf	129,4,c	;volatile
  2222                           
  2223                           ;LEDarray.c: 17:     TRISAbits.TRISA5 = 0;
  2224  000A' 9A81               	bcf	129,5,c	;volatile
  2225                           
  2226                           ;LEDarray.c: 18:     TRISFbits.TRISF0 = 0;
  2227  000C' 9086               	bcf	134,0,c	;volatile
  2228                           
  2229                           ;LEDarray.c: 19:     TRISBbits.TRISB0 = 0;
  2230  000E' 9082               	bcf	130,0,c	;volatile
  2231                           
  2232                           ;LEDarray.c: 20:     TRISBbits.TRISB1 = 0;
  2233  0010' 9282               	bcf	130,1,c	;volatile
  2234                           
  2235                           ;LEDarray.c: 23:     LATGbits.LATG0 = 0;
  2236  0012' 907F               	bcf	127,0,c	;volatile
  2237                           
  2238                           ;LEDarray.c: 24:     LATGbits.LATG1 = 0;
  2239  0014' 927F               	bcf	127,1,c	;volatile
  2240                           
  2241                           ;LEDarray.c: 25:     LATAbits.LATA2 = 0;
  2242  0016' 9479               	bcf	121,2,c	;volatile
  2243                           
  2244                           ;LEDarray.c: 26:     LATFbits.LATF6 = 0;
  2245  0018' 9C7E               	bcf	126,6,c	;volatile
  2246                           
  2247                           ;LEDarray.c: 27:     LATAbits.LATA4 = 0;
  2248  001A' 9879               	bcf	121,4,c	;volatile
  2249                           
  2250                           ;LEDarray.c: 28:     LATAbits.LATA5 = 0;
  2251  001C' 9A79               	bcf	121,5,c	;volatile
  2252                           
  2253                           ;LEDarray.c: 29:     LATFbits.LATF0 = 0;
  2254  001E' 907E               	bcf	126,0,c	;volatile
  2255                           
  2256                           ;LEDarray.c: 30:     LATBbits.LATB0 = 0;
  2257  0020' 907A               	bcf	122,0,c	;volatile
  2258                           
  2259                           ;LEDarray.c: 31:     LATBbits.LATB1 = 0;
  2260  0022' 927A               	bcf	122,1,c	;volatile
  2261  0024' 0012               	return		;funcret
  2262  0026'                    __end_of_LEDarray_init:
  2263                           	callstack 0
  2264                           
  2265 ;; *************** function _LEDarray_disp_bin *****************
  2266 ;; Defined at:
  2267 ;;		line 48 in file "LEDarray.c"
  2268 ;; Parameters:    Size  Location     Type
  2269 ;;  number          2    3[COMRAM] volatile int 
  2270 ;; Auto vars:     Size  Location     Type
  2271 ;;		None
  2272 ;; Return value:  Size  Location     Type
  2273 ;;                  1    wreg      void 
  2274 ;; Registers used:
  2275 ;;		wreg, status,2, status,0
  2276 ;; Tracked objects:
  2277 ;;		On entry : 0/0
  2278 ;;		On exit  : 0/0
  2279 ;;		Unchanged: 0/0
  2280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2281 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2282 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2283 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2284 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2285 ;;Total ram usage:        5 bytes
  2286 ;; Hardware stack levels used: 1
  2287 ;; Hardware stack levels required when called: 2
  2288 ;; This function calls:
  2289 ;;		Nothing
  2290 ;; This function is called by:
  2291 ;;		_main
  2292 ;; This function uses a non-reentrant model
  2293 ;;
  2294                           
  2295                           	psect	text11
  2296  0000'                    __ptext11:
  2297                           	callstack 0
  2298  0000'                    _LEDarray_disp_bin:
  2299                           	callstack 28
  2300  0000'                    
  2301                           ;LEDarray.c: 48: void LEDarray_disp_bin(volatile int number);LEDarray.c: 49: {;LEDarray.
      +                          c: 54:     if(number & 1) {LATGbits.LATG0 = 1;} else {LATGbits.LATG0 = 0;}
  2302  0000' A000'              	btfss	LEDarray_disp_bin@number^0,0,c	;volatile
  2303  0002' EF00' F000'        	goto	u2521
  2304  0006' EF00' F000'        	goto	u2520
  2305  000A'                    u2521:
  2306  000A' EF00' F000'        	goto	l81
  2307  000E'                    u2520:
  2308  000E' 807F               	bsf	127,0,c	;volatile
  2309  0010' EF00' F000'        	goto	l2691
  2310  0014'                    l81:
  2311  0014' 907F               	bcf	127,0,c	;volatile
  2312  0016'                    l2691:
  2313                           
  2314                           ;LEDarray.c: 55:     if((number>>1) & 1) {LATGbits.LATG1 = 1;} else {LATGbits.LATG1 = 0;
      +                          }
  2315  0016' 3400'              	rlcf	(LEDarray_disp_bin@number+1)^0,w,c	;volatile
  2316  0018' 3000'              	rrcf	(LEDarray_disp_bin@number+1)^0,w,c	;volatile
  2317  001A' 6E00'              	movwf	(??_LEDarray_disp_bin+1)^0,c
  2318  001C' 3000'              	rrcf	LEDarray_disp_bin@number^0,w,c	;volatile
  2319  001E' 6E00'              	movwf	??_LEDarray_disp_bin^0,c
  2320  0020' A000'              	btfss	??_LEDarray_disp_bin^0,0,c
  2321  0022' EF00' F000'        	goto	u2531
  2322  0026' EF00' F000'        	goto	u2530
  2323  002A'                    u2531:
  2324  002A' EF00' F000'        	goto	l83
  2325  002E'                    u2530:
  2326  002E' 827F               	bsf	127,1,c	;volatile
  2327  0030' EF00' F000'        	goto	l2695
  2328  0034'                    l83:
  2329  0034' 927F               	bcf	127,1,c	;volatile
  2330  0036'                    l2695:
  2331                           
  2332                           ;LEDarray.c: 56:     if((number>>2) & 1) {LATAbits.LATA2 = 1;} else {LATAbits.LATA2 = 0;
      +                          }
  2333  0036' C003' F005'        	movff	LEDarray_disp_bin@number,??_LEDarray_disp_bin	;volatile
  2334  003A' C004' F006'        	movff	LEDarray_disp_bin@number+1,??_LEDarray_disp_bin+1	;volatile
  2335  003E' 3400'              	rlcf	(??_LEDarray_disp_bin+1)^0,w,c
  2336  0040' 3200'              	rrcf	(??_LEDarray_disp_bin+1)^0,f,c
  2337  0042' 3200'              	rrcf	??_LEDarray_disp_bin^0,f,c
  2338  0044' 3400'              	rlcf	(??_LEDarray_disp_bin+1)^0,w,c
  2339  0046' 3200'              	rrcf	(??_LEDarray_disp_bin+1)^0,f,c
  2340  0048' 3200'              	rrcf	??_LEDarray_disp_bin^0,f,c
  2341  004A' A000'              	btfss	??_LEDarray_disp_bin^0,0,c
  2342  004C' EF00' F000'        	goto	u2541
  2343  0050' EF00' F000'        	goto	u2540
  2344  0054'                    u2541:
  2345  0054' EF00' F000'        	goto	l85
  2346  0058'                    u2540:
  2347  0058' 8479               	bsf	121,2,c	;volatile
  2348  005A' EF00' F000'        	goto	l2699
  2349  005E'                    l85:
  2350  005E' 9479               	bcf	121,2,c	;volatile
  2351  0060'                    l2699:
  2352                           
  2353                           ;LEDarray.c: 57:     if((number>>3) & 1) {LATFbits.LATF6 = 1;} else {LATFbits.LATF6 = 0;
      +                          }
  2354  0060' C003' F005'        	movff	LEDarray_disp_bin@number,??_LEDarray_disp_bin	;volatile
  2355  0064' C004' F006'        	movff	LEDarray_disp_bin@number+1,??_LEDarray_disp_bin+1	;volatile
  2356  0068' 3400'              	rlcf	(??_LEDarray_disp_bin+1)^0,w,c
  2357  006A' 3200'              	rrcf	(??_LEDarray_disp_bin+1)^0,f,c
  2358  006C' 3200'              	rrcf	??_LEDarray_disp_bin^0,f,c
  2359  006E' 3400'              	rlcf	(??_LEDarray_disp_bin+1)^0,w,c
  2360  0070' 3200'              	rrcf	(??_LEDarray_disp_bin+1)^0,f,c
  2361  0072' 3200'              	rrcf	??_LEDarray_disp_bin^0,f,c
  2362  0074' 3400'              	rlcf	(??_LEDarray_disp_bin+1)^0,w,c
  2363  0076' 3200'              	rrcf	(??_LEDarray_disp_bin+1)^0,f,c
  2364  0078' 3200'              	rrcf	??_LEDarray_disp_bin^0,f,c
  2365  007A' A000'              	btfss	??_LEDarray_disp_bin^0,0,c
  2366  007C' EF00' F000'        	goto	u2551
  2367  0080' EF00' F000'        	goto	u2550
  2368  0084'                    u2551:
  2369  0084' EF00' F000'        	goto	l87
  2370  0088'                    u2550:
  2371  0088' 8C7E               	bsf	126,6,c	;volatile
  2372  008A' EF00' F000'        	goto	l2703
  2373  008E'                    l87:
  2374  008E' 9C7E               	bcf	126,6,c	;volatile
  2375  0090'                    l2703:
  2376                           
  2377                           ;LEDarray.c: 58:     if((number>>4) & 1) {LATAbits.LATA4 = 1;} else {LATAbits.LATA4 = 0;
      +                          }
  2378  0090' C003' F005'        	movff	LEDarray_disp_bin@number,??_LEDarray_disp_bin	;volatile
  2379  0094' C004' F006'        	movff	LEDarray_disp_bin@number+1,??_LEDarray_disp_bin+1	;volatile
  2380  0098' 0E04               	movlw	4
  2381  009A' 6E00'              	movwf	(??_LEDarray_disp_bin+2)^0,c
  2382  009C'                    u2565:
  2383  009C' 3400'              	rlcf	(??_LEDarray_disp_bin+1)^0,w,c
  2384  009E' 3200'              	rrcf	(??_LEDarray_disp_bin+1)^0,f,c
  2385  00A0' 3200'              	rrcf	??_LEDarray_disp_bin^0,f,c
  2386  00A2' 2E00'              	decfsz	(??_LEDarray_disp_bin+2)^0,f,c
  2387  00A4' EF00' F000'        	goto	u2565
  2388  00A8' A000'              	btfss	??_LEDarray_disp_bin^0,0,c
  2389  00AA' EF00' F000'        	goto	u2571
  2390  00AE' EF00' F000'        	goto	u2570
  2391  00B2'                    u2571:
  2392  00B2' EF00' F000'        	goto	l89
  2393  00B6'                    u2570:
  2394  00B6' 8879               	bsf	121,4,c	;volatile
  2395  00B8' EF00' F000'        	goto	l2707
  2396  00BC'                    l89:
  2397  00BC' 9879               	bcf	121,4,c	;volatile
  2398  00BE'                    l2707:
  2399                           
  2400                           ;LEDarray.c: 59:     if((number>>5) & 1) {LATAbits.LATA5 = 1;} else {LATAbits.LATA5 = 0;
      +                          }
  2401  00BE' C003' F005'        	movff	LEDarray_disp_bin@number,??_LEDarray_disp_bin	;volatile
  2402  00C2' C004' F006'        	movff	LEDarray_disp_bin@number+1,??_LEDarray_disp_bin+1	;volatile
  2403  00C6' 0E05               	movlw	5
  2404  00C8' 6E00'              	movwf	(??_LEDarray_disp_bin+2)^0,c
  2405  00CA'                    u2585:
  2406  00CA' 3400'              	rlcf	(??_LEDarray_disp_bin+1)^0,w,c
  2407  00CC' 3200'              	rrcf	(??_LEDarray_disp_bin+1)^0,f,c
  2408  00CE' 3200'              	rrcf	??_LEDarray_disp_bin^0,f,c
  2409  00D0' 2E00'              	decfsz	(??_LEDarray_disp_bin+2)^0,f,c
  2410  00D2' EF00' F000'        	goto	u2585
  2411  00D6' A000'              	btfss	??_LEDarray_disp_bin^0,0,c
  2412  00D8' EF00' F000'        	goto	u2591
  2413  00DC' EF00' F000'        	goto	u2590
  2414  00E0'                    u2591:
  2415  00E0' EF00' F000'        	goto	l91
  2416  00E4'                    u2590:
  2417  00E4' 8A79               	bsf	121,5,c	;volatile
  2418  00E6' EF00' F000'        	goto	l2711
  2419  00EA'                    l91:
  2420  00EA' 9A79               	bcf	121,5,c	;volatile
  2421  00EC'                    l2711:
  2422                           
  2423                           ;LEDarray.c: 60:     if((number>>6) & 1) {LATFbits.LATF0 = 1;} else {LATFbits.LATF0 = 0;
      +                          }
  2424  00EC' C003' F005'        	movff	LEDarray_disp_bin@number,??_LEDarray_disp_bin	;volatile
  2425  00F0' C004' F006'        	movff	LEDarray_disp_bin@number+1,??_LEDarray_disp_bin+1	;volatile
  2426  00F4' 0E06               	movlw	6
  2427  00F6' 6E00'              	movwf	(??_LEDarray_disp_bin+2)^0,c
  2428  00F8'                    u2605:
  2429  00F8' 3400'              	rlcf	(??_LEDarray_disp_bin+1)^0,w,c
  2430  00FA' 3200'              	rrcf	(??_LEDarray_disp_bin+1)^0,f,c
  2431  00FC' 3200'              	rrcf	??_LEDarray_disp_bin^0,f,c
  2432  00FE' 2E00'              	decfsz	(??_LEDarray_disp_bin+2)^0,f,c
  2433  0100' EF00' F000'        	goto	u2605
  2434  0104' A000'              	btfss	??_LEDarray_disp_bin^0,0,c
  2435  0106' EF00' F000'        	goto	u2611
  2436  010A' EF00' F000'        	goto	u2610
  2437  010E'                    u2611:
  2438  010E' EF00' F000'        	goto	l93
  2439  0112'                    u2610:
  2440  0112' 807E               	bsf	126,0,c	;volatile
  2441  0114' EF00' F000'        	goto	l2715
  2442  0118'                    l93:
  2443  0118' 907E               	bcf	126,0,c	;volatile
  2444  011A'                    l2715:
  2445                           
  2446                           ;LEDarray.c: 61:     if((number>>7) & 1) {LATBbits.LATB0 = 1;} else {LATBbits.LATB0 = 0;
      +                          }
  2447  011A' C003' F005'        	movff	LEDarray_disp_bin@number,??_LEDarray_disp_bin	;volatile
  2448  011E' C004' F006'        	movff	LEDarray_disp_bin@number+1,??_LEDarray_disp_bin+1	;volatile
  2449  0122' 0E07               	movlw	7
  2450  0124' 6E00'              	movwf	(??_LEDarray_disp_bin+2)^0,c
  2451  0126'                    u2625:
  2452  0126' 3400'              	rlcf	(??_LEDarray_disp_bin+1)^0,w,c
  2453  0128' 3200'              	rrcf	(??_LEDarray_disp_bin+1)^0,f,c
  2454  012A' 3200'              	rrcf	??_LEDarray_disp_bin^0,f,c
  2455  012C' 2E00'              	decfsz	(??_LEDarray_disp_bin+2)^0,f,c
  2456  012E' EF00' F000'        	goto	u2625
  2457  0132' A000'              	btfss	??_LEDarray_disp_bin^0,0,c
  2458  0134' EF00' F000'        	goto	u2631
  2459  0138' EF00' F000'        	goto	u2630
  2460  013C'                    u2631:
  2461  013C' EF00' F000'        	goto	l95
  2462  0140'                    u2630:
  2463  0140' 807A               	bsf	122,0,c	;volatile
  2464  0142' EF00' F000'        	goto	l2719
  2465  0146'                    l95:
  2466  0146' 907A               	bcf	122,0,c	;volatile
  2467  0148'                    l2719:
  2468                           
  2469                           ;LEDarray.c: 62:     if((number>>8) & 1) {LATBbits.LATB1 = 1;} else {LATBbits.LATB1 = 0;
      +                          }
  2470  0148' C004' F005'        	movff	LEDarray_disp_bin@number+1,??_LEDarray_disp_bin	;volatile
  2471  014C' 6A00'              	clrf	(??_LEDarray_disp_bin+1)^0,c
  2472  014E' BE00'              	btfsc	??_LEDarray_disp_bin^0,7,c
  2473  0150' 6800'              	setf	(??_LEDarray_disp_bin+1)^0,c
  2474  0152' A000'              	btfss	??_LEDarray_disp_bin^0,0,c
  2475  0154' EF00' F000'        	goto	u2641
  2476  0158' EF00' F000'        	goto	u2640
  2477  015C'                    u2641:
  2478  015C' EF00' F000'        	goto	l97
  2479  0160'                    u2640:
  2480  0160' 827A               	bsf	122,1,c	;volatile
  2481  0162' EF00' F000'        	goto	l99
  2482  0166'                    l97:
  2483  0166' 927A               	bcf	122,1,c	;volatile
  2484  0168'                    l99:
  2485  0168' 0012               	return		;funcret
  2486  016A'                    __end_of_LEDarray_disp_bin:
  2487                           	callstack 0
  2488                           
  2489 ;; *************** function _LCD_Init *****************
  2490 ;; Defined at:
  2491 ;;		line 49 in file "LCD.c"
  2492 ;; Parameters:    Size  Location     Type
  2493 ;;		None
  2494 ;; Auto vars:     Size  Location     Type
  2495 ;;		None
  2496 ;; Return value:  Size  Location     Type
  2497 ;;                  1    wreg      void 
  2498 ;; Registers used:
  2499 ;;		wreg, status,2, status,0, cstack
  2500 ;; Tracked objects:
  2501 ;;		On entry : 0/0
  2502 ;;		On exit  : 0/0
  2503 ;;		Unchanged: 0/0
  2504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2507 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2508 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2509 ;;Total ram usage:        2 bytes
  2510 ;; Hardware stack levels used: 1
  2511 ;; Hardware stack levels required when called: 5
  2512 ;; This function calls:
  2513 ;;		_LCD_sendbyte
  2514 ;;		_LCD_sendnibble
  2515 ;; This function is called by:
  2516 ;;		_main
  2517 ;; This function uses a non-reentrant model
  2518 ;;
  2519                           
  2520                           	psect	text12
  2521  0000'                    __ptext12:
  2522                           	callstack 0
  2523  0000'                    _LCD_Init:
  2524                           	callstack 25
  2525  0000'                    
  2526                           ;LCD.c: 52:     TRISCbits.TRISC6=0;
  2527  0000' 9C83               	bcf	131,6,c	;volatile
  2528                           
  2529                           ;LCD.c: 53:     TRISCbits.TRISC2=0;
  2530  0002' 9483               	bcf	131,2,c	;volatile
  2531                           
  2532                           ;LCD.c: 54:     TRISBbits.TRISB3=0;
  2533  0004' 9682               	bcf	130,3,c	;volatile
  2534                           
  2535                           ;LCD.c: 55:     TRISBbits.TRISB2=0;
  2536  0006' 9482               	bcf	130,2,c	;volatile
  2537                           
  2538                           ;LCD.c: 56:     TRISEbits.TRISE3=0;
  2539  0008' 9685               	bcf	133,3,c	;volatile
  2540                           
  2541                           ;LCD.c: 57:     TRISEbits.TRISE1=0;
  2542  000A' 9285               	bcf	133,1,c	;volatile
  2543                           
  2544                           ;LCD.c: 60:     LATCbits.LATC6 = 0;
  2545  000C' 9C7B               	bcf	123,6,c	;volatile
  2546                           
  2547                           ;LCD.c: 61:     LATCbits.LATC2 = 0;
  2548  000E' 947B               	bcf	123,2,c	;volatile
  2549                           
  2550                           ;LCD.c: 62:     LATBbits.LATB3 = 0;
  2551  0010' 967A               	bcf	122,3,c	;volatile
  2552                           
  2553                           ;LCD.c: 63:     LATBbits.LATB2 = 0;
  2554  0012' 947A               	bcf	122,2,c	;volatile
  2555                           
  2556                           ;LCD.c: 64:     LATEbits.LATE3 = 0;
  2557  0014' 967D               	bcf	125,3,c	;volatile
  2558                           
  2559                           ;LCD.c: 65:     LATEbits.LATE1 = 0;
  2560  0016' 927D               	bcf	125,1,c	;volatile
  2561  0018'                    
  2562                           ;LCD.c: 70:     _delay((unsigned long)((50)*(64000000/4000.0)));
  2563  0018' 0E05               	movlw	5
  2564  001A' 6E00'              	movwf	(??_LCD_Init+1)^0,c
  2565  001C' 0E0F               	movlw	15
  2566  001E' 6E00'              	movwf	??_LCD_Init^0,c
  2567  0020' 0EF1               	movlw	241
  2568  0022'                    u3417:
  2569  0022' 2EE8               	decfsz	wreg,f,c
  2570  0024' D7FE               	bra	u3417
  2571  0026' 2E00'              	decfsz	??_LCD_Init^0,f,c
  2572  0028' D7FC               	bra	u3417
  2573  002A' 2E00'              	decfsz	(??_LCD_Init+1)^0,f,c
  2574  002C' D7FA               	bra	u3417
  2575  002E' F000               	nop	
  2576  0030'                    
  2577                           ;LCD.c: 72:     LCD_sendnibble(0b0011);
  2578  0030' 0E03               	movlw	3
  2579  0032' EC00' F000'        	call	_LCD_sendnibble
  2580  0036'                    
  2581                           ;LCD.c: 73:     _delay((unsigned long)((45)*(64000000/4000000.0)));
  2582  0036' 0EF0               	movlw	240
  2583  0038'                    u3427:
  2584  0038' 2EE8               	decfsz	wreg,f,c
  2585  003A' D7FE               	bra	u3427
  2586  003C'                    
  2587                           ;LCD.c: 75:     LCD_sendbyte(0b00101100,0);
  2588  003C' 0E00               	movlw	0
  2589  003E' 6E00'              	movwf	LCD_sendbyte@type^0,c
  2590  0040' 0E2C               	movlw	44
  2591  0042' EC00' F000'        	call	_LCD_sendbyte
  2592  0046'                    
  2593                           ;LCD.c: 76:     _delay((unsigned long)((45)*(64000000/4000000.0)));
  2594  0046' 0EF0               	movlw	240
  2595  0048'                    u3437:
  2596  0048' 2EE8               	decfsz	wreg,f,c
  2597  004A' D7FE               	bra	u3437
  2598  004C'                    
  2599                           ;LCD.c: 77:     LCD_sendbyte(0b00101000,0);
  2600  004C' 0E00               	movlw	0
  2601  004E' 6E00'              	movwf	LCD_sendbyte@type^0,c
  2602  0050' 0E28               	movlw	40
  2603  0052' EC00' F000'        	call	_LCD_sendbyte
  2604  0056'                    
  2605                           ;LCD.c: 78:     _delay((unsigned long)((45)*(64000000/4000000.0)));
  2606  0056' 0EF0               	movlw	240
  2607  0058'                    u3447:
  2608  0058' 2EE8               	decfsz	wreg,f,c
  2609  005A' D7FE               	bra	u3447
  2610  005C'                    
  2611                           ;LCD.c: 79:     LCD_sendbyte(0b00101000,0);
  2612  005C' 0E00               	movlw	0
  2613  005E' 6E00'              	movwf	LCD_sendbyte@type^0,c
  2614  0060' 0E28               	movlw	40
  2615  0062' EC00' F000'        	call	_LCD_sendbyte
  2616  0066'                    
  2617                           ;LCD.c: 80:     _delay((unsigned long)((45)*(64000000/4000000.0)));
  2618  0066' 0EF0               	movlw	240
  2619  0068'                    u3457:
  2620  0068' 2EE8               	decfsz	wreg,f,c
  2621  006A' D7FE               	bra	u3457
  2622  006C'                    
  2623                           ;LCD.c: 81:     LCD_sendbyte(0b00001000,0);
  2624  006C' 0E00               	movlw	0
  2625  006E' 6E00'              	movwf	LCD_sendbyte@type^0,c
  2626  0070' 0E08               	movlw	8
  2627  0072' EC00' F000'        	call	_LCD_sendbyte
  2628  0076'                    
  2629                           ;LCD.c: 82:     _delay((unsigned long)((45)*(64000000/4000000.0)));
  2630  0076' 0EF0               	movlw	240
  2631  0078'                    u3467:
  2632  0078' 2EE8               	decfsz	wreg,f,c
  2633  007A' D7FE               	bra	u3467
  2634  007C'                    
  2635                           ;LCD.c: 83:     LCD_sendbyte(0b00000001,0);
  2636  007C' 0E00               	movlw	0
  2637  007E' 6E00'              	movwf	LCD_sendbyte@type^0,c
  2638  0080' 0E01               	movlw	1
  2639  0082' EC00' F000'        	call	_LCD_sendbyte
  2640  0086'                    
  2641                           ;LCD.c: 84:     _delay((unsigned long)((5)*(64000000/4000.0)));
  2642  0086' 0E68               	movlw	104
  2643  0088' 6E00'              	movwf	??_LCD_Init^0,c
  2644  008A' 0EE4               	movlw	228
  2645  008C'                    u3477:
  2646  008C' 2EE8               	decfsz	wreg,f,c
  2647  008E' D7FE               	bra	u3477
  2648  0090' 2E00'              	decfsz	??_LCD_Init^0,f,c
  2649  0092' D7FC               	bra	u3477
  2650  0094' D000               	nop2	
  2651  0096'                    
  2652                           ;LCD.c: 85:     LCD_sendbyte(0b00000110,0);
  2653  0096' 0E00               	movlw	0
  2654  0098' 6E00'              	movwf	LCD_sendbyte@type^0,c
  2655  009A' 0E06               	movlw	6
  2656  009C' EC00' F000'        	call	_LCD_sendbyte
  2657  00A0'                    
  2658                           ;LCD.c: 86:     _delay((unsigned long)((45)*(64000000/4000000.0)));
  2659  00A0' 0EF0               	movlw	240
  2660  00A2'                    u3487:
  2661  00A2' 2EE8               	decfsz	wreg,f,c
  2662  00A4' D7FE               	bra	u3487
  2663  00A6'                    
  2664                           ;LCD.c: 88:     LCD_sendbyte(0b00001100,0);
  2665  00A6' 0E00               	movlw	0
  2666  00A8' 6E00'              	movwf	LCD_sendbyte@type^0,c
  2667  00AA' 0E0C               	movlw	12
  2668  00AC' EC00' F000'        	call	_LCD_sendbyte
  2669  00B0'                    
  2670                           ;LCD.c: 89:     _delay((unsigned long)((45)*(64000000/4000000.0)));
  2671  00B0' 0EF0               	movlw	240
  2672  00B2'                    u3497:
  2673  00B2' 2EE8               	decfsz	wreg,f,c
  2674  00B4' D7FE               	bra	u3497
  2675  00B6' 0012               	return		;funcret
  2676  00B8'                    __end_of_LCD_Init:
  2677                           	callstack 0
  2678                           
  2679 ;; *************** function _LCD_Disp *****************
  2680 ;; Defined at:
  2681 ;;		line 122 in file "LCD.c"
  2682 ;; Parameters:    Size  Location     Type
  2683 ;;  buf             2   28[BANK0 ] PTR unsigned char 
  2684 ;;		 -> main@buf(16), 
  2685 ;;  year            2   30[BANK0 ] volatile int 
  2686 ;;  month           2   32[BANK0 ] volatile int 
  2687 ;;  day             2   34[BANK0 ] volatile int 
  2688 ;;  hour            2   36[BANK0 ] volatile int 
  2689 ;;  min             2   38[BANK0 ] volatile int 
  2690 ;;  sec             2   40[BANK0 ] volatile int 
  2691 ;;  weekday         2   42[BANK0 ] volatile int 
  2692 ;; Auto vars:     Size  Location     Type
  2693 ;;		None
  2694 ;; Return value:  Size  Location     Type
  2695 ;;                  1    wreg      void 
  2696 ;; Registers used:
  2697 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2698 ;; Tracked objects:
  2699 ;;		On entry : 0/0
  2700 ;;		On exit  : 0/0
  2701 ;;		Unchanged: 0/0
  2702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2703 ;;      Params:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2705 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2706 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2707 ;;Total ram usage:       18 bytes
  2708 ;; Hardware stack levels used: 1
  2709 ;; Hardware stack levels required when called: 10
  2710 ;; This function calls:
  2711 ;;		_LCD_sendstring
  2712 ;;		_LCD_setline
  2713 ;;		_sprintf
  2714 ;; This function is called by:
  2715 ;;		_main
  2716 ;; This function uses a non-reentrant model
  2717 ;;
  2718                           
  2719                           	psect	text13
  2720  0000'                    __ptext13:
  2721                           	callstack 0
  2722  0000'                    _LCD_Disp:
  2723                           	callstack 20
  2724  0000'                    
  2725                           ;LCD.c: 122: void LCD_Disp(char buf[16], volatile int year, volatile int month, volatile
      +                           int day, volatile int hour, volatile int min, volatile int sec, volatile int weekday);L
      +                          CD.c: 123: {;LCD.c: 124:     LCD_setline(1);
  2726  0000' 0E01               	movlw	1
  2727  0002' EC00' F000'        	call	_LCD_setline
  2728  0006'                    
  2729                           ;LCD.c: 125:     sprintf(buf,"Date %02d/%02d/%04d",day,month,year);
  2730  0006' C01C' F008'        	movff	LCD_Disp@buf,sprintf@s
  2731  000A' C01D' F009'        	movff	LCD_Disp@buf+1,sprintf@s+1
  2732  000E' 0E00'              	movlw	low STR_1
  2733  0010' 0100               	movlb	0	; () banked
  2734  0012' 6F00'              	movwf	sprintf@fmt& (0+255),b
  2735  0014' 0E00'              	movlw	high STR_1
  2736  0016' 6F00'              	movwf	(sprintf@fmt+1)& (0+255),b
  2737  0018' C022' F00C'        	movff	LCD_Disp@day,?_sprintf+4	;volatile
  2738  001C' C023' F00D'        	movff	LCD_Disp@day+1,?_sprintf+5	;volatile
  2739  0020' C020' F00E'        	movff	LCD_Disp@month,?_sprintf+6	;volatile
  2740  0024' C021' F00F'        	movff	LCD_Disp@month+1,?_sprintf+7	;volatile
  2741  0028' C01E' F010'        	movff	LCD_Disp@year,?_sprintf+8	;volatile
  2742  002C' C01F' F011'        	movff	LCD_Disp@year+1,?_sprintf+9	;volatile
  2743  0030' EC00' F000'        	call	_sprintf	;wreg free
  2744  0034'                    
  2745                           ;LCD.c: 126:     LCD_sendstring(buf);
  2746  0034' C01C' F006'        	movff	LCD_Disp@buf,LCD_sendstring@string
  2747  0038' C01D' F007'        	movff	LCD_Disp@buf+1,LCD_sendstring@string+1
  2748  003C' EC00' F000'        	call	_LCD_sendstring	;wreg free
  2749  0040'                    
  2750                           ;LCD.c: 127:     LCD_setline(2);
  2751  0040' 0E02               	movlw	2
  2752  0042' EC00' F000'        	call	_LCD_setline
  2753  0046'                    
  2754                           ;LCD.c: 128:     sprintf(buf,"Time %02d:%02d:%02d  %d",hour,min,sec,weekday);
  2755  0046' C01C' F008'        	movff	LCD_Disp@buf,sprintf@s
  2756  004A' C01D' F009'        	movff	LCD_Disp@buf+1,sprintf@s+1
  2757  004E' 0E00'              	movlw	low STR_2
  2758  0050' 0100               	movlb	0	; () banked
  2759  0052' 6F00'              	movwf	sprintf@fmt& (0+255),b
  2760  0054' 0E00'              	movlw	high STR_2
  2761  0056' 6F00'              	movwf	(sprintf@fmt+1)& (0+255),b
  2762  0058' C024' F00C'        	movff	LCD_Disp@hour,?_sprintf+4	;volatile
  2763  005C' C025' F00D'        	movff	LCD_Disp@hour+1,?_sprintf+5	;volatile
  2764  0060' C026' F00E'        	movff	LCD_Disp@min,?_sprintf+6	;volatile
  2765  0064' C027' F00F'        	movff	LCD_Disp@min+1,?_sprintf+7	;volatile
  2766  0068' C028' F010'        	movff	LCD_Disp@sec,?_sprintf+8	;volatile
  2767  006C' C029' F011'        	movff	LCD_Disp@sec+1,?_sprintf+9	;volatile
  2768  0070' C02A' F012'        	movff	LCD_Disp@weekday,?_sprintf+10	;volatile
  2769  0074' C02B' F013'        	movff	LCD_Disp@weekday+1,?_sprintf+11	;volatile
  2770  0078' EC00' F000'        	call	_sprintf	;wreg free
  2771                           
  2772                           ;LCD.c: 129:     LCD_sendstring(buf);
  2773  007C' C01C' F006'        	movff	LCD_Disp@buf,LCD_sendstring@string
  2774  0080' C01D' F007'        	movff	LCD_Disp@buf+1,LCD_sendstring@string+1
  2775  0084' EC00' F000'        	call	_LCD_sendstring	;wreg free
  2776  0088'                    
  2777                           ;LCD.c: 130:     _delay((unsigned long)((98)*(64000000/4000.0)));
  2778  0088' 0E08               	movlw	8
  2779  008A' 0100               	movlb	0	; () banked
  2780  008C' 6F00'              	movwf	(??_LCD_Disp+1)& (0+255),b
  2781  008E' 0EF5               	movlw	245
  2782  0090' 6F00'              	movwf	??_LCD_Disp& (0+255),b
  2783  0092' 0E55               	movlw	85
  2784  0094'                    u3507:
  2785  0094' 2EE8               	decfsz	wreg,f,c
  2786  0096' D7FE               	bra	u3507
  2787  0098' 2F00'              	decfsz	??_LCD_Disp& (0+255),f,b
  2788  009A' D7FC               	bra	u3507
  2789  009C' 2F00'              	decfsz	(??_LCD_Disp+1)& (0+255),f,b
  2790  009E' D7FA               	bra	u3507
  2791  00A0' D000               	nop2	
  2792  00A2' 0012               	return		;funcret
  2793  00A4'                    __end_of_LCD_Disp:
  2794                           	callstack 0
  2795                           
  2796 ;; *************** function _sprintf *****************
  2797 ;; Defined at:
  2798 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_sprintf.c"
  2799 ;; Parameters:    Size  Location     Type
  2800 ;;  s               2    8[BANK0 ] PTR unsigned char 
  2801 ;;		 -> main@buf(16), 
  2802 ;;  fmt             2   10[BANK0 ] PTR const unsigned char 
  2803 ;;		 -> STR_2(24), STR_1(20), 
  2804 ;; Auto vars:     Size  Location     Type
  2805 ;;  f               6   22[BANK0 ] struct _IO_FILE
  2806 ;;  ap              2   20[BANK0 ] PTR void [1]
  2807 ;;		 -> ?_sprintf(2), 
  2808 ;;  ret             2    0        int 
  2809 ;; Return value:  Size  Location     Type
  2810 ;;                  2    8[BANK0 ] int 
  2811 ;; Registers used:
  2812 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2813 ;; Tracked objects:
  2814 ;;		On entry : 0/0
  2815 ;;		On exit  : 0/0
  2816 ;;		Unchanged: 0/0
  2817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2818 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2819 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2821 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2822 ;;Total ram usage:       20 bytes
  2823 ;; Hardware stack levels used: 1
  2824 ;; Hardware stack levels required when called: 9
  2825 ;; This function calls:
  2826 ;;		_vfprintf
  2827 ;; This function is called by:
  2828 ;;		_LCD_Disp
  2829 ;; This function uses a non-reentrant model
  2830 ;;
  2831                           
  2832                           	psect	text14
  2833  0000'                    __ptext14:
  2834                           	callstack 0
  2835  0000'                    _sprintf:
  2836                           	callstack 20
  2837  0000' 0E00'              	movlw	low (?_sprintf+4)
  2838  0002' 0100               	movlb	0	; () banked
  2839  0004' 6F00'              	movwf	sprintf@ap& (0+255),b
  2840  0006' 0E00'              	movlw	high (?_sprintf+4)
  2841  0008' 6F00'              	movwf	(sprintf@ap+1)& (0+255),b
  2842  000A' C008' F016'        	movff	sprintf@s,sprintf@f
  2843  000E' C009' F017'        	movff	sprintf@s+1,sprintf@f+1
  2844  0012'                    
  2845                           ; BSR set to: 0
  2846  0012' 0E00               	movlw	0
  2847  0014' 6F00'              	movwf	(sprintf@f+3)& (0+255),b
  2848  0016' 0E00               	movlw	0
  2849  0018' 6F00'              	movwf	(sprintf@f+2)& (0+255),b
  2850  001A'                    
  2851                           ; BSR set to: 0
  2852  001A' 0E00               	movlw	0
  2853  001C' 6F00'              	movwf	(sprintf@f+5)& (0+255),b
  2854  001E' 0E00               	movlw	0
  2855  0020' 6F00'              	movwf	(sprintf@f+4)& (0+255),b
  2856  0022'                    
  2857                           ; BSR set to: 0
  2858  0022' 0E00'              	movlw	low sprintf@f
  2859  0024' 6F00'              	movwf	vfprintf@fp& (0+255),b
  2860  0026' 0E00'              	movlw	high sprintf@f
  2861  0028' 6F00'              	movwf	(vfprintf@fp+1)& (0+255),b
  2862  002A' C00A' F002'        	movff	sprintf@fmt,vfprintf@fmt
  2863  002E' C00B' F003'        	movff	sprintf@fmt+1,vfprintf@fmt+1
  2864  0032' 0E00'              	movlw	low sprintf@ap
  2865  0034' 6F00'              	movwf	vfprintf@ap& (0+255),b
  2866  0036' 0E00'              	movlw	high sprintf@ap
  2867  0038' 6F00'              	movwf	(vfprintf@ap+1)& (0+255),b
  2868  003A' EC00' F000'        	call	_vfprintf	;wreg free
  2869  003E' 0100               	movlb	0	; () banked
  2870  0040' 5100'              	movf	(sprintf@f+2)& (0+255),w,b
  2871  0042' 2500'              	addwf	sprintf@s& (0+255),w,b
  2872  0044' 6ED9               	movwf	fsr2l,c
  2873  0046' 5100'              	movf	(sprintf@f+3)& (0+255),w,b
  2874  0048' 2100'              	addwfc	(sprintf@s+1)& (0+255),w,b
  2875  004A' 6EDA               	movwf	fsr2h,c
  2876  004C' 0E00               	movlw	0
  2877  004E' 6EDF               	movwf	indf2,c
  2878  0050'                    
  2879                           ; BSR set to: 0
  2880  0050' 0012               	return		;funcret
  2881  0052'                    __end_of_sprintf:
  2882                           	callstack 0
  2883                           
  2884 ;; *************** function _vfprintf *****************
  2885 ;; Defined at:
  2886 ;;		line 1390 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
  2887 ;; Parameters:    Size  Location     Type
  2888 ;;  fp              2    0[BANK0 ] PTR struct _IO_FILE
  2889 ;;		 -> sprintf@f(6), 
  2890 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  2891 ;;		 -> STR_2(24), STR_1(20), 
  2892 ;;  ap              2    4[BANK0 ] PTR PTR void 
  2893 ;;		 -> sprintf@ap(2), 
  2894 ;; Auto vars:     Size  Location     Type
  2895 ;;  cfmt            2    6[BANK0 ] PTR unsigned char 
  2896 ;;		 -> STR_2(24), STR_1(20), 
  2897 ;; Return value:  Size  Location     Type
  2898 ;;                  2    0[BANK0 ] int 
  2899 ;; Registers used:
  2900 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2901 ;; Tracked objects:
  2902 ;;		On entry : 0/0
  2903 ;;		On exit  : 0/0
  2904 ;;		Unchanged: 0/0
  2905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2906 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2907 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2909 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2910 ;;Total ram usage:        8 bytes
  2911 ;; Hardware stack levels used: 1
  2912 ;; Hardware stack levels required when called: 8
  2913 ;; This function calls:
  2914 ;;		_vfpfcnvrt
  2915 ;; This function is called by:
  2916 ;;		_sprintf
  2917 ;; This function uses a non-reentrant model
  2918 ;;
  2919                           
  2920                           	psect	text15
  2921  0000'                    __ptext15:
  2922                           	callstack 0
  2923  0000'                    _vfprintf:
  2924                           	callstack 20
  2925  0000'                    
  2926                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1390: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.32\pic\source
      +                          s\c99\common\doprnt.c: 1391: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\comm
      +                          on\doprnt.c: 1393:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\
      +                          common\doprnt.c: 1395:     cfmt = (char *)fmt;
  2927  0000' C002' F006'        	movff	vfprintf@fmt,vfprintf@cfmt
  2928  0004' C003' F007'        	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  2929  0008'                    
  2930                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1396:     nout = 
      +                          0;
  2931  0008' 0E00               	movlw	0
  2932  000A' 0100               	movlb	0	; () banked
  2933  000C' 6F00'              	movwf	(_nout+1)& (0+255),b
  2934  000E' 0E00               	movlw	0
  2935  0010' 6F00'              	movwf	_nout& (0+255),b
  2936                           
  2937                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
  2938  0012' EF00' F000'        	goto	l3191
  2939  0016'                    l3189:
  2940                           
  2941                           ; BSR set to: 0
  2942                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1398:         nou
      +                          t += vfpfcnvrt(fp, &cfmt, ap);
  2943  0016' C000' F042'        	movff	vfprintf@fp,vfpfcnvrt@fp
  2944  001A' C001' F043'        	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  2945  001E' 0E00'              	movlw	low vfprintf@cfmt
  2946  0020' 6E00'              	movwf	vfpfcnvrt@fmt^0,c
  2947  0022' 0E00'              	movlw	high vfprintf@cfmt
  2948  0024' 6E00'              	movwf	(vfpfcnvrt@fmt+1)^0,c
  2949  0026' C004' F046'        	movff	vfprintf@ap,vfpfcnvrt@ap
  2950  002A' C005' F047'        	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  2951  002E' EC00' F000'        	call	_vfpfcnvrt	;wreg free
  2952  0032' 5000'              	movf	?_vfpfcnvrt^0,w,c
  2953  0034' 0100               	movlb	0	; () banked
  2954  0036' 2700'              	addwf	_nout& (0+255),f,b
  2955  0038' 5000'              	movf	(?_vfpfcnvrt+1)^0,w,c
  2956  003A' 2300'              	addwfc	(_nout+1)& (0+255),f,b
  2957  003C'                    l3191:
  2958                           
  2959                           ; BSR set to: 0
  2960                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
  2961  003C' C006' FFF6         	movff	vfprintf@cfmt,tblptrl
  2962  0040' C007' FFF7         	movff	vfprintf@cfmt+1,tblptrh
  2963  0044'                    	if	0	;tblptru may be non-zero
  2964  0044'                    	endif
  2965  0044'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2966  0044' 0E00'              	movlw	low (__mediumconst shr (0+16))
  2967  0046' 6EF8               	movwf	tblptru,c
  2968  0048'                    	endif
  2969  0048' 0008               	tblrd		*
  2970  004A' 50F5               	movf	tablat,w,c
  2971  004C' 0900               	iorlw	0
  2972  004E' A4D8               	btfss	status,2,c
  2973  0050' EF00' F000'        	goto	u3381
  2974  0054' EF00' F000'        	goto	u3380
  2975  0058'                    u3381:
  2976  0058' EF00' F000'        	goto	l3189
  2977  005C'                    u3380:
  2978  005C'                    
  2979                           ; BSR set to: 0
  2980                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1400:     return 
      +                          nout;
  2981  005C' C000' F000'        	movff	_nout,?_vfprintf
  2982  0060' C001' F001'        	movff	_nout+1,?_vfprintf+1
  2983  0064'                    
  2984                           ; BSR set to: 0
  2985  0064' 0012               	return		;funcret
  2986  0066'                    __end_of_vfprintf:
  2987                           	callstack 0
  2988                           
  2989 ;; *************** function _vfpfcnvrt *****************
  2990 ;; Defined at:
  2991 ;;		line 692 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
  2992 ;; Parameters:    Size  Location     Type
  2993 ;;  fp              2   66[COMRAM] PTR struct _IO_FILE
  2994 ;;		 -> sprintf@f(6), 
  2995 ;;  fmt             2   68[COMRAM] PTR PTR unsigned char 
  2996 ;;		 -> vfprintf@cfmt(2), 
  2997 ;;  ap              2   70[COMRAM] PTR PTR void 
  2998 ;;		 -> sprintf@ap(2), 
  2999 ;; Auto vars:     Size  Location     Type
  3000 ;;  ll              8   76[COMRAM] long long 
  3001 ;;  llu             8    0        unsigned long long 
  3002 ;;  f               4    0        unsigned long long 
  3003 ;;  vp              3    0        PTR void 
  3004 ;;  ct              3    0        unsigned char [3]
  3005 ;;  cp              3    0        PTR unsigned char 
  3006 ;;  done            2   84[COMRAM] int 
  3007 ;;  i               2    0        int 
  3008 ;;  c               1    0        unsigned char 
  3009 ;; Return value:  Size  Location     Type
  3010 ;;                  2   66[COMRAM] int 
  3011 ;; Registers used:
  3012 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3013 ;; Tracked objects:
  3014 ;;		On entry : 0/0
  3015 ;;		On exit  : 0/0
  3016 ;;		Unchanged: 0/0
  3017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3018 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3019 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3020 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3021 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3022 ;;Total ram usage:       22 bytes
  3023 ;; Hardware stack levels used: 1
  3024 ;; Hardware stack levels required when called: 7
  3025 ;; This function calls:
  3026 ;;		_atoi
  3027 ;;		_dtoa
  3028 ;;		_fputc
  3029 ;;		_isdigit
  3030 ;; This function is called by:
  3031 ;;		_vfprintf
  3032 ;; This function uses a non-reentrant model
  3033 ;;
  3034                           
  3035                           	psect	text16
  3036  0000'                    __ptext16:
  3037                           	callstack 0
  3038  0000'                    _vfpfcnvrt:
  3039                           	callstack 20
  3040  0000'                    
  3041                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 692: static int v
      +                          fpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.32\pic\sou
      +                          rces\c99\common\doprnt.c: 693: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\co
      +                          mmon\doprnt.c: 694:     char c, *cp, ct[3];;C:\Program Files\Microchip\xc8\v2.32\pic\sou
      +                          rces\c99\common\doprnt.c: 695:     int done, i;;C:\Program Files\Microchip\xc8\v2.32\pic
      +                          \sources\c99\common\doprnt.c: 696:     long long ll;;C:\Program Files\Microchip\xc8\v2.3
      +                          2\pic\sources\c99\common\doprnt.c: 697:     unsigned long long llu;
  3042  0000' C044' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3043  0004' C045' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3044  0008' CFDE FFF6          	movff	postinc2,tblptrl
  3045  000C' CFDD FFF7          	movff	postdec2,tblptrh
  3046  0010'                    	if	0	;tblptru may be non-zero
  3047  0010'                    	endif
  3048  0010'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3049  0010' 0E00'              	movlw	low (__mediumconst shr (0+16))
  3050  0012' 6EF8               	movwf	tblptru,c
  3051  0014'                    	endif
  3052  0014' 0008               	tblrd		*
  3053  0016' 50F5               	movf	tablat,w,c
  3054  0018' 0A25               	xorlw	37
  3055  001A' A4D8               	btfss	status,2,c
  3056  001C' EF00' F000'        	goto	u3271
  3057  0020' EF00' F000'        	goto	u3270
  3058  0024'                    u3271:
  3059  0024' EF00' F000'        	goto	l3173
  3060  0028'                    u3270:
  3061  0028'                    
  3062                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 703:         ++*f
      +                          mt;
  3063  0028' C044' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3064  002C' C045' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3065  0030' 2ADE               	incf	postinc2,f,c
  3066  0032' 0E00               	movlw	0
  3067  0034' 22DD               	addwfc	postdec2,f,c
  3068  0036'                    
  3069                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 705:         flag
      +                          s = width = 0;
  3070  0036' 0E00               	movlw	0
  3071  0038' 0100               	movlb	0	; () banked
  3072  003A' 6F00'              	movwf	(_width+1)& (0+255),b
  3073  003C' 0E00               	movlw	0
  3074  003E' 6F00'              	movwf	_width& (0+255),b
  3075  0040' C002' F000'        	movff	_width,_flags
  3076  0044' C003' F001'        	movff	_width+1,_flags+1
  3077  0048'                    
  3078                           ; BSR set to: 0
  3079                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 706:         prec
      +                           = -1;
  3080  0048' 6900'              	setf	_prec& (0+255),b
  3081  004A' 6900'              	setf	(_prec+1)& (0+255),b
  3082  004C'                    
  3083                           ; BSR set to: 0
  3084                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 710:         done
      +                           = 0;
  3085  004C' 0E00               	movlw	0
  3086  004E' 6E00'              	movwf	(vfpfcnvrt@done+1)^0,c
  3087  0050' 0E00               	movlw	0
  3088  0052' 6E00'              	movwf	vfpfcnvrt@done^0,c
  3089                           
  3090                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 711:         whil
      +                          e (!done) {
  3091  0054' EF00' F000'        	goto	l3125
  3092  0058'                    l3099:
  3093                           
  3094                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 714:             
      +                                  flags |= (1 << 0);
  3095  0058' 8000'              	bsf	_flags^0,0,c
  3096  005A'                    l3101:
  3097                           
  3098                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 715:             
      +                                  ++*fmt;
  3099  005A' C044' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3100  005E' C045' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3101  0062' 2ADE               	incf	postinc2,f,c
  3102  0064' 0E00               	movlw	0
  3103  0066' 22DD               	addwfc	postdec2,f,c
  3104                           
  3105                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 716:             
      +                                  break;
  3106  0068' EF00' F000'        	goto	l3125
  3107  006C'                    l3103:
  3108                           
  3109                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 718:             
      +                                  flags |= (1 << 1);
  3110  006C' 8200'              	bsf	_flags^0,1,c
  3111  006E' EF00' F000'        	goto	l3101
  3112  0072'                    l3107:
  3113                           
  3114                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 722:             
      +                                  flags |= (1 << 2);
  3115  0072' 8400'              	bsf	_flags^0,2,c
  3116  0074' EF00' F000'        	goto	l3101
  3117  0078'                    l3111:
  3118                           
  3119                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 726:             
      +                                  flags |= (1 << 3);
  3120  0078' 8600'              	bsf	_flags^0,3,c
  3121  007A' EF00' F000'        	goto	l3101
  3122  007E'                    l3115:
  3123                           
  3124                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 730:             
      +                                  flags |= (1 << 4);
  3125  007E' 8800'              	bsf	_flags^0,4,c
  3126  0080' EF00' F000'        	goto	l3101
  3127  0084'                    l3119:
  3128                           
  3129                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 734:             
      +                                  done = 1;
  3130  0084' 0E00               	movlw	0
  3131  0086' 6E00'              	movwf	(vfpfcnvrt@done+1)^0,c
  3132  0088' 0E01               	movlw	1
  3133  008A' 6E00'              	movwf	vfpfcnvrt@done^0,c
  3134                           
  3135                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 735:             
      +                                  break;
  3136  008C' EF00' F000'        	goto	l3125
  3137  0090'                    l3123:
  3138  0090' C044' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3139  0094' C045' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3140  0098' CFDE FFF6          	movff	postinc2,tblptrl
  3141  009C' CFDD FFF7          	movff	postdec2,tblptrh
  3142  00A0'                    	if	0	;tblptru may be non-zero
  3143  00A0'                    	endif
  3144  00A0'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3145  00A0' 0E00'              	movlw	low (__mediumconst shr (0+16))
  3146  00A2' 6EF8               	movwf	tblptru,c
  3147  00A4'                    	endif
  3148  00A4' 0008               	tblrd		*
  3149  00A6' 50F5               	movf	tablat,w,c
  3150  00A8' 6E00'              	movwf	??_vfpfcnvrt^0,c
  3151  00AA' 6A00'              	clrf	(??_vfpfcnvrt+1)^0,c
  3152                           
  3153                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3154                           ; Switch size 1, requested type "simple"
  3155                           ; Number of cases is 1, Range of values is 0 to 0
  3156                           ; switch strategies available:
  3157                           ; Name         Instructions Cycles
  3158                           ; simple_byte            4     3 (average)
  3159                           ;	Chosen strategy is simple_byte
  3160  00AC' 5000'              	movf	(??_vfpfcnvrt+1)^0,w,c
  3161  00AE' 0A00               	xorlw	0	; case 0
  3162  00B0' B4D8               	btfsc	status,2,c
  3163  00B2' EF00' F000'        	goto	l3295
  3164  00B6' EF00' F000'        	goto	l3119
  3165  00BA'                    l3295:
  3166                           
  3167                           ; Switch size 1, requested type "simple"
  3168                           ; Number of cases is 5, Range of values is 32 to 48
  3169                           ; switch strategies available:
  3170                           ; Name         Instructions Cycles
  3171                           ; simple_byte           16     9 (average)
  3172                           ;	Chosen strategy is simple_byte
  3173  00BA' 5000'              	movf	??_vfpfcnvrt^0,w,c
  3174  00BC' 0A20               	xorlw	32	; case 32
  3175  00BE' B4D8               	btfsc	status,2,c
  3176  00C0' EF00' F000'        	goto	l3111
  3177  00C4' 0A03               	xorlw	3	; case 35
  3178  00C6' B4D8               	btfsc	status,2,c
  3179  00C8' EF00' F000'        	goto	l3115
  3180  00CC' 0A08               	xorlw	8	; case 43
  3181  00CE' B4D8               	btfsc	status,2,c
  3182  00D0' EF00' F000'        	goto	l3107
  3183  00D4' 0A06               	xorlw	6	; case 45
  3184  00D6' B4D8               	btfsc	status,2,c
  3185  00D8' EF00' F000'        	goto	l3099
  3186  00DC' 0A1D               	xorlw	29	; case 48
  3187  00DE' B4D8               	btfsc	status,2,c
  3188  00E0' EF00' F000'        	goto	l3103
  3189  00E4' EF00' F000'        	goto	l3119
  3190  00E8'                    l3125:
  3191                           
  3192                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 711:         whil
      +                          e (!done) {
  3193  00E8' 5000'              	movf	vfpfcnvrt@done^0,w,c
  3194  00EA' 1000'              	iorwf	(vfpfcnvrt@done+1)^0,w,c
  3195  00EC' B4D8               	btfsc	status,2,c
  3196  00EE' EF00' F000'        	goto	u3281
  3197  00F2' EF00' F000'        	goto	u3280
  3198  00F6'                    u3281:
  3199  00F6' EF00' F000'        	goto	l3123
  3200  00FA'                    u3280:
  3201  00FA'                    
  3202                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 738:         if (
      +                          flags & (1 << 0)) {
  3203  00FA' A000'              	btfss	_flags^0,0,c
  3204  00FC' EF00' F000'        	goto	u3291
  3205  0100' EF00' F000'        	goto	u3290
  3206  0104'                    u3291:
  3207  0104' EF00' F000'        	goto	l3129
  3208  0108'                    u3290:
  3209  0108'                    
  3210                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 739:             
      +                          flags &= ~(1 << 1);
  3211  0108' 9200'              	bcf	_flags^0,1,c
  3212  010A'                    l3129:
  3213                           
  3214                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 745:         if (
      +                          (*fmt)[0] == '*') {
  3215  010A' C044' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3216  010E' C045' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3217  0112' CFDE FFF6          	movff	postinc2,tblptrl
  3218  0116' CFDD FFF7          	movff	postdec2,tblptrh
  3219  011A'                    	if	0	;tblptru may be non-zero
  3220  011A'                    	endif
  3221  011A'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3222  011A' 0E00'              	movlw	low (__mediumconst shr (0+16))
  3223  011C' 6EF8               	movwf	tblptru,c
  3224  011E'                    	endif
  3225  011E' 0008               	tblrd		*
  3226  0120' 50F5               	movf	tablat,w,c
  3227  0122' 0A2A               	xorlw	42
  3228  0124' A4D8               	btfss	status,2,c
  3229  0126' EF00' F000'        	goto	u3301
  3230  012A' EF00' F000'        	goto	u3300
  3231  012E'                    u3301:
  3232  012E' EF00' F000'        	goto	l3137
  3233  0132'                    u3300:
  3234  0132'                    
  3235                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 746:             
      +                          ++*fmt;
  3236  0132' C044' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3237  0136' C045' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3238  013A' 2ADE               	incf	postinc2,f,c
  3239  013C' 0E00               	movlw	0
  3240  013E' 22DD               	addwfc	postdec2,f,c
  3241                           
  3242                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 747:             
      +                          width = (*(int *)__va_arg(*(int **)ap, (int)0));
  3243  0140' C046' FFD9         	movff	vfpfcnvrt@ap,fsr2l
  3244  0144' C047' FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  3245  0148' CFDF F048'         	movff	indf2,??_vfpfcnvrt
  3246  014C' 0E02               	movlw	2
  3247  014E' 26DE               	addwf	postinc2,f,c
  3248  0150' CFDF F049'         	movff	indf2,??_vfpfcnvrt+1
  3249  0154' 0E00               	movlw	0
  3250  0156' 22DD               	addwfc	postdec2,f,c
  3251  0158' C048' FFD9         	movff	??_vfpfcnvrt,fsr2l
  3252  015C' C049' FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  3253  0160' CFDE F002'         	movff	postinc2,_width
  3254  0164' CFDD F003'         	movff	postdec2,_width+1
  3255  0168'                    
  3256                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 748:             
      +                          if (width < 0) {
  3257  0168' 0100               	movlb	0	; () banked
  3258  016A' BF00'              	btfsc	(_width+1)& (0+255),7,b
  3259  016C' EF00' F000'        	goto	u3310
  3260  0170' EF00' F000'        	goto	u3311
  3261  0174'                    u3311:
  3262  0174' EF00' F000'        	goto	l3147
  3263  0178'                    u3310:
  3264  0178'                    
  3265                           ; BSR set to: 0
  3266                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 749:             
      +                              flags |= (1 << 0);
  3267  0178' 8000'              	bsf	_flags^0,0,c
  3268                           
  3269                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 750:             
      +                              width = -width;
  3270  017A' 6D00'              	negf	_width& (0+255),b
  3271  017C' 1F00'              	comf	(_width+1)& (0+255),f,b
  3272  017E' B0D8               	btfsc	status,0,c
  3273  0180' 2B00'              	incf	(_width+1)& (0+255),f,b
  3274  0182' EF00' F000'        	goto	l3147
  3275  0186'                    l3137:
  3276                           
  3277                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 753:             
      +                          width = atoi(*fmt);
  3278  0186' C044' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3279  018A' C045' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3280  018E' CFDE F00A'         	movff	postinc2,atoi@s
  3281  0192' CFDD F00B'         	movff	postdec2,atoi@s+1
  3282  0196' EC00' F000'        	call	_atoi	;wreg free
  3283  019A' C00A' F002'        	movff	?_atoi,_width
  3284  019E' C00B' F003'        	movff	?_atoi+1,_width+1
  3285                           
  3286                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 754:             
      +                          while ((0 ? isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
  3287  01A2' EF00' F000'        	goto	l3141
  3288  01A6'                    l3139:
  3289                           
  3290                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 755:             
      +                              ++*fmt;
  3291  01A6' C044' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3292  01AA' C045' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3293  01AE' 2ADE               	incf	postinc2,f,c
  3294  01B0' 0E00               	movlw	0
  3295  01B2' 22DD               	addwfc	postdec2,f,c
  3296  01B4'                    l3141:
  3297  01B4' 0ED0               	movlw	208
  3298  01B6' 6E00'              	movwf	??_vfpfcnvrt^0,c
  3299  01B8' 0EFF               	movlw	255
  3300  01BA' 6E00'              	movwf	(??_vfpfcnvrt+1)^0,c
  3301  01BC' C044' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3302  01C0' C045' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3303  01C4' CFDE FFF6          	movff	postinc2,tblptrl
  3304  01C8' CFDD FFF7          	movff	postdec2,tblptrh
  3305  01CC'                    	if	0	;tblptru may be non-zero
  3306  01CC'                    	endif
  3307  01CC'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3308  01CC' 0E00'              	movlw	low (__mediumconst shr (0+16))
  3309  01CE' 6EF8               	movwf	tblptru,c
  3310  01D0'                    	endif
  3311  01D0' 0008               	tblrd		*
  3312  01D2' 50F5               	movf	tablat,w,c
  3313  01D4' 6E00'              	movwf	(??_vfpfcnvrt+2)^0,c
  3314  01D6' 6A00'              	clrf	(??_vfpfcnvrt+3)^0,c
  3315  01D8' 5000'              	movf	??_vfpfcnvrt^0,w,c
  3316  01DA' 2600'              	addwf	(??_vfpfcnvrt+2)^0,f,c
  3317  01DC' 5000'              	movf	(??_vfpfcnvrt+1)^0,w,c
  3318  01DE' 2200'              	addwfc	(??_vfpfcnvrt+3)^0,f,c
  3319  01E0' 5000'              	movf	(??_vfpfcnvrt+3)^0,w,c
  3320  01E2' E10A               	bnz	u3320
  3321  01E4' 0E0A               	movlw	10
  3322  01E6' 5C00'              	subwf	(??_vfpfcnvrt+2)^0,w,c
  3323  01E8' A0D8               	btfss	status,0,c
  3324  01EA' EF00' F000'        	goto	u3321
  3325  01EE' EF00' F000'        	goto	u3320
  3326  01F2'                    u3321:
  3327  01F2' 0E01               	movlw	1
  3328  01F4' EF00' F000'        	goto	u3330
  3329  01F8'                    u3320:
  3330  01F8' 0E00               	movlw	0
  3331  01FA'                    u3330:
  3332  01FA' 6E00'              	movwf	_vfpfcnvrt$1927^0,c
  3333  01FC' 6A00'              	clrf	(_vfpfcnvrt$1927+1)^0,c
  3334  01FE' 5000'              	movf	_vfpfcnvrt$1927^0,w,c
  3335  0200' 1000'              	iorwf	(_vfpfcnvrt$1927+1)^0,w,c
  3336  0202' A4D8               	btfss	status,2,c
  3337  0204' EF00' F000'        	goto	u3341
  3338  0208' EF00' F000'        	goto	u3340
  3339  020C'                    u3341:
  3340  020C' EF00' F000'        	goto	l3139
  3341  0210'                    u3340:
  3342  0210'                    l3147:
  3343                           
  3344                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 847:         if (
      +                          (*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  3345  0210' C044' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3346  0214' C045' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3347  0218' CFDE FFF6          	movff	postinc2,tblptrl
  3348  021C' CFDD FFF7          	movff	postdec2,tblptrh
  3349  0220'                    	if	0	;tblptru may be non-zero
  3350  0220'                    	endif
  3351  0220'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3352  0220' 0E00'              	movlw	low (__mediumconst shr (0+16))
  3353  0222' 6EF8               	movwf	tblptru,c
  3354  0224'                    	endif
  3355  0224' 0008               	tblrd		*
  3356  0226' 50F5               	movf	tablat,w,c
  3357  0228' 0A64               	xorlw	100
  3358  022A' B4D8               	btfsc	status,2,c
  3359  022C' EF00' F000'        	goto	u3351
  3360  0230' EF00' F000'        	goto	u3350
  3361  0234'                    u3351:
  3362  0234' EF00' F000'        	goto	l3151
  3363  0238'                    u3350:
  3364  0238' C044' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3365  023C' C045' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3366  0240' CFDE FFF6          	movff	postinc2,tblptrl
  3367  0244' CFDD FFF7          	movff	postdec2,tblptrh
  3368  0248'                    	if	0	;tblptru may be non-zero
  3369  0248'                    	endif
  3370  0248'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3371  0248' 0E00'              	movlw	low (__mediumconst shr (0+16))
  3372  024A' 6EF8               	movwf	tblptru,c
  3373  024C'                    	endif
  3374  024C' 0008               	tblrd		*
  3375  024E' 50F5               	movf	tablat,w,c
  3376  0250' 0A69               	xorlw	105
  3377  0252' A4D8               	btfss	status,2,c
  3378  0254' EF00' F000'        	goto	u3361
  3379  0258' EF00' F000'        	goto	u3360
  3380  025C'                    u3361:
  3381  025C' EF00' F000'        	goto	l3157
  3382  0260'                    u3360:
  3383  0260'                    l3151:
  3384                           
  3385                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 849:             
      +                          ++*fmt;
  3386  0260' C044' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3387  0264' C045' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3388  0268' 2ADE               	incf	postinc2,f,c
  3389  026A' 0E00               	movlw	0
  3390  026C' 22DD               	addwfc	postdec2,f,c
  3391                           
  3392                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 850:             
      +                          ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  3393  026E' C046' FFD9         	movff	vfpfcnvrt@ap,fsr2l
  3394  0272' C047' FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  3395  0276' CFDF F048'         	movff	indf2,??_vfpfcnvrt
  3396  027A' 0E02               	movlw	2
  3397  027C' 26DE               	addwf	postinc2,f,c
  3398  027E' CFDF F049'         	movff	indf2,??_vfpfcnvrt+1
  3399  0282' 0E00               	movlw	0
  3400  0284' 22DD               	addwfc	postdec2,f,c
  3401  0286' C048' FFD9         	movff	??_vfpfcnvrt,fsr2l
  3402  028A' C049' FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  3403  028E' CFDE F04C'         	movff	postinc2,vfpfcnvrt@ll
  3404  0292' CFDD F04D'         	movff	postdec2,vfpfcnvrt@ll+1
  3405  0296' 0E00               	movlw	0
  3406  0298' BE00'              	btfsc	(vfpfcnvrt@ll+1)^0,7,c
  3407  029A' 0EFF               	movlw	-1
  3408  029C' 6E00'              	movwf	(vfpfcnvrt@ll+2)^0,c
  3409  029E' 6E00'              	movwf	(vfpfcnvrt@ll+3)^0,c
  3410  02A0' 6E00'              	movwf	(vfpfcnvrt@ll+4)^0,c
  3411  02A2' 6E00'              	movwf	(vfpfcnvrt@ll+5)^0,c
  3412  02A4' 6E00'              	movwf	(vfpfcnvrt@ll+6)^0,c
  3413  02A6' 6E00'              	movwf	(vfpfcnvrt@ll+7)^0,c
  3414  02A8'                    
  3415                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 852:             
      +                          return dtoa(fp, ll);
  3416  02A8' C042' F01E'        	movff	vfpfcnvrt@fp,dtoa@fp
  3417  02AC' C043' F01F'        	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  3418  02B0' C04C' F020'        	movff	vfpfcnvrt@ll,dtoa@d
  3419  02B4' C04D' F021'        	movff	vfpfcnvrt@ll+1,dtoa@d+1
  3420  02B8' C04E' F022'        	movff	vfpfcnvrt@ll+2,dtoa@d+2
  3421  02BC' C04F' F023'        	movff	vfpfcnvrt@ll+3,dtoa@d+3
  3422  02C0' C050' F024'        	movff	vfpfcnvrt@ll+4,dtoa@d+4
  3423  02C4' C051' F025'        	movff	vfpfcnvrt@ll+5,dtoa@d+5
  3424  02C8' C052' F026'        	movff	vfpfcnvrt@ll+6,dtoa@d+6
  3425  02CC' C053' F027'        	movff	vfpfcnvrt@ll+7,dtoa@d+7
  3426  02D0' EC00' F000'        	call	_dtoa	;wreg free
  3427  02D4' C01E' F042'        	movff	?_dtoa,?_vfpfcnvrt
  3428  02D8' C01F' F043'        	movff	?_dtoa+1,?_vfpfcnvrt+1
  3429  02DC' EF00' F000'        	goto	l1055
  3430  02E0'                    l3157:
  3431                           
  3432                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1372:         if 
      +                          ((*fmt)[0] == '%') {
  3433  02E0' C044' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3434  02E4' C045' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3435  02E8' CFDE FFF6          	movff	postinc2,tblptrl
  3436  02EC' CFDD FFF7          	movff	postdec2,tblptrh
  3437  02F0'                    	if	0	;tblptru may be non-zero
  3438  02F0'                    	endif
  3439  02F0'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3440  02F0' 0E00'              	movlw	low (__mediumconst shr (0+16))
  3441  02F2' 6EF8               	movwf	tblptru,c
  3442  02F4'                    	endif
  3443  02F4' 0008               	tblrd		*
  3444  02F6' 50F5               	movf	tablat,w,c
  3445  02F8' 0A25               	xorlw	37
  3446  02FA' A4D8               	btfss	status,2,c
  3447  02FC' EF00' F000'        	goto	u3371
  3448  0300' EF00' F000'        	goto	u3370
  3449  0304'                    u3371:
  3450  0304' EF00' F000'        	goto	l3167
  3451  0308'                    u3370:
  3452  0308'                    
  3453                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1373:            
      +                           ++*fmt;
  3454  0308' C044' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3455  030C' C045' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3456  0310' 2ADE               	incf	postinc2,f,c
  3457  0312' 0E00               	movlw	0
  3458  0314' 22DD               	addwfc	postdec2,f,c
  3459  0316'                    
  3460                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1374:            
      +                           fputc((int)'%', fp);
  3461  0316' 0E00               	movlw	0
  3462  0318' 6E00'              	movwf	(fputc@c+1)^0,c
  3463  031A' 0E25               	movlw	37
  3464  031C' 6E00'              	movwf	fputc@c^0,c
  3465  031E' C042' F005'        	movff	vfpfcnvrt@fp,fputc@fp
  3466  0322' C043' F006'        	movff	vfpfcnvrt@fp+1,fputc@fp+1
  3467  0326' EC00' F000'        	call	_fputc	;wreg free
  3468  032A'                    l3163:
  3469                           
  3470                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1375:            
      +                           return 1;
  3471  032A' 0E00               	movlw	0
  3472  032C' 6E00'              	movwf	(?_vfpfcnvrt+1)^0,c
  3473  032E' 0E01               	movlw	1
  3474  0330' 6E00'              	movwf	?_vfpfcnvrt^0,c
  3475  0332' EF00' F000'        	goto	l1055
  3476  0336'                    l3167:
  3477                           
  3478                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1379:         ++*
      +                          fmt;
  3479  0336' C044' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3480  033A' C045' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3481  033E' 2ADE               	incf	postinc2,f,c
  3482  0340' 0E00               	movlw	0
  3483  0342' 22DD               	addwfc	postdec2,f,c
  3484  0344'                    
  3485                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1380:         ret
      +                          urn 0;
  3486  0344' 0E00               	movlw	0
  3487  0346' 6E00'              	movwf	(?_vfpfcnvrt+1)^0,c
  3488  0348' 0E00               	movlw	0
  3489  034A' 6E00'              	movwf	?_vfpfcnvrt^0,c
  3490  034C' EF00' F000'        	goto	l1055
  3491  0350'                    l3173:
  3492                           
  3493                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1384:     fputc((
      +                          int)(*fmt)[0], fp);
  3494  0350' C044' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3495  0354' C045' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3496  0358' CFDE FFF6          	movff	postinc2,tblptrl
  3497  035C' CFDD FFF7          	movff	postdec2,tblptrh
  3498  0360'                    	if	0	;tblptru may be non-zero
  3499  0360'                    	endif
  3500  0360'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3501  0360' 0E00'              	movlw	low (__mediumconst shr (0+16))
  3502  0362' 6EF8               	movwf	tblptru,c
  3503  0364'                    	endif
  3504  0364' 0008               	tblrd		*
  3505  0366' 50F5               	movf	tablat,w,c
  3506  0368' 6E00'              	movwf	fputc@c^0,c
  3507  036A' 6A00'              	clrf	(fputc@c+1)^0,c
  3508  036C' C042' F005'        	movff	vfpfcnvrt@fp,fputc@fp
  3509  0370' C043' F006'        	movff	vfpfcnvrt@fp+1,fputc@fp+1
  3510  0374' EC00' F000'        	call	_fputc	;wreg free
  3511  0378'                    
  3512                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1385:     ++*fmt;
  3513  0378' C044' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3514  037C' C045' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3515  0380' 2ADE               	incf	postinc2,f,c
  3516  0382' 0E00               	movlw	0
  3517  0384' 22DD               	addwfc	postdec2,f,c
  3518  0386' EF00' F000'        	goto	l3163
  3519  038A'                    l1055:
  3520  038A' 0012               	return		;funcret
  3521  038C'                    __end_of_vfpfcnvrt:
  3522                           	callstack 0
  3523                           
  3524 ;; *************** function _dtoa *****************
  3525 ;; Defined at:
  3526 ;;		line 287 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
  3527 ;; Parameters:    Size  Location     Type
  3528 ;;  fp              2   30[COMRAM] PTR struct _IO_FILE
  3529 ;;		 -> sprintf@f(6), 
  3530 ;;  d               8   32[COMRAM] long long 
  3531 ;; Auto vars:     Size  Location     Type
  3532 ;;  n               8   56[COMRAM] long long 
  3533 ;;  i               2   64[COMRAM] int 
  3534 ;;  s               2   54[COMRAM] int 
  3535 ;;  w               2   52[COMRAM] int 
  3536 ;;  p               2   50[COMRAM] int 
  3537 ;; Return value:  Size  Location     Type
  3538 ;;                  2   30[COMRAM] int 
  3539 ;; Registers used:
  3540 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3541 ;; Tracked objects:
  3542 ;;		On entry : 0/0
  3543 ;;		On exit  : 0/0
  3544 ;;		Unchanged: 0/0
  3545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3546 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3547 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3548 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3549 ;;      Totals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3550 ;;Total ram usage:       36 bytes
  3551 ;; Hardware stack levels used: 1
  3552 ;; Hardware stack levels required when called: 6
  3553 ;; This function calls:
  3554 ;;		___aodiv
  3555 ;;		___aomod
  3556 ;;		_abs
  3557 ;;		_pad
  3558 ;; This function is called by:
  3559 ;;		_vfpfcnvrt
  3560 ;; This function uses a non-reentrant model
  3561 ;;
  3562                           
  3563                           	psect	text17
  3564  0000'                    __ptext17:
  3565                           	callstack 0
  3566  0000'                    _dtoa:
  3567                           	callstack 20
  3568  0000'                    
  3569                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 287: static int d
      +                          toa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\d
      +                          oprnt.c: 288: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 28
      +                          9:     int i, p, s, w;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprn
      +                          t.c: 290:     long long n;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\d
      +                          oprnt.c: 293:     n = d;
  3570  0000' C020' F038'        	movff	dtoa@d,dtoa@n
  3571  0004' C021' F039'        	movff	dtoa@d+1,dtoa@n+1
  3572  0008' C022' F03A'        	movff	dtoa@d+2,dtoa@n+2
  3573  000C' C023' F03B'        	movff	dtoa@d+3,dtoa@n+3
  3574  0010' C024' F03C'        	movff	dtoa@d+4,dtoa@n+4
  3575  0014' C025' F03D'        	movff	dtoa@d+5,dtoa@n+5
  3576  0018' C026' F03E'        	movff	dtoa@d+6,dtoa@n+6
  3577  001C' C027' F03F'        	movff	dtoa@d+7,dtoa@n+7
  3578  0020'                    
  3579                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 294:     s = n < 
      +                          0 ? 1 : 0;
  3580  0020' BE00'              	btfsc	(dtoa@n+7)^0,7,c
  3581  0022' EF00' F000'        	goto	u3051
  3582  0026' EF00' F000'        	goto	u3050
  3583  002A'                    u3051:
  3584  002A' 0E01               	movlw	1
  3585  002C' EF00' F000'        	goto	u3060
  3586  0030'                    u3050:
  3587  0030' 0E00               	movlw	0
  3588  0032'                    u3060:
  3589  0032' 6E00'              	movwf	dtoa@s^0,c
  3590  0034' 6A00'              	clrf	(dtoa@s+1)^0,c
  3591                           
  3592                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 295:     if (s) {
  3593  0036' 5000'              	movf	dtoa@s^0,w,c
  3594  0038' 1000'              	iorwf	(dtoa@s+1)^0,w,c
  3595  003A' B4D8               	btfsc	status,2,c
  3596  003C' EF00' F000'        	goto	u3071
  3597  0040' EF00' F000'        	goto	u3070
  3598  0044'                    u3071:
  3599  0044' EF00' F000'        	goto	l2991
  3600  0048'                    u3070:
  3601  0048'                    
  3602                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 296:         n = 
      +                          -n;
  3603  0048' 1E00'              	comf	(dtoa@n+7)^0,f,c
  3604  004A' 1E00'              	comf	(dtoa@n+6)^0,f,c
  3605  004C' 1E00'              	comf	(dtoa@n+5)^0,f,c
  3606  004E' 1E00'              	comf	(dtoa@n+4)^0,f,c
  3607  0050' 1E00'              	comf	(dtoa@n+3)^0,f,c
  3608  0052' 1E00'              	comf	(dtoa@n+2)^0,f,c
  3609  0054' 1E00'              	comf	(dtoa@n+1)^0,f,c
  3610  0056' 6C00'              	negf	dtoa@n^0,c
  3611  0058' 0E00               	movlw	0
  3612  005A' 2200'              	addwfc	(dtoa@n+1)^0,f,c
  3613  005C' 2200'              	addwfc	(dtoa@n+2)^0,f,c
  3614  005E' 2200'              	addwfc	(dtoa@n+3)^0,f,c
  3615  0060' 2200'              	addwfc	(dtoa@n+4)^0,f,c
  3616  0062' 2200'              	addwfc	(dtoa@n+5)^0,f,c
  3617  0064' 2200'              	addwfc	(dtoa@n+6)^0,f,c
  3618  0066' 2200'              	addwfc	(dtoa@n+7)^0,f,c
  3619  0068'                    l2991:
  3620                           
  3621                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 300:     if (!(pr
      +                          ec < 0)) {
  3622  0068' 0100               	movlb	0	; () banked
  3623  006A' BF00'              	btfsc	(_prec+1)& (0+255),7,b
  3624  006C' EF00' F000'        	goto	u3081
  3625  0070' EF00' F000'        	goto	u3080
  3626  0074'                    u3081:
  3627  0074' EF00' F000'        	goto	l2995
  3628  0078'                    u3080:
  3629  0078'                    
  3630                           ; BSR set to: 0
  3631                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 301:         flag
      +                          s &= ~(1 << 1);
  3632  0078' 9200'              	bcf	_flags^0,1,c
  3633  007A'                    l2995:
  3634                           
  3635                           ; BSR set to: 0
  3636                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 303:     p = (0 <
      +                           prec) ? prec : 1;
  3637  007A' BF00'              	btfsc	(_prec+1)& (0+255),7,b
  3638  007C' EF00' F000'        	goto	u3090
  3639  0080' 5100'              	movf	(_prec+1)& (0+255),w,b
  3640  0082' E106               	bnz	u3091
  3641  0084' 0500'              	decf	_prec& (0+255),w,b
  3642  0086' B0D8               	btfsc	status,0,c
  3643  0088' EF00' F000'        	goto	u3091
  3644  008C' EF00' F000'        	goto	u3090
  3645  0090'                    u3091:
  3646  0090' EF00' F000'        	goto	l1006
  3647  0094'                    u3090:
  3648  0094'                    
  3649                           ; BSR set to: 0
  3650  0094' 0E00               	movlw	0
  3651  0096' 6E00'              	movwf	(dtoa@p+1)^0,c
  3652  0098' 0E01               	movlw	1
  3653  009A' 6E00'              	movwf	dtoa@p^0,c
  3654  009C' EF00' F000'        	goto	l1008
  3655  00A0'                    l1006:
  3656                           
  3657                           ; BSR set to: 0
  3658  00A0' C004' F032'        	movff	_prec,dtoa@p
  3659  00A4' C005' F033'        	movff	_prec+1,dtoa@p+1
  3660  00A8'                    l1008:
  3661                           
  3662                           ; BSR set to: 0
  3663                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 304:     w = widt
      +                          h;
  3664  00A8' C002' F034'        	movff	_width,dtoa@w
  3665  00AC' C003' F035'        	movff	_width+1,dtoa@w+1
  3666  00B0'                    
  3667                           ; BSR set to: 0
  3668                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 305:     if (s ||
      +                           (flags & (1 << 2))) {
  3669  00B0' 5000'              	movf	dtoa@s^0,w,c
  3670  00B2' 1000'              	iorwf	(dtoa@s+1)^0,w,c
  3671  00B4' A4D8               	btfss	status,2,c
  3672  00B6' EF00' F000'        	goto	u3101
  3673  00BA' EF00' F000'        	goto	u3100
  3674  00BE'                    u3101:
  3675  00BE' EF00' F000'        	goto	l3003
  3676  00C2'                    u3100:
  3677  00C2'                    
  3678                           ; BSR set to: 0
  3679  00C2' A400'              	btfss	_flags^0,2,c
  3680  00C4' EF00' F000'        	goto	u3111
  3681  00C8' EF00' F000'        	goto	u3110
  3682  00CC'                    u3111:
  3683  00CC' EF00' F000'        	goto	l3005
  3684  00D0'                    u3110:
  3685  00D0'                    l3003:
  3686                           
  3687                           ; BSR set to: 0
  3688                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 306:         --w;
  3689  00D0' 0600'              	decf	dtoa@w^0,f,c
  3690  00D2' A0D8               	btfss	status,0,c
  3691  00D4' 0600'              	decf	(dtoa@w+1)^0,f,c
  3692  00D6'                    l3005:
  3693                           
  3694                           ; BSR set to: 0
  3695                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 310:     i = size
      +                          of(dbuf) - 1;
  3696  00D6' 0E00               	movlw	0
  3697  00D8' 6E00'              	movwf	(dtoa@i+1)^0,c
  3698  00DA' 0E1F               	movlw	31
  3699  00DC' 6E00'              	movwf	dtoa@i^0,c
  3700  00DE'                    
  3701                           ; BSR set to: 0
  3702                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 311:     dbuf[i] 
      +                          = '\0';
  3703  00DE' 0E00               	movlw	0
  3704  00E0' 6F00'              	movwf	(_dbuf+31)& (0+255),b
  3705                           
  3706                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  3707  00E2' EF00' F000'        	goto	l3019
  3708  00E6'                    l3009:
  3709                           
  3710                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 313:         --i;
  3711  00E6' 0600'              	decf	dtoa@i^0,f,c
  3712  00E8' A0D8               	btfss	status,0,c
  3713  00EA' 0600'              	decf	(dtoa@i+1)^0,f,c
  3714  00EC'                    
  3715                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 314:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  3716  00EC' 0E00'              	movlw	low _dbuf
  3717  00EE' 2400'              	addwf	dtoa@i^0,w,c
  3718  00F0' 6ED9               	movwf	fsr2l,c
  3719  00F2' 0E00'              	movlw	high _dbuf
  3720  00F4' 2000'              	addwfc	(dtoa@i+1)^0,w,c
  3721  00F6' 6EDA               	movwf	fsr2h,c
  3722  00F8' C038' F003'        	movff	dtoa@n,___aomod@dividend
  3723  00FC' C039' F004'        	movff	dtoa@n+1,___aomod@dividend+1
  3724  0100' C03A' F005'        	movff	dtoa@n+2,___aomod@dividend+2
  3725  0104' C03B' F006'        	movff	dtoa@n+3,___aomod@dividend+3
  3726  0108' C03C' F007'        	movff	dtoa@n+4,___aomod@dividend+4
  3727  010C' C03D' F008'        	movff	dtoa@n+5,___aomod@dividend+5
  3728  0110' C03E' F009'        	movff	dtoa@n+6,___aomod@dividend+6
  3729  0114' C03F' F00A'        	movff	dtoa@n+7,___aomod@dividend+7
  3730  0118' 0E0A               	movlw	10
  3731  011A' 6E00'              	movwf	___aomod@divisor^0,c
  3732  011C' 0E00               	movlw	0
  3733  011E' 6E00'              	movwf	(___aomod@divisor+1)^0,c
  3734  0120' 0E00               	movlw	0
  3735  0122' 6E00'              	movwf	(___aomod@divisor+2)^0,c
  3736  0124' 0E00               	movlw	0
  3737  0126' 6E00'              	movwf	(___aomod@divisor+3)^0,c
  3738  0128' 0E00               	movlw	0
  3739  012A' 6E00'              	movwf	(___aomod@divisor+4)^0,c
  3740  012C' 0E00               	movlw	0
  3741  012E' 6E00'              	movwf	(___aomod@divisor+5)^0,c
  3742  0130' 0E00               	movlw	0
  3743  0132' 6E00'              	movwf	(___aomod@divisor+6)^0,c
  3744  0134' 0E00               	movlw	0
  3745  0136' 6E00'              	movwf	(___aomod@divisor+7)^0,c
  3746  0138' EC00' F000'        	call	___aomod	;wreg free
  3747  013C' C003' F028'        	movff	?___aomod,??_dtoa
  3748  0140' C004' F029'        	movff	?___aomod+1,??_dtoa+1
  3749  0144' C005' F02A'        	movff	?___aomod+2,??_dtoa+2
  3750  0148' C006' F02B'        	movff	?___aomod+3,??_dtoa+3
  3751  014C' C007' F02C'        	movff	?___aomod+4,??_dtoa+4
  3752  0150' C008' F02D'        	movff	?___aomod+5,??_dtoa+5
  3753  0154' C009' F02E'        	movff	?___aomod+6,??_dtoa+6
  3754  0158' C00A' F02F'        	movff	?___aomod+7,??_dtoa+7
  3755  015C' C028' F015'        	movff	??_dtoa,abs@a
  3756  0160' C02A' F016'        	movff	??_dtoa+2,abs@a+1
  3757  0164' EC00' F000'        	call	_abs	;wreg free
  3758  0168' 5000'              	movf	?_abs^0,w,c
  3759  016A' 0F30               	addlw	48
  3760  016C' 6EDF               	movwf	indf2,c
  3761  016E'                    
  3762                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 315:         --p;
  3763  016E' 0600'              	decf	dtoa@p^0,f,c
  3764  0170' A0D8               	btfss	status,0,c
  3765  0172' 0600'              	decf	(dtoa@p+1)^0,f,c
  3766  0174'                    
  3767                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 316:         --w;
  3768  0174' 0600'              	decf	dtoa@w^0,f,c
  3769  0176' A0D8               	btfss	status,0,c
  3770  0178' 0600'              	decf	(dtoa@w+1)^0,f,c
  3771  017A'                    
  3772                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 317:         n = 
      +                          n / 10;
  3773  017A' C038' F003'        	movff	dtoa@n,___aodiv@dividend
  3774  017E' C039' F004'        	movff	dtoa@n+1,___aodiv@dividend+1
  3775  0182' C03A' F005'        	movff	dtoa@n+2,___aodiv@dividend+2
  3776  0186' C03B' F006'        	movff	dtoa@n+3,___aodiv@dividend+3
  3777  018A' C03C' F007'        	movff	dtoa@n+4,___aodiv@dividend+4
  3778  018E' C03D' F008'        	movff	dtoa@n+5,___aodiv@dividend+5
  3779  0192' C03E' F009'        	movff	dtoa@n+6,___aodiv@dividend+6
  3780  0196' C03F' F00A'        	movff	dtoa@n+7,___aodiv@dividend+7
  3781  019A' 0E0A               	movlw	10
  3782  019C' 6E00'              	movwf	___aodiv@divisor^0,c
  3783  019E' 0E00               	movlw	0
  3784  01A0' 6E00'              	movwf	(___aodiv@divisor+1)^0,c
  3785  01A2' 0E00               	movlw	0
  3786  01A4' 6E00'              	movwf	(___aodiv@divisor+2)^0,c
  3787  01A6' 0E00               	movlw	0
  3788  01A8' 6E00'              	movwf	(___aodiv@divisor+3)^0,c
  3789  01AA' 0E00               	movlw	0
  3790  01AC' 6E00'              	movwf	(___aodiv@divisor+4)^0,c
  3791  01AE' 0E00               	movlw	0
  3792  01B0' 6E00'              	movwf	(___aodiv@divisor+5)^0,c
  3793  01B2' 0E00               	movlw	0
  3794  01B4' 6E00'              	movwf	(___aodiv@divisor+6)^0,c
  3795  01B6' 0E00               	movlw	0
  3796  01B8' 6E00'              	movwf	(___aodiv@divisor+7)^0,c
  3797  01BA' EC00' F000'        	call	___aodiv	;wreg free
  3798  01BE' C003' F038'        	movff	?___aodiv,dtoa@n
  3799  01C2' C004' F039'        	movff	?___aodiv+1,dtoa@n+1
  3800  01C6' C005' F03A'        	movff	?___aodiv+2,dtoa@n+2
  3801  01CA' C006' F03B'        	movff	?___aodiv+3,dtoa@n+3
  3802  01CE' C007' F03C'        	movff	?___aodiv+4,dtoa@n+4
  3803  01D2' C008' F03D'        	movff	?___aodiv+5,dtoa@n+5
  3804  01D6' C009' F03E'        	movff	?___aodiv+6,dtoa@n+6
  3805  01DA' C00A' F03F'        	movff	?___aodiv+7,dtoa@n+7
  3806  01DE'                    l3019:
  3807                           
  3808                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  3809  01DE' BE00'              	btfsc	(dtoa@i+1)^0,7,c
  3810  01E0' EF00' F000'        	goto	u3121
  3811  01E4' 5000'              	movf	(dtoa@i+1)^0,w,c
  3812  01E6' E108               	bnz	u3120
  3813  01E8' 0400'              	decf	dtoa@i^0,w,c
  3814  01EA' A0D8               	btfss	status,0,c
  3815  01EC' EF00' F000'        	goto	u3121
  3816  01F0' EF00' F000'        	goto	u3120
  3817  01F4'                    u3121:
  3818  01F4' EF00' F000'        	goto	l3029
  3819  01F8'                    u3120:
  3820  01F8' 5000'              	movf	dtoa@n^0,w,c
  3821  01FA' 1000'              	iorwf	(dtoa@n+1)^0,w,c
  3822  01FC' 1000'              	iorwf	(dtoa@n+2)^0,w,c
  3823  01FE' 1000'              	iorwf	(dtoa@n+3)^0,w,c
  3824  0200' 1000'              	iorwf	(dtoa@n+4)^0,w,c
  3825  0202' 1000'              	iorwf	(dtoa@n+5)^0,w,c
  3826  0204' 1000'              	iorwf	(dtoa@n+6)^0,w,c
  3827  0206' 1000'              	iorwf	(dtoa@n+7)^0,w,c
  3828  0208' A4D8               	btfss	status,2,c
  3829  020A' EF00' F000'        	goto	u3131
  3830  020E' EF00' F000'        	goto	u3130
  3831  0212'                    u3131:
  3832  0212' EF00' F000'        	goto	l3009
  3833  0216'                    u3130:
  3834  0216' BE00'              	btfsc	(dtoa@p+1)^0,7,c
  3835  0218' EF00' F000'        	goto	u3140
  3836  021C' 5000'              	movf	(dtoa@p+1)^0,w,c
  3837  021E' E106               	bnz	u3141
  3838  0220' 0400'              	decf	dtoa@p^0,w,c
  3839  0222' B0D8               	btfsc	status,0,c
  3840  0224' EF00' F000'        	goto	u3141
  3841  0228' EF00' F000'        	goto	u3140
  3842  022C'                    u3141:
  3843  022C' EF00' F000'        	goto	l3009
  3844  0230'                    u3140:
  3845  0230' BE00'              	btfsc	(dtoa@w+1)^0,7,c
  3846  0232' EF00' F000'        	goto	u3151
  3847  0236' 5000'              	movf	(dtoa@w+1)^0,w,c
  3848  0238' E108               	bnz	u3150
  3849  023A' 0400'              	decf	dtoa@w^0,w,c
  3850  023C' A0D8               	btfss	status,0,c
  3851  023E' EF00' F000'        	goto	u3151
  3852  0242' EF00' F000'        	goto	u3150
  3853  0246'                    u3151:
  3854  0246' EF00' F000'        	goto	l3029
  3855  024A'                    u3150:
  3856  024A' B200'              	btfsc	_flags^0,1,c
  3857  024C' EF00' F000'        	goto	u3161
  3858  0250' EF00' F000'        	goto	u3160
  3859  0254'                    u3161:
  3860  0254' EF00' F000'        	goto	l3009
  3861  0258'                    u3160:
  3862  0258'                    l3029:
  3863                           
  3864                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 321:     if (s ||
      +                           (flags & (1 << 2))) {
  3865  0258' 5000'              	movf	dtoa@s^0,w,c
  3866  025A' 1000'              	iorwf	(dtoa@s+1)^0,w,c
  3867  025C' A4D8               	btfss	status,2,c
  3868  025E' EF00' F000'        	goto	u3171
  3869  0262' EF00' F000'        	goto	u3170
  3870  0266'                    u3171:
  3871  0266' EF00' F000'        	goto	l3033
  3872  026A'                    u3170:
  3873  026A' A400'              	btfss	_flags^0,2,c
  3874  026C' EF00' F000'        	goto	u3181
  3875  0270' EF00' F000'        	goto	u3180
  3876  0274'                    u3181:
  3877  0274' EF00' F000'        	goto	l3043
  3878  0278'                    u3180:
  3879  0278'                    l3033:
  3880                           
  3881                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 322:         --i;
  3882  0278' 0600'              	decf	dtoa@i^0,f,c
  3883  027A' A0D8               	btfss	status,0,c
  3884  027C' 0600'              	decf	(dtoa@i+1)^0,f,c
  3885  027E'                    
  3886                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 323:         dbuf
      +                          [i] = s ? '-' : '+';
  3887  027E' 5000'              	movf	dtoa@s^0,w,c
  3888  0280' 1000'              	iorwf	(dtoa@s+1)^0,w,c
  3889  0282' A4D8               	btfss	status,2,c
  3890  0284' EF00' F000'        	goto	u3191
  3891  0288' EF00' F000'        	goto	u3190
  3892  028C'                    u3191:
  3893  028C' EF00' F000'        	goto	l3039
  3894  0290'                    u3190:
  3895  0290' 0E00               	movlw	0
  3896  0292' 6E00'              	movwf	(_dtoa$1912+1)^0,c
  3897  0294' 0E2B               	movlw	43
  3898  0296' 6E00'              	movwf	_dtoa$1912^0,c
  3899  0298' EF00' F000'        	goto	l3041
  3900  029C'                    l3039:
  3901  029C' 0E00               	movlw	0
  3902  029E' 6E00'              	movwf	(_dtoa$1912+1)^0,c
  3903  02A0' 0E2D               	movlw	45
  3904  02A2' 6E00'              	movwf	_dtoa$1912^0,c
  3905  02A4'                    l3041:
  3906  02A4' 0E00'              	movlw	low _dbuf
  3907  02A6' 2400'              	addwf	dtoa@i^0,w,c
  3908  02A8' 6ED9               	movwf	fsr2l,c
  3909  02AA' 0E00'              	movlw	high _dbuf
  3910  02AC' 2000'              	addwfc	(dtoa@i+1)^0,w,c
  3911  02AE' 6EDA               	movwf	fsr2h,c
  3912  02B0' C030' FFDF         	movff	_dtoa$1912,indf2
  3913  02B4'                    l3043:
  3914                           
  3915                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 327:     return p
      +                          ad(fp, &dbuf[i], w);
  3916  02B4' C01E' F013'        	movff	dtoa@fp,pad@fp
  3917  02B8' C01F' F014'        	movff	dtoa@fp+1,pad@fp+1
  3918  02BC' 0E00'              	movlw	low _dbuf
  3919  02BE' 2400'              	addwf	dtoa@i^0,w,c
  3920  02C0' 6E00'              	movwf	pad@buf^0,c
  3921  02C2' 0E00'              	movlw	high _dbuf
  3922  02C4' 2000'              	addwfc	(dtoa@i+1)^0,w,c
  3923  02C6' 6E00'              	movwf	(pad@buf+1)^0,c
  3924  02C8' C034' F017'        	movff	dtoa@w,pad@p
  3925  02CC' C035' F018'        	movff	dtoa@w+1,pad@p+1
  3926  02D0' EC00' F000'        	call	_pad	;wreg free
  3927  02D4' C013' F01E'        	movff	?_pad,?_dtoa
  3928  02D8' C014' F01F'        	movff	?_pad+1,?_dtoa+1
  3929  02DC' 0012               	return		;funcret
  3930  02DE'                    __end_of_dtoa:
  3931                           	callstack 0
  3932                           
  3933 ;; *************** function _pad *****************
  3934 ;; Defined at:
  3935 ;;		line 72 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
  3936 ;; Parameters:    Size  Location     Type
  3937 ;;  fp              2   19[COMRAM] PTR struct _IO_FILE
  3938 ;;		 -> sprintf@f(6), 
  3939 ;;  buf             2   21[COMRAM] PTR unsigned char 
  3940 ;;		 -> dbuf(32), 
  3941 ;;  p               2   23[COMRAM] int 
  3942 ;; Auto vars:     Size  Location     Type
  3943 ;;  w               2   28[COMRAM] int 
  3944 ;;  i               2   26[COMRAM] int 
  3945 ;; Return value:  Size  Location     Type
  3946 ;;                  2   19[COMRAM] int 
  3947 ;; Registers used:
  3948 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3949 ;; Tracked objects:
  3950 ;;		On entry : 0/0
  3951 ;;		On exit  : 0/0
  3952 ;;		Unchanged: 0/0
  3953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3954 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3955 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3956 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3957 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3958 ;;Total ram usage:       11 bytes
  3959 ;; Hardware stack levels used: 1
  3960 ;; Hardware stack levels required when called: 5
  3961 ;; This function calls:
  3962 ;;		_fputc
  3963 ;;		_fputs
  3964 ;;		_strlen
  3965 ;; This function is called by:
  3966 ;;		_dtoa
  3967 ;; This function uses a non-reentrant model
  3968 ;;
  3969                           
  3970                           	psect	text18
  3971  0000'                    __ptext18:
  3972                           	callstack 0
  3973  0000'                    _pad:
  3974                           	callstack 20
  3975  0000'                    
  3976                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 72: static int pa
      +                          d(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\commo
      +                          n\doprnt.c: 73: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 
      +                          74:     int i, w;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 
      +                          77:     if (flags & (1 << 0)) {
  3977  0000' A000'              	btfss	_flags^0,0,c
  3978  0002' EF00' F000'        	goto	u2961
  3979  0006' EF00' F000'        	goto	u2960
  3980  000A'                    u2961:
  3981  000A' EF00' F000'        	goto	l2947
  3982  000E'                    u2960:
  3983  000E'                    
  3984                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 78:         fputs
      +                          ((const char *)buf, fp);
  3985  000E' C015' F00C'        	movff	pad@buf,fputs@s
  3986  0012' C016' F00D'        	movff	pad@buf+1,fputs@s+1
  3987  0016' C013' F00E'        	movff	pad@fp,fputs@fp
  3988  001A' C014' F00F'        	movff	pad@fp+1,fputs@fp+1
  3989  001E' EC00' F000'        	call	_fputs	;wreg free
  3990  0022'                    l2947:
  3991                           
  3992                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 82:     w = (p < 
      +                          0) ? 0 : p;
  3993  0022' BE00'              	btfsc	(pad@p+1)^0,7,c
  3994  0024' EF00' F000'        	goto	u2971
  3995  0028' EF00' F000'        	goto	u2970
  3996  002C'                    u2971:
  3997  002C' EF00' F000'        	goto	l2951
  3998  0030'                    u2970:
  3999  0030' C017' F01C'        	movff	pad@p,pad@w
  4000  0034' C018' F01D'        	movff	pad@p+1,pad@w+1
  4001  0038' EF00' F000'        	goto	l995
  4002  003C'                    l2951:
  4003  003C' 0E00               	movlw	0
  4004  003E' 6E00'              	movwf	(pad@w+1)^0,c
  4005  0040' 0E00               	movlw	0
  4006  0042' 6E00'              	movwf	pad@w^0,c
  4007  0044'                    l995:
  4008                           
  4009                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 83:     i = 0;
  4010  0044' 0E00               	movlw	0
  4011  0046' 6E00'              	movwf	(pad@i+1)^0,c
  4012  0048' 0E00               	movlw	0
  4013  004A' 6E00'              	movwf	pad@i^0,c
  4014                           
  4015                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  4016  004C' EF00' F000'        	goto	l2957
  4017  0050'                    l2953:
  4018                           
  4019                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 85:         fputc
      +                          (' ', fp);
  4020  0050' 0E00               	movlw	0
  4021  0052' 6E00'              	movwf	(fputc@c+1)^0,c
  4022  0054' 0E20               	movlw	32
  4023  0056' 6E00'              	movwf	fputc@c^0,c
  4024  0058' C013' F005'        	movff	pad@fp,fputc@fp
  4025  005C' C014' F006'        	movff	pad@fp+1,fputc@fp+1
  4026  0060' EC00' F000'        	call	_fputc	;wreg free
  4027  0064'                    
  4028                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 86:         ++i;
  4029  0064' 4A00'              	infsnz	pad@i^0,f,c
  4030  0066' 2A00'              	incf	(pad@i+1)^0,f,c
  4031  0068'                    l2957:
  4032                           
  4033                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  4034  0068' 5000'              	movf	pad@w^0,w,c
  4035  006A' 5C00'              	subwf	pad@i^0,w,c
  4036  006C' 5000'              	movf	(pad@i+1)^0,w,c
  4037  006E' 0A80               	xorlw	128
  4038  0070' 6E00'              	movwf	??_pad^0,c
  4039  0072' 5000'              	movf	(pad@w+1)^0,w,c
  4040  0074' 0A80               	xorlw	128
  4041  0076' 5800'              	subwfb	??_pad^0,w,c
  4042  0078' A0D8               	btfss	status,0,c
  4043  007A' EF00' F000'        	goto	u2981
  4044  007E' EF00' F000'        	goto	u2980
  4045  0082'                    u2981:
  4046  0082' EF00' F000'        	goto	l2953
  4047  0086'                    u2980:
  4048  0086'                    
  4049                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 90:     if (!(fla
      +                          gs & (1 << 0))) {
  4050  0086' B000'              	btfsc	_flags^0,0,c
  4051  0088' EF00' F000'        	goto	u2991
  4052  008C' EF00' F000'        	goto	u2990
  4053  0090'                    u2991:
  4054  0090' EF00' F000'        	goto	l2961
  4055  0094'                    u2990:
  4056  0094'                    
  4057                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 91:         fputs
      +                          ((const char *)buf, fp);
  4058  0094' C015' F00C'        	movff	pad@buf,fputs@s
  4059  0098' C016' F00D'        	movff	pad@buf+1,fputs@s+1
  4060  009C' C013' F00E'        	movff	pad@fp,fputs@fp
  4061  00A0' C014' F00F'        	movff	pad@fp+1,fputs@fp+1
  4062  00A4' EC00' F000'        	call	_fputs	;wreg free
  4063  00A8'                    l2961:
  4064                           
  4065                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 94:     return (i
      +                          nt)(strlen(buf) + (size_t)w);
  4066  00A8' C015' F003'        	movff	pad@buf,strlen@s
  4067  00AC' C016' F004'        	movff	pad@buf+1,strlen@s+1
  4068  00B0' EC00' F000'        	call	_strlen	;wreg free
  4069  00B4' 5000'              	movf	pad@w^0,w,c
  4070  00B6' 2400'              	addwf	?_strlen^0,w,c
  4071  00B8' 6E00'              	movwf	?_pad^0,c
  4072  00BA' 5000'              	movf	(pad@w+1)^0,w,c
  4073  00BC' 2000'              	addwfc	(?_strlen+1)^0,w,c
  4074  00BE' 6E00'              	movwf	(?_pad+1)^0,c
  4075  00C0' 0012               	return		;funcret
  4076  00C2'                    __end_of_pad:
  4077                           	callstack 0
  4078                           
  4079 ;; *************** function _strlen *****************
  4080 ;; Defined at:
  4081 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\strlen.c"
  4082 ;; Parameters:    Size  Location     Type
  4083 ;;  s               2    3[COMRAM] PTR const unsigned char 
  4084 ;;		 -> dbuf(32), 
  4085 ;; Auto vars:     Size  Location     Type
  4086 ;;  a               2    5[COMRAM] PTR const unsigned char 
  4087 ;;		 -> dbuf(32), 
  4088 ;; Return value:  Size  Location     Type
  4089 ;;                  2    3[COMRAM] unsigned int 
  4090 ;; Registers used:
  4091 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4092 ;; Tracked objects:
  4093 ;;		On entry : 0/0
  4094 ;;		On exit  : 0/0
  4095 ;;		Unchanged: 0/0
  4096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4097 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4098 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4100 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4101 ;;Total ram usage:        4 bytes
  4102 ;; Hardware stack levels used: 1
  4103 ;; Hardware stack levels required when called: 2
  4104 ;; This function calls:
  4105 ;;		Nothing
  4106 ;; This function is called by:
  4107 ;;		_pad
  4108 ;; This function uses a non-reentrant model
  4109 ;;
  4110                           
  4111                           	psect	text19
  4112  0000'                    __ptext19:
  4113                           	callstack 0
  4114  0000'                    _strlen:
  4115                           	callstack 22
  4116  0000' C003' F005'        	movff	strlen@s,strlen@a
  4117  0004' C004' F006'        	movff	strlen@s+1,strlen@a+1
  4118  0008' EF00' F000'        	goto	l2851
  4119  000C'                    l2849:
  4120  000C' 4A00'              	infsnz	strlen@s^0,f,c
  4121  000E' 2A00'              	incf	(strlen@s+1)^0,f,c
  4122  0010'                    l2851:
  4123  0010' C003' FFD9         	movff	strlen@s,fsr2l
  4124  0014' C004' FFDA         	movff	strlen@s+1,fsr2h
  4125  0018' 50DF               	movf	indf2,w,c
  4126  001A' A4D8               	btfss	status,2,c
  4127  001C' EF00' F000'        	goto	u2821
  4128  0020' EF00' F000'        	goto	u2820
  4129  0024'                    u2821:
  4130  0024' EF00' F000'        	goto	l2849
  4131  0028'                    u2820:
  4132  0028' 5000'              	movf	strlen@a^0,w,c
  4133  002A' 5C00'              	subwf	strlen@s^0,w,c
  4134  002C' 6E00'              	movwf	?_strlen^0,c
  4135  002E' 5000'              	movf	(strlen@a+1)^0,w,c
  4136  0030' 5800'              	subwfb	(strlen@s+1)^0,w,c
  4137  0032' 6E00'              	movwf	(?_strlen+1)^0,c
  4138  0034' 0012               	return		;funcret
  4139  0036'                    __end_of_strlen:
  4140                           	callstack 0
  4141                           
  4142 ;; *************** function _fputs *****************
  4143 ;; Defined at:
  4144 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_fputs.c"
  4145 ;; Parameters:    Size  Location     Type
  4146 ;;  s               2   12[COMRAM] PTR const unsigned char 
  4147 ;;		 -> dbuf(32), 
  4148 ;;  fp              2   14[COMRAM] PTR struct _IO_FILE
  4149 ;;		 -> sprintf@f(6), 
  4150 ;; Auto vars:     Size  Location     Type
  4151 ;;  i               2   17[COMRAM] int 
  4152 ;;  c               1   16[COMRAM] unsigned char 
  4153 ;; Return value:  Size  Location     Type
  4154 ;;                  2   12[COMRAM] int 
  4155 ;; Registers used:
  4156 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4157 ;; Tracked objects:
  4158 ;;		On entry : 0/0
  4159 ;;		On exit  : 0/0
  4160 ;;		Unchanged: 0/0
  4161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4162 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4163 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4165 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4166 ;;Total ram usage:        7 bytes
  4167 ;; Hardware stack levels used: 1
  4168 ;; Hardware stack levels required when called: 4
  4169 ;; This function calls:
  4170 ;;		_fputc
  4171 ;; This function is called by:
  4172 ;;		_pad
  4173 ;; This function uses a non-reentrant model
  4174 ;;
  4175                           
  4176                           	psect	text20
  4177  0000'                    __ptext20:
  4178                           	callstack 0
  4179  0000'                    _fputs:
  4180                           	callstack 20
  4181  0000' 0E00               	movlw	0
  4182  0002' 6E00'              	movwf	(fputs@i+1)^0,c
  4183  0004' 0E00               	movlw	0
  4184  0006' 6E00'              	movwf	fputs@i^0,c
  4185  0008' EF00' F000'        	goto	l2845
  4186  000C'                    l2841:
  4187  000C' C010' F003'        	movff	fputs@c,fputc@c
  4188  0010' 6A00'              	clrf	(fputc@c+1)^0,c
  4189  0012' C00E' F005'        	movff	fputs@fp,fputc@fp
  4190  0016' C00F' F006'        	movff	fputs@fp+1,fputc@fp+1
  4191  001A' EC00' F000'        	call	_fputc	;wreg free
  4192  001E' 4A00'              	infsnz	fputs@i^0,f,c
  4193  0020' 2A00'              	incf	(fputs@i+1)^0,f,c
  4194  0022'                    l2845:
  4195  0022' 5000'              	movf	fputs@i^0,w,c
  4196  0024' 2400'              	addwf	fputs@s^0,w,c
  4197  0026' 6ED9               	movwf	fsr2l,c
  4198  0028' 5000'              	movf	(fputs@i+1)^0,w,c
  4199  002A' 2000'              	addwfc	(fputs@s+1)^0,w,c
  4200  002C' 6EDA               	movwf	fsr2h,c
  4201  002E' 50DF               	movf	indf2,w,c
  4202  0030' 6E00'              	movwf	fputs@c^0,c
  4203  0032' 5000'              	movf	fputs@c^0,w,c
  4204  0034' A4D8               	btfss	status,2,c
  4205  0036' EF00' F000'        	goto	u2811
  4206  003A' EF00' F000'        	goto	u2810
  4207  003E'                    u2811:
  4208  003E' EF00' F000'        	goto	l2841
  4209  0042'                    u2810:
  4210  0042' 0012               	return		;funcret
  4211  0044'                    __end_of_fputs:
  4212                           	callstack 0
  4213                           
  4214 ;; *************** function _fputc *****************
  4215 ;; Defined at:
  4216 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_fputc.c"
  4217 ;; Parameters:    Size  Location     Type
  4218 ;;  c               2    3[COMRAM] int 
  4219 ;;  fp              2    5[COMRAM] PTR struct _IO_FILE
  4220 ;;		 -> sprintf@f(6), 
  4221 ;; Auto vars:     Size  Location     Type
  4222 ;;		None
  4223 ;; Return value:  Size  Location     Type
  4224 ;;                  2    3[COMRAM] int 
  4225 ;; Registers used:
  4226 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4227 ;; Tracked objects:
  4228 ;;		On entry : 0/0
  4229 ;;		On exit  : 0/0
  4230 ;;		Unchanged: 0/0
  4231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4232 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4234 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4235 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4236 ;;Total ram usage:        9 bytes
  4237 ;; Hardware stack levels used: 1
  4238 ;; Hardware stack levels required when called: 3
  4239 ;; This function calls:
  4240 ;;		_putch
  4241 ;; This function is called by:
  4242 ;;		_pad
  4243 ;;		_vfpfcnvrt
  4244 ;;		_fputs
  4245 ;; This function uses a non-reentrant model
  4246 ;;
  4247                           
  4248                           	psect	text21
  4249  0000'                    __ptext21:
  4250                           	callstack 0
  4251  0000'                    _fputc:
  4252                           	callstack 23
  4253  0000' 5000'              	movf	fputc@fp^0,w,c
  4254  0002' 1000'              	iorwf	(fputc@fp+1)^0,w,c
  4255  0004' B4D8               	btfsc	status,2,c
  4256  0006' EF00' F000'        	goto	u2771
  4257  000A' EF00' F000'        	goto	u2770
  4258  000E'                    u2771:
  4259  000E' EF00' F000'        	goto	l2829
  4260  0012'                    u2770:
  4261  0012' 5000'              	movf	fputc@fp^0,w,c
  4262  0014' 1000'              	iorwf	(fputc@fp+1)^0,w,c
  4263  0016' A4D8               	btfss	status,2,c
  4264  0018' EF00' F000'        	goto	u2781
  4265  001C' EF00' F000'        	goto	u2780
  4266  0020'                    u2781:
  4267  0020' EF00' F000'        	goto	l2831
  4268  0024'                    u2780:
  4269  0024'                    l2829:
  4270  0024' 5000'              	movf	fputc@c^0,w,c
  4271  0026' EC00' F000'        	call	_putch
  4272  002A' EF00' F000'        	goto	l1126
  4273  002E'                    l2831:
  4274  002E' EE20 F004          	lfsr	2,4
  4275  0032' 5000'              	movf	fputc@fp^0,w,c
  4276  0034' 26D9               	addwf	fsr2l,f,c
  4277  0036' 5000'              	movf	(fputc@fp+1)^0,w,c
  4278  0038' 22DA               	addwfc	fsr2h,f,c
  4279  003A' 50DE               	movf	postinc2,w,c
  4280  003C' 10DE               	iorwf	postinc2,w,c
  4281  003E' B4D8               	btfsc	status,2,c
  4282  0040' EF00' F000'        	goto	u2791
  4283  0044' EF00' F000'        	goto	u2790
  4284  0048'                    u2791:
  4285  0048' EF00' F000'        	goto	l2835
  4286  004C'                    u2790:
  4287  004C' EE20 F004          	lfsr	2,4
  4288  0050' 5000'              	movf	fputc@fp^0,w,c
  4289  0052' 26D9               	addwf	fsr2l,f,c
  4290  0054' 5000'              	movf	(fputc@fp+1)^0,w,c
  4291  0056' 22DA               	addwfc	fsr2h,f,c
  4292  0058' EE10 F002          	lfsr	1,2
  4293  005C' 5000'              	movf	fputc@fp^0,w,c
  4294  005E' 26E1               	addwf	fsr1l,f,c
  4295  0060' 5000'              	movf	(fputc@fp+1)^0,w,c
  4296  0062' 22E2               	addwfc	fsr1h,f,c
  4297  0064' 50DE               	movf	postinc2,w,c
  4298  0066' 5CE6               	subwf	postinc1,w,c
  4299  0068' 50E6               	movf	postinc1,w,c
  4300  006A' 0A80               	xorlw	128
  4301  006C' 6E00'              	movwf	(??_fputc+4)^0,c
  4302  006E' 50DE               	movf	postinc2,w,c
  4303  0070' 0A80               	xorlw	128
  4304  0072' 5800'              	subwfb	(??_fputc+4)^0,w,c
  4305  0074' B0D8               	btfsc	status,0,c
  4306  0076' EF00' F000'        	goto	u2801
  4307  007A' EF00' F000'        	goto	u2800
  4308  007E'                    u2801:
  4309  007E' EF00' F000'        	goto	l1126
  4310  0082'                    u2800:
  4311  0082'                    l2835:
  4312  0082' EE20 F002          	lfsr	2,2
  4313  0086' 5000'              	movf	fputc@fp^0,w,c
  4314  0088' 26D9               	addwf	fsr2l,f,c
  4315  008A' 5000'              	movf	(fputc@fp+1)^0,w,c
  4316  008C' 22DA               	addwfc	fsr2h,f,c
  4317  008E' CFDE F007'         	movff	postinc2,??_fputc
  4318  0092' CFDD F008'         	movff	postdec2,??_fputc+1
  4319  0096' C005' FFD9         	movff	fputc@fp,fsr2l
  4320  009A' C006' FFDA         	movff	fputc@fp+1,fsr2h
  4321  009E' CFDE F009'         	movff	postinc2,??_fputc+2
  4322  00A2' CFDD F00A'         	movff	postdec2,??_fputc+3
  4323  00A6' 5000'              	movf	??_fputc^0,w,c
  4324  00A8' 2400'              	addwf	(??_fputc+2)^0,w,c
  4325  00AA' 6ED9               	movwf	fsr2l,c
  4326  00AC' 5000'              	movf	(??_fputc+1)^0,w,c
  4327  00AE' 2000'              	addwfc	(??_fputc+3)^0,w,c
  4328  00B0' 6EDA               	movwf	fsr2h,c
  4329  00B2' C003' FFDF         	movff	fputc@c,indf2
  4330  00B6' EE20 F002          	lfsr	2,2
  4331  00BA' 5000'              	movf	fputc@fp^0,w,c
  4332  00BC' 26D9               	addwf	fsr2l,f,c
  4333  00BE' 5000'              	movf	(fputc@fp+1)^0,w,c
  4334  00C0' 22DA               	addwfc	fsr2h,f,c
  4335  00C2' 2ADE               	incf	postinc2,f,c
  4336  00C4' 0E00               	movlw	0
  4337  00C6' 22DD               	addwfc	postdec2,f,c
  4338  00C8'                    l1126:
  4339  00C8' 0012               	return		;funcret
  4340  00CA'                    __end_of_fputc:
  4341                           	callstack 0
  4342                           
  4343 ;; *************** function _putch *****************
  4344 ;; Defined at:
  4345 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\putch.c"
  4346 ;; Parameters:    Size  Location     Type
  4347 ;;  c               1    wreg     unsigned char 
  4348 ;; Auto vars:     Size  Location     Type
  4349 ;;  c               1    0[COMRAM] unsigned char 
  4350 ;; Return value:  Size  Location     Type
  4351 ;;                  1    wreg      void 
  4352 ;; Registers used:
  4353 ;;		wreg
  4354 ;; Tracked objects:
  4355 ;;		On entry : 0/0
  4356 ;;		On exit  : 0/0
  4357 ;;		Unchanged: 0/0
  4358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4360 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4362 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4363 ;;Total ram usage:        0 bytes
  4364 ;; Hardware stack levels used: 1
  4365 ;; Hardware stack levels required when called: 2
  4366 ;; This function calls:
  4367 ;;		Nothing
  4368 ;; This function is called by:
  4369 ;;		_fputc
  4370 ;; This function uses a non-reentrant model
  4371 ;;
  4372                           
  4373                           	psect	text22
  4374  0000'                    __ptext22:
  4375                           	callstack 0
  4376  0000'                    _putch:
  4377                           	callstack 23
  4378  0000' 0012               	return		;funcret
  4379  0002'                    __end_of_putch:
  4380                           	callstack 0
  4381                           
  4382 ;; *************** function _abs *****************
  4383 ;; Defined at:
  4384 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\abs.c"
  4385 ;; Parameters:    Size  Location     Type
  4386 ;;  a               2   21[COMRAM] int 
  4387 ;; Auto vars:     Size  Location     Type
  4388 ;;		None
  4389 ;; Return value:  Size  Location     Type
  4390 ;;                  2   21[COMRAM] int 
  4391 ;; Registers used:
  4392 ;;		wreg, status,2, status,0
  4393 ;; Tracked objects:
  4394 ;;		On entry : 0/0
  4395 ;;		On exit  : 0/0
  4396 ;;		Unchanged: 0/0
  4397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4398 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4400 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4401 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4402 ;;Total ram usage:        4 bytes
  4403 ;; Hardware stack levels used: 1
  4404 ;; Hardware stack levels required when called: 2
  4405 ;; This function calls:
  4406 ;;		Nothing
  4407 ;; This function is called by:
  4408 ;;		_dtoa
  4409 ;; This function uses a non-reentrant model
  4410 ;;
  4411                           
  4412                           	psect	text23
  4413  0000'                    __ptext23:
  4414                           	callstack 0
  4415  0000'                    _abs:
  4416                           	callstack 23
  4417  0000' BE00'              	btfsc	(abs@a+1)^0,7,c
  4418  0002' EF00' F000'        	goto	u3000
  4419  0006' 5000'              	movf	(abs@a+1)^0,w,c
  4420  0008' E106               	bnz	u3001
  4421  000A' 0400'              	decf	abs@a^0,w,c
  4422  000C' B0D8               	btfsc	status,0,c
  4423  000E' EF00' F000'        	goto	u3001
  4424  0012' EF00' F000'        	goto	u3000
  4425  0016'                    u3001:
  4426  0016' EF00' F000'        	goto	l1066
  4427  001A'                    u3000:
  4428  001A' C015' F017'        	movff	abs@a,??_abs
  4429  001E' C016' F018'        	movff	abs@a+1,??_abs+1
  4430  0022' 1E00'              	comf	??_abs^0,f,c
  4431  0024' 1E00'              	comf	(??_abs+1)^0,f,c
  4432  0026' 4A00'              	infsnz	??_abs^0,f,c
  4433  0028' 2A00'              	incf	(??_abs+1)^0,f,c
  4434  002A' C017' F015'        	movff	??_abs,?_abs
  4435  002E' C018' F016'        	movff	??_abs+1,?_abs+1
  4436  0032' EF00' F000'        	goto	l1069
  4437  0036'                    l1066:
  4438  0036' C015' F015'        	movff	abs@a,?_abs
  4439  003A' C016' F016'        	movff	abs@a+1,?_abs+1
  4440  003E'                    l1069:
  4441  003E' 0012               	return		;funcret
  4442  0040'                    __end_of_abs:
  4443                           	callstack 0
  4444                           
  4445 ;; *************** function ___aomod *****************
  4446 ;; Defined at:
  4447 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\aomod.c"
  4448 ;; Parameters:    Size  Location     Type
  4449 ;;  dividend        8    3[COMRAM] long long 
  4450 ;;  divisor         8   11[COMRAM] long long 
  4451 ;; Auto vars:     Size  Location     Type
  4452 ;;  sign            1   20[COMRAM] unsigned char 
  4453 ;;  counter         1   19[COMRAM] unsigned char 
  4454 ;; Return value:  Size  Location     Type
  4455 ;;                  8    3[COMRAM] long long 
  4456 ;; Registers used:
  4457 ;;		wreg, status,2, status,0
  4458 ;; Tracked objects:
  4459 ;;		On entry : 0/0
  4460 ;;		On exit  : 0/0
  4461 ;;		Unchanged: 0/0
  4462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4463 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4464 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4466 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4467 ;;Total ram usage:       18 bytes
  4468 ;; Hardware stack levels used: 1
  4469 ;; Hardware stack levels required when called: 2
  4470 ;; This function calls:
  4471 ;;		Nothing
  4472 ;; This function is called by:
  4473 ;;		_dtoa
  4474 ;; This function uses a non-reentrant model
  4475 ;;
  4476                           
  4477                           	psect	text24
  4478  0000'                    __ptext24:
  4479                           	callstack 0
  4480  0000'                    ___aomod:
  4481                           	callstack 23
  4482  0000' 0E00               	movlw	0
  4483  0002' 6E00'              	movwf	___aomod@sign^0,c
  4484  0004' BE00'              	btfsc	(___aomod@dividend+7)^0,7,c
  4485  0006' EF00' F000'        	goto	u2900
  4486  000A' EF00' F000'        	goto	u2901
  4487  000E'                    u2901:
  4488  000E' EF00' F000'        	goto	l2915
  4489  0012'                    u2900:
  4490  0012' 1E00'              	comf	(___aomod@dividend+7)^0,f,c
  4491  0014' 1E00'              	comf	(___aomod@dividend+6)^0,f,c
  4492  0016' 1E00'              	comf	(___aomod@dividend+5)^0,f,c
  4493  0018' 1E00'              	comf	(___aomod@dividend+4)^0,f,c
  4494  001A' 1E00'              	comf	(___aomod@dividend+3)^0,f,c
  4495  001C' 1E00'              	comf	(___aomod@dividend+2)^0,f,c
  4496  001E' 1E00'              	comf	(___aomod@dividend+1)^0,f,c
  4497  0020' 6C00'              	negf	___aomod@dividend^0,c
  4498  0022' 0E00               	movlw	0
  4499  0024' 2200'              	addwfc	(___aomod@dividend+1)^0,f,c
  4500  0026' 2200'              	addwfc	(___aomod@dividend+2)^0,f,c
  4501  0028' 2200'              	addwfc	(___aomod@dividend+3)^0,f,c
  4502  002A' 2200'              	addwfc	(___aomod@dividend+4)^0,f,c
  4503  002C' 2200'              	addwfc	(___aomod@dividend+5)^0,f,c
  4504  002E' 2200'              	addwfc	(___aomod@dividend+6)^0,f,c
  4505  0030' 2200'              	addwfc	(___aomod@dividend+7)^0,f,c
  4506  0032' 0E01               	movlw	1
  4507  0034' 6E00'              	movwf	___aomod@sign^0,c
  4508  0036'                    l2915:
  4509  0036' BE00'              	btfsc	(___aomod@divisor+7)^0,7,c
  4510  0038' EF00' F000'        	goto	u2910
  4511  003C' EF00' F000'        	goto	u2911
  4512  0040'                    u2911:
  4513  0040' EF00' F000'        	goto	l2919
  4514  0044'                    u2910:
  4515  0044' 1E00'              	comf	(___aomod@divisor+7)^0,f,c
  4516  0046' 1E00'              	comf	(___aomod@divisor+6)^0,f,c
  4517  0048' 1E00'              	comf	(___aomod@divisor+5)^0,f,c
  4518  004A' 1E00'              	comf	(___aomod@divisor+4)^0,f,c
  4519  004C' 1E00'              	comf	(___aomod@divisor+3)^0,f,c
  4520  004E' 1E00'              	comf	(___aomod@divisor+2)^0,f,c
  4521  0050' 1E00'              	comf	(___aomod@divisor+1)^0,f,c
  4522  0052' 6C00'              	negf	___aomod@divisor^0,c
  4523  0054' 0E00               	movlw	0
  4524  0056' 2200'              	addwfc	(___aomod@divisor+1)^0,f,c
  4525  0058' 2200'              	addwfc	(___aomod@divisor+2)^0,f,c
  4526  005A' 2200'              	addwfc	(___aomod@divisor+3)^0,f,c
  4527  005C' 2200'              	addwfc	(___aomod@divisor+4)^0,f,c
  4528  005E' 2200'              	addwfc	(___aomod@divisor+5)^0,f,c
  4529  0060' 2200'              	addwfc	(___aomod@divisor+6)^0,f,c
  4530  0062' 2200'              	addwfc	(___aomod@divisor+7)^0,f,c
  4531  0064'                    l2919:
  4532  0064' 5000'              	movf	___aomod@divisor^0,w,c
  4533  0066' 1000'              	iorwf	(___aomod@divisor+1)^0,w,c
  4534  0068' 1000'              	iorwf	(___aomod@divisor+2)^0,w,c
  4535  006A' 1000'              	iorwf	(___aomod@divisor+3)^0,w,c
  4536  006C' 1000'              	iorwf	(___aomod@divisor+4)^0,w,c
  4537  006E' 1000'              	iorwf	(___aomod@divisor+5)^0,w,c
  4538  0070' 1000'              	iorwf	(___aomod@divisor+6)^0,w,c
  4539  0072' 1000'              	iorwf	(___aomod@divisor+7)^0,w,c
  4540  0074' B4D8               	btfsc	status,2,c
  4541  0076' EF00' F000'        	goto	u2921
  4542  007A' EF00' F000'        	goto	u2920
  4543  007E'                    u2921:
  4544  007E' EF00' F000'        	goto	l2935
  4545  0082'                    u2920:
  4546  0082' 0E01               	movlw	1
  4547  0084' 6E00'              	movwf	___aomod@counter^0,c
  4548  0086' EF00' F000'        	goto	l2925
  4549  008A'                    l2923:
  4550  008A' 90D8               	bcf	status,0,c
  4551  008C' 3600'              	rlcf	___aomod@divisor^0,f,c
  4552  008E' 3600'              	rlcf	(___aomod@divisor+1)^0,f,c
  4553  0090' 3600'              	rlcf	(___aomod@divisor+2)^0,f,c
  4554  0092' 3600'              	rlcf	(___aomod@divisor+3)^0,f,c
  4555  0094' 3600'              	rlcf	(___aomod@divisor+4)^0,f,c
  4556  0096' 3600'              	rlcf	(___aomod@divisor+5)^0,f,c
  4557  0098' 3600'              	rlcf	(___aomod@divisor+6)^0,f,c
  4558  009A' 3600'              	rlcf	(___aomod@divisor+7)^0,f,c
  4559  009C' 2A00'              	incf	___aomod@counter^0,f,c
  4560  009E'                    l2925:
  4561  009E' AE00'              	btfss	(___aomod@divisor+7)^0,7,c
  4562  00A0' EF00' F000'        	goto	u2931
  4563  00A4' EF00' F000'        	goto	u2930
  4564  00A8'                    u2931:
  4565  00A8' EF00' F000'        	goto	l2923
  4566  00AC'                    u2930:
  4567  00AC'                    l2927:
  4568  00AC' 5000'              	movf	___aomod@divisor^0,w,c
  4569  00AE' 5C00'              	subwf	___aomod@dividend^0,w,c
  4570  00B0' 5000'              	movf	(___aomod@divisor+1)^0,w,c
  4571  00B2' 5800'              	subwfb	(___aomod@dividend+1)^0,w,c
  4572  00B4' 5000'              	movf	(___aomod@divisor+2)^0,w,c
  4573  00B6' 5800'              	subwfb	(___aomod@dividend+2)^0,w,c
  4574  00B8' 5000'              	movf	(___aomod@divisor+3)^0,w,c
  4575  00BA' 5800'              	subwfb	(___aomod@dividend+3)^0,w,c
  4576  00BC' 5000'              	movf	(___aomod@divisor+4)^0,w,c
  4577  00BE' 5800'              	subwfb	(___aomod@dividend+4)^0,w,c
  4578  00C0' 5000'              	movf	(___aomod@divisor+5)^0,w,c
  4579  00C2' 5800'              	subwfb	(___aomod@dividend+5)^0,w,c
  4580  00C4' 5000'              	movf	(___aomod@divisor+6)^0,w,c
  4581  00C6' 5800'              	subwfb	(___aomod@dividend+6)^0,w,c
  4582  00C8' 5000'              	movf	(___aomod@divisor+7)^0,w,c
  4583  00CA' 5800'              	subwfb	(___aomod@dividend+7)^0,w,c
  4584  00CC' A0D8               	btfss	status,0,c
  4585  00CE' EF00' F000'        	goto	u2941
  4586  00D2' EF00' F000'        	goto	u2940
  4587  00D6'                    u2941:
  4588  00D6' EF00' F000'        	goto	l2931
  4589  00DA'                    u2940:
  4590  00DA' 5000'              	movf	___aomod@divisor^0,w,c
  4591  00DC' 5E00'              	subwf	___aomod@dividend^0,f,c
  4592  00DE' 5000'              	movf	(___aomod@divisor+1)^0,w,c
  4593  00E0' 5A00'              	subwfb	(___aomod@dividend+1)^0,f,c
  4594  00E2' 5000'              	movf	(___aomod@divisor+2)^0,w,c
  4595  00E4' 5A00'              	subwfb	(___aomod@dividend+2)^0,f,c
  4596  00E6' 5000'              	movf	(___aomod@divisor+3)^0,w,c
  4597  00E8' 5A00'              	subwfb	(___aomod@dividend+3)^0,f,c
  4598  00EA' 5000'              	movf	(___aomod@divisor+4)^0,w,c
  4599  00EC' 5A00'              	subwfb	(___aomod@dividend+4)^0,f,c
  4600  00EE' 5000'              	movf	(___aomod@divisor+5)^0,w,c
  4601  00F0' 5A00'              	subwfb	(___aomod@dividend+5)^0,f,c
  4602  00F2' 5000'              	movf	(___aomod@divisor+6)^0,w,c
  4603  00F4' 5A00'              	subwfb	(___aomod@dividend+6)^0,f,c
  4604  00F6' 5000'              	movf	(___aomod@divisor+7)^0,w,c
  4605  00F8' 5A00'              	subwfb	(___aomod@dividend+7)^0,f,c
  4606  00FA'                    l2931:
  4607  00FA' 90D8               	bcf	status,0,c
  4608  00FC' 3200'              	rrcf	(___aomod@divisor+7)^0,f,c
  4609  00FE' 3200'              	rrcf	(___aomod@divisor+6)^0,f,c
  4610  0100' 3200'              	rrcf	(___aomod@divisor+5)^0,f,c
  4611  0102' 3200'              	rrcf	(___aomod@divisor+4)^0,f,c
  4612  0104' 3200'              	rrcf	(___aomod@divisor+3)^0,f,c
  4613  0106' 3200'              	rrcf	(___aomod@divisor+2)^0,f,c
  4614  0108' 3200'              	rrcf	(___aomod@divisor+1)^0,f,c
  4615  010A' 3200'              	rrcf	___aomod@divisor^0,f,c
  4616  010C' 2E00'              	decfsz	___aomod@counter^0,f,c
  4617  010E' EF00' F000'        	goto	l2927
  4618  0112'                    l2935:
  4619  0112' 5000'              	movf	___aomod@sign^0,w,c
  4620  0114' B4D8               	btfsc	status,2,c
  4621  0116' EF00' F000'        	goto	u2951
  4622  011A' EF00' F000'        	goto	u2950
  4623  011E'                    u2951:
  4624  011E' EF00' F000'        	goto	l2939
  4625  0122'                    u2950:
  4626  0122' 1E00'              	comf	(___aomod@dividend+7)^0,f,c
  4627  0124' 1E00'              	comf	(___aomod@dividend+6)^0,f,c
  4628  0126' 1E00'              	comf	(___aomod@dividend+5)^0,f,c
  4629  0128' 1E00'              	comf	(___aomod@dividend+4)^0,f,c
  4630  012A' 1E00'              	comf	(___aomod@dividend+3)^0,f,c
  4631  012C' 1E00'              	comf	(___aomod@dividend+2)^0,f,c
  4632  012E' 1E00'              	comf	(___aomod@dividend+1)^0,f,c
  4633  0130' 6C00'              	negf	___aomod@dividend^0,c
  4634  0132' 0E00               	movlw	0
  4635  0134' 2200'              	addwfc	(___aomod@dividend+1)^0,f,c
  4636  0136' 2200'              	addwfc	(___aomod@dividend+2)^0,f,c
  4637  0138' 2200'              	addwfc	(___aomod@dividend+3)^0,f,c
  4638  013A' 2200'              	addwfc	(___aomod@dividend+4)^0,f,c
  4639  013C' 2200'              	addwfc	(___aomod@dividend+5)^0,f,c
  4640  013E' 2200'              	addwfc	(___aomod@dividend+6)^0,f,c
  4641  0140' 2200'              	addwfc	(___aomod@dividend+7)^0,f,c
  4642  0142'                    l2939:
  4643  0142' C003' F003'        	movff	___aomod@dividend,?___aomod
  4644  0146' C004' F004'        	movff	___aomod@dividend+1,?___aomod+1
  4645  014A' C005' F005'        	movff	___aomod@dividend+2,?___aomod+2
  4646  014E' C006' F006'        	movff	___aomod@dividend+3,?___aomod+3
  4647  0152' C007' F007'        	movff	___aomod@dividend+4,?___aomod+4
  4648  0156' C008' F008'        	movff	___aomod@dividend+5,?___aomod+5
  4649  015A' C009' F009'        	movff	___aomod@dividend+6,?___aomod+6
  4650  015E' C00A' F00A'        	movff	___aomod@dividend+7,?___aomod+7
  4651  0162' 0012               	return		;funcret
  4652  0164'                    __end_of___aomod:
  4653                           	callstack 0
  4654                           
  4655 ;; *************** function ___aodiv *****************
  4656 ;; Defined at:
  4657 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\aodiv.c"
  4658 ;; Parameters:    Size  Location     Type
  4659 ;;  dividend        8    3[COMRAM] long long 
  4660 ;;  divisor         8   11[COMRAM] long long 
  4661 ;; Auto vars:     Size  Location     Type
  4662 ;;  quotient        8   21[COMRAM] long long 
  4663 ;;  sign            1   20[COMRAM] unsigned char 
  4664 ;;  counter         1   19[COMRAM] unsigned char 
  4665 ;; Return value:  Size  Location     Type
  4666 ;;                  8    3[COMRAM] long long 
  4667 ;; Registers used:
  4668 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4669 ;; Tracked objects:
  4670 ;;		On entry : 0/0
  4671 ;;		On exit  : 0/0
  4672 ;;		Unchanged: 0/0
  4673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4674 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4675 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4677 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4678 ;;Total ram usage:       26 bytes
  4679 ;; Hardware stack levels used: 1
  4680 ;; Hardware stack levels required when called: 2
  4681 ;; This function calls:
  4682 ;;		Nothing
  4683 ;; This function is called by:
  4684 ;;		_dtoa
  4685 ;; This function uses a non-reentrant model
  4686 ;;
  4687                           
  4688                           	psect	text25
  4689  0000'                    __ptext25:
  4690                           	callstack 0
  4691  0000'                    ___aodiv:
  4692                           	callstack 23
  4693  0000' 0E00               	movlw	0
  4694  0002' 6E00'              	movwf	___aodiv@sign^0,c
  4695  0004' BE00'              	btfsc	(___aodiv@divisor+7)^0,7,c
  4696  0006' EF00' F000'        	goto	u2830
  4697  000A' EF00' F000'        	goto	u2831
  4698  000E'                    u2831:
  4699  000E' EF00' F000'        	goto	l2871
  4700  0012'                    u2830:
  4701  0012' 1E00'              	comf	(___aodiv@divisor+7)^0,f,c
  4702  0014' 1E00'              	comf	(___aodiv@divisor+6)^0,f,c
  4703  0016' 1E00'              	comf	(___aodiv@divisor+5)^0,f,c
  4704  0018' 1E00'              	comf	(___aodiv@divisor+4)^0,f,c
  4705  001A' 1E00'              	comf	(___aodiv@divisor+3)^0,f,c
  4706  001C' 1E00'              	comf	(___aodiv@divisor+2)^0,f,c
  4707  001E' 1E00'              	comf	(___aodiv@divisor+1)^0,f,c
  4708  0020' 6C00'              	negf	___aodiv@divisor^0,c
  4709  0022' 0E00               	movlw	0
  4710  0024' 2200'              	addwfc	(___aodiv@divisor+1)^0,f,c
  4711  0026' 2200'              	addwfc	(___aodiv@divisor+2)^0,f,c
  4712  0028' 2200'              	addwfc	(___aodiv@divisor+3)^0,f,c
  4713  002A' 2200'              	addwfc	(___aodiv@divisor+4)^0,f,c
  4714  002C' 2200'              	addwfc	(___aodiv@divisor+5)^0,f,c
  4715  002E' 2200'              	addwfc	(___aodiv@divisor+6)^0,f,c
  4716  0030' 2200'              	addwfc	(___aodiv@divisor+7)^0,f,c
  4717  0032' 0E01               	movlw	1
  4718  0034' 6E00'              	movwf	___aodiv@sign^0,c
  4719  0036'                    l2871:
  4720  0036' BE00'              	btfsc	(___aodiv@dividend+7)^0,7,c
  4721  0038' EF00' F000'        	goto	u2840
  4722  003C' EF00' F000'        	goto	u2841
  4723  0040'                    u2841:
  4724  0040' EF00' F000'        	goto	l2877
  4725  0044'                    u2840:
  4726  0044' 1E00'              	comf	(___aodiv@dividend+7)^0,f,c
  4727  0046' 1E00'              	comf	(___aodiv@dividend+6)^0,f,c
  4728  0048' 1E00'              	comf	(___aodiv@dividend+5)^0,f,c
  4729  004A' 1E00'              	comf	(___aodiv@dividend+4)^0,f,c
  4730  004C' 1E00'              	comf	(___aodiv@dividend+3)^0,f,c
  4731  004E' 1E00'              	comf	(___aodiv@dividend+2)^0,f,c
  4732  0050' 1E00'              	comf	(___aodiv@dividend+1)^0,f,c
  4733  0052' 6C00'              	negf	___aodiv@dividend^0,c
  4734  0054' 0E00               	movlw	0
  4735  0056' 2200'              	addwfc	(___aodiv@dividend+1)^0,f,c
  4736  0058' 2200'              	addwfc	(___aodiv@dividend+2)^0,f,c
  4737  005A' 2200'              	addwfc	(___aodiv@dividend+3)^0,f,c
  4738  005C' 2200'              	addwfc	(___aodiv@dividend+4)^0,f,c
  4739  005E' 2200'              	addwfc	(___aodiv@dividend+5)^0,f,c
  4740  0060' 2200'              	addwfc	(___aodiv@dividend+6)^0,f,c
  4741  0062' 2200'              	addwfc	(___aodiv@dividend+7)^0,f,c
  4742  0064' 0E01               	movlw	1
  4743  0066' 1A00'              	xorwf	___aodiv@sign^0,f,c
  4744  0068'                    l2877:
  4745  0068' EE20' F000'        	lfsr	2,___aodiv@quotient
  4746  006C' 0E07               	movlw	7
  4747  006E'                    u2851:
  4748  006E' 6ADE               	clrf	postinc2,c
  4749  0070' 06E8               	decf	wreg,f,c
  4750  0072' E2FD               	bc	u2851
  4751  0074' 5000'              	movf	___aodiv@divisor^0,w,c
  4752  0076' 1000'              	iorwf	(___aodiv@divisor+1)^0,w,c
  4753  0078' 1000'              	iorwf	(___aodiv@divisor+2)^0,w,c
  4754  007A' 1000'              	iorwf	(___aodiv@divisor+3)^0,w,c
  4755  007C' 1000'              	iorwf	(___aodiv@divisor+4)^0,w,c
  4756  007E' 1000'              	iorwf	(___aodiv@divisor+5)^0,w,c
  4757  0080' 1000'              	iorwf	(___aodiv@divisor+6)^0,w,c
  4758  0082' 1000'              	iorwf	(___aodiv@divisor+7)^0,w,c
  4759  0084' B4D8               	btfsc	status,2,c
  4760  0086' EF00' F000'        	goto	u2861
  4761  008A' EF00' F000'        	goto	u2860
  4762  008E'                    u2861:
  4763  008E' EF00' F000'        	goto	l2899
  4764  0092'                    u2860:
  4765  0092' 0E01               	movlw	1
  4766  0094' 6E00'              	movwf	___aodiv@counter^0,c
  4767  0096' EF00' F000'        	goto	l2885
  4768  009A'                    l2883:
  4769  009A' 90D8               	bcf	status,0,c
  4770  009C' 3600'              	rlcf	___aodiv@divisor^0,f,c
  4771  009E' 3600'              	rlcf	(___aodiv@divisor+1)^0,f,c
  4772  00A0' 3600'              	rlcf	(___aodiv@divisor+2)^0,f,c
  4773  00A2' 3600'              	rlcf	(___aodiv@divisor+3)^0,f,c
  4774  00A4' 3600'              	rlcf	(___aodiv@divisor+4)^0,f,c
  4775  00A6' 3600'              	rlcf	(___aodiv@divisor+5)^0,f,c
  4776  00A8' 3600'              	rlcf	(___aodiv@divisor+6)^0,f,c
  4777  00AA' 3600'              	rlcf	(___aodiv@divisor+7)^0,f,c
  4778  00AC' 2A00'              	incf	___aodiv@counter^0,f,c
  4779  00AE'                    l2885:
  4780  00AE' AE00'              	btfss	(___aodiv@divisor+7)^0,7,c
  4781  00B0' EF00' F000'        	goto	u2871
  4782  00B4' EF00' F000'        	goto	u2870
  4783  00B8'                    u2871:
  4784  00B8' EF00' F000'        	goto	l2883
  4785  00BC'                    u2870:
  4786  00BC'                    l2887:
  4787  00BC' 90D8               	bcf	status,0,c
  4788  00BE' 3600'              	rlcf	___aodiv@quotient^0,f,c
  4789  00C0' 3600'              	rlcf	(___aodiv@quotient+1)^0,f,c
  4790  00C2' 3600'              	rlcf	(___aodiv@quotient+2)^0,f,c
  4791  00C4' 3600'              	rlcf	(___aodiv@quotient+3)^0,f,c
  4792  00C6' 3600'              	rlcf	(___aodiv@quotient+4)^0,f,c
  4793  00C8' 3600'              	rlcf	(___aodiv@quotient+5)^0,f,c
  4794  00CA' 3600'              	rlcf	(___aodiv@quotient+6)^0,f,c
  4795  00CC' 3600'              	rlcf	(___aodiv@quotient+7)^0,f,c
  4796  00CE' 5000'              	movf	___aodiv@divisor^0,w,c
  4797  00D0' 5C00'              	subwf	___aodiv@dividend^0,w,c
  4798  00D2' 5000'              	movf	(___aodiv@divisor+1)^0,w,c
  4799  00D4' 5800'              	subwfb	(___aodiv@dividend+1)^0,w,c
  4800  00D6' 5000'              	movf	(___aodiv@divisor+2)^0,w,c
  4801  00D8' 5800'              	subwfb	(___aodiv@dividend+2)^0,w,c
  4802  00DA' 5000'              	movf	(___aodiv@divisor+3)^0,w,c
  4803  00DC' 5800'              	subwfb	(___aodiv@dividend+3)^0,w,c
  4804  00DE' 5000'              	movf	(___aodiv@divisor+4)^0,w,c
  4805  00E0' 5800'              	subwfb	(___aodiv@dividend+4)^0,w,c
  4806  00E2' 5000'              	movf	(___aodiv@divisor+5)^0,w,c
  4807  00E4' 5800'              	subwfb	(___aodiv@dividend+5)^0,w,c
  4808  00E6' 5000'              	movf	(___aodiv@divisor+6)^0,w,c
  4809  00E8' 5800'              	subwfb	(___aodiv@dividend+6)^0,w,c
  4810  00EA' 5000'              	movf	(___aodiv@divisor+7)^0,w,c
  4811  00EC' 5800'              	subwfb	(___aodiv@dividend+7)^0,w,c
  4812  00EE' A0D8               	btfss	status,0,c
  4813  00F0' EF00' F000'        	goto	u2881
  4814  00F4' EF00' F000'        	goto	u2880
  4815  00F8'                    u2881:
  4816  00F8' EF00' F000'        	goto	l2895
  4817  00FC'                    u2880:
  4818  00FC' 5000'              	movf	___aodiv@divisor^0,w,c
  4819  00FE' 5E00'              	subwf	___aodiv@dividend^0,f,c
  4820  0100' 5000'              	movf	(___aodiv@divisor+1)^0,w,c
  4821  0102' 5A00'              	subwfb	(___aodiv@dividend+1)^0,f,c
  4822  0104' 5000'              	movf	(___aodiv@divisor+2)^0,w,c
  4823  0106' 5A00'              	subwfb	(___aodiv@dividend+2)^0,f,c
  4824  0108' 5000'              	movf	(___aodiv@divisor+3)^0,w,c
  4825  010A' 5A00'              	subwfb	(___aodiv@dividend+3)^0,f,c
  4826  010C' 5000'              	movf	(___aodiv@divisor+4)^0,w,c
  4827  010E' 5A00'              	subwfb	(___aodiv@dividend+4)^0,f,c
  4828  0110' 5000'              	movf	(___aodiv@divisor+5)^0,w,c
  4829  0112' 5A00'              	subwfb	(___aodiv@dividend+5)^0,f,c
  4830  0114' 5000'              	movf	(___aodiv@divisor+6)^0,w,c
  4831  0116' 5A00'              	subwfb	(___aodiv@dividend+6)^0,f,c
  4832  0118' 5000'              	movf	(___aodiv@divisor+7)^0,w,c
  4833  011A' 5A00'              	subwfb	(___aodiv@dividend+7)^0,f,c
  4834  011C' 8000'              	bsf	___aodiv@quotient^0,0,c
  4835  011E'                    l2895:
  4836  011E' 90D8               	bcf	status,0,c
  4837  0120' 3200'              	rrcf	(___aodiv@divisor+7)^0,f,c
  4838  0122' 3200'              	rrcf	(___aodiv@divisor+6)^0,f,c
  4839  0124' 3200'              	rrcf	(___aodiv@divisor+5)^0,f,c
  4840  0126' 3200'              	rrcf	(___aodiv@divisor+4)^0,f,c
  4841  0128' 3200'              	rrcf	(___aodiv@divisor+3)^0,f,c
  4842  012A' 3200'              	rrcf	(___aodiv@divisor+2)^0,f,c
  4843  012C' 3200'              	rrcf	(___aodiv@divisor+1)^0,f,c
  4844  012E' 3200'              	rrcf	___aodiv@divisor^0,f,c
  4845  0130' 2E00'              	decfsz	___aodiv@counter^0,f,c
  4846  0132' EF00' F000'        	goto	l2887
  4847  0136'                    l2899:
  4848  0136' 5000'              	movf	___aodiv@sign^0,w,c
  4849  0138' B4D8               	btfsc	status,2,c
  4850  013A' EF00' F000'        	goto	u2891
  4851  013E' EF00' F000'        	goto	u2890
  4852  0142'                    u2891:
  4853  0142' EF00' F000'        	goto	l2903
  4854  0146'                    u2890:
  4855  0146' 1E00'              	comf	(___aodiv@quotient+7)^0,f,c
  4856  0148' 1E00'              	comf	(___aodiv@quotient+6)^0,f,c
  4857  014A' 1E00'              	comf	(___aodiv@quotient+5)^0,f,c
  4858  014C' 1E00'              	comf	(___aodiv@quotient+4)^0,f,c
  4859  014E' 1E00'              	comf	(___aodiv@quotient+3)^0,f,c
  4860  0150' 1E00'              	comf	(___aodiv@quotient+2)^0,f,c
  4861  0152' 1E00'              	comf	(___aodiv@quotient+1)^0,f,c
  4862  0154' 6C00'              	negf	___aodiv@quotient^0,c
  4863  0156' 0E00               	movlw	0
  4864  0158' 2200'              	addwfc	(___aodiv@quotient+1)^0,f,c
  4865  015A' 2200'              	addwfc	(___aodiv@quotient+2)^0,f,c
  4866  015C' 2200'              	addwfc	(___aodiv@quotient+3)^0,f,c
  4867  015E' 2200'              	addwfc	(___aodiv@quotient+4)^0,f,c
  4868  0160' 2200'              	addwfc	(___aodiv@quotient+5)^0,f,c
  4869  0162' 2200'              	addwfc	(___aodiv@quotient+6)^0,f,c
  4870  0164' 2200'              	addwfc	(___aodiv@quotient+7)^0,f,c
  4871  0166'                    l2903:
  4872  0166' C015' F003'        	movff	___aodiv@quotient,?___aodiv
  4873  016A' C016' F004'        	movff	___aodiv@quotient+1,?___aodiv+1
  4874  016E' C017' F005'        	movff	___aodiv@quotient+2,?___aodiv+2
  4875  0172' C018' F006'        	movff	___aodiv@quotient+3,?___aodiv+3
  4876  0176' C019' F007'        	movff	___aodiv@quotient+4,?___aodiv+4
  4877  017A' C01A' F008'        	movff	___aodiv@quotient+5,?___aodiv+5
  4878  017E' C01B' F009'        	movff	___aodiv@quotient+6,?___aodiv+6
  4879  0182' C01C' F00A'        	movff	___aodiv@quotient+7,?___aodiv+7
  4880  0186' 0012               	return		;funcret
  4881  0188'                    __end_of___aodiv:
  4882                           	callstack 0
  4883                           
  4884 ;; *************** function _atoi *****************
  4885 ;; Defined at:
  4886 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\atoi.c"
  4887 ;; Parameters:    Size  Location     Type
  4888 ;;  s               2   10[COMRAM] PTR const unsigned char 
  4889 ;;		 -> STR_2(24), STR_1(20), 
  4890 ;; Auto vars:     Size  Location     Type
  4891 ;;  n               2   23[COMRAM] int 
  4892 ;;  neg             2   16[COMRAM] int 
  4893 ;; Return value:  Size  Location     Type
  4894 ;;                  2   10[COMRAM] int 
  4895 ;; Registers used:
  4896 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4897 ;; Tracked objects:
  4898 ;;		On entry : 0/0
  4899 ;;		On exit  : 0/0
  4900 ;;		Unchanged: 0/0
  4901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4902 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4903 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4904 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4905 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4906 ;;Total ram usage:       15 bytes
  4907 ;; Hardware stack levels used: 1
  4908 ;; Hardware stack levels required when called: 3
  4909 ;; This function calls:
  4910 ;;		___wmul
  4911 ;;		_isdigit
  4912 ;;		_isspace
  4913 ;; This function is called by:
  4914 ;;		_vfpfcnvrt
  4915 ;; This function uses a non-reentrant model
  4916 ;;
  4917                           
  4918                           	psect	text26
  4919  0000'                    __ptext26:
  4920                           	callstack 0
  4921  0000'                    _atoi:
  4922                           	callstack 23
  4923  0000' 0E00               	movlw	0
  4924  0002' 6E00'              	movwf	(atoi@n+1)^0,c
  4925  0004' 0E00               	movlw	0
  4926  0006' 6E00'              	movwf	atoi@n^0,c
  4927  0008' 0E00               	movlw	0
  4928  000A' 6E00'              	movwf	(atoi@neg+1)^0,c
  4929  000C' 0E00               	movlw	0
  4930  000E' 6E00'              	movwf	atoi@neg^0,c
  4931  0010' EF00' F000'        	goto	l3051
  4932  0014'                    l3049:
  4933  0014' 4A00'              	infsnz	atoi@s^0,f,c
  4934  0016' 2A00'              	incf	(atoi@s+1)^0,f,c
  4935  0018'                    l3051:
  4936  0018' 0E01               	movlw	1
  4937  001A' 6E00'              	movwf	_atoi$1948^0,c
  4938  001C' C00A' FFF6         	movff	atoi@s,tblptrl
  4939  0020' C00B' FFF7         	movff	atoi@s+1,tblptrh
  4940  0024'                    	if	0	;tblptru may be non-zero
  4941  0024'                    	endif
  4942  0024'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4943  0024' 0E00'              	movlw	low (__mediumconst shr (0+16))
  4944  0026' 6EF8               	movwf	tblptru,c
  4945  0028'                    	endif
  4946  0028' 0008               	tblrd		*
  4947  002A' 50F5               	movf	tablat,w,c
  4948  002C' 0A20               	xorlw	32
  4949  002E' B4D8               	btfsc	status,2,c
  4950  0030' EF00' F000'        	goto	u3201
  4951  0034' EF00' F000'        	goto	u3200
  4952  0038'                    u3201:
  4953  0038' EF00' F000'        	goto	l3059
  4954  003C'                    u3200:
  4955  003C' 0EF7               	movlw	247
  4956  003E' 6E00'              	movwf	??_atoi^0,c
  4957  0040' 0EFF               	movlw	255
  4958  0042' 6E00'              	movwf	(??_atoi+1)^0,c
  4959  0044' C00A' FFF6         	movff	atoi@s,tblptrl
  4960  0048' C00B' FFF7         	movff	atoi@s+1,tblptrh
  4961  004C'                    	if	0	;tblptru may be non-zero
  4962  004C'                    	endif
  4963  004C'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4964  004C' 0E00'              	movlw	low (__mediumconst shr (0+16))
  4965  004E' 6EF8               	movwf	tblptru,c
  4966  0050'                    	endif
  4967  0050' 0008               	tblrd		*
  4968  0052' 50F5               	movf	tablat,w,c
  4969  0054' 6E00'              	movwf	(??_atoi+2)^0,c
  4970  0056' 6A00'              	clrf	(??_atoi+3)^0,c
  4971  0058' 5000'              	movf	??_atoi^0,w,c
  4972  005A' 2600'              	addwf	(??_atoi+2)^0,f,c
  4973  005C' 5000'              	movf	(??_atoi+1)^0,w,c
  4974  005E' 2200'              	addwfc	(??_atoi+3)^0,f,c
  4975  0060' 5000'              	movf	(??_atoi+3)^0,w,c
  4976  0062' E109               	bnz	u3210
  4977  0064' 0E05               	movlw	5
  4978  0066' 5C00'              	subwf	(??_atoi+2)^0,w,c
  4979  0068' A0D8               	btfss	status,0,c
  4980  006A' EF00' F000'        	goto	u3211
  4981  006E' EF00' F000'        	goto	u3210
  4982  0072'                    u3211:
  4983  0072' EF00' F000'        	goto	l3059
  4984  0076'                    u3210:
  4985  0076' 0E00               	movlw	0
  4986  0078' 6E00'              	movwf	_atoi$1948^0,c
  4987  007A'                    l3059:
  4988  007A' C016' F012'        	movff	_atoi$1948,_atoi$1947
  4989  007E' 6A00'              	clrf	(_atoi$1947+1)^0,c
  4990  0080' 5000'              	movf	_atoi$1947^0,w,c
  4991  0082' 1000'              	iorwf	(_atoi$1947+1)^0,w,c
  4992  0084' A4D8               	btfss	status,2,c
  4993  0086' EF00' F000'        	goto	u3221
  4994  008A' EF00' F000'        	goto	u3220
  4995  008E'                    u3221:
  4996  008E' EF00' F000'        	goto	l3049
  4997  0092'                    u3220:
  4998  0092' EF00' F000'        	goto	l3069
  4999  0096'                    l3065:
  5000  0096' 0E00               	movlw	0
  5001  0098' 6E00'              	movwf	(atoi@neg+1)^0,c
  5002  009A' 0E01               	movlw	1
  5003  009C' 6E00'              	movwf	atoi@neg^0,c
  5004  009E'                    l3067:
  5005  009E' 4A00'              	infsnz	atoi@s^0,f,c
  5006  00A0' 2A00'              	incf	(atoi@s+1)^0,f,c
  5007  00A2' EF00' F000'        	goto	l3075
  5008  00A6'                    l3069:
  5009  00A6' C00A' FFF6         	movff	atoi@s,tblptrl
  5010  00AA' C00B' FFF7         	movff	atoi@s+1,tblptrh
  5011  00AE'                    	if	0	;tblptru may be non-zero
  5012  00AE'                    	endif
  5013  00AE'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  5014  00AE' 0E00'              	movlw	low (__mediumconst shr (0+16))
  5015  00B0' 6EF8               	movwf	tblptru,c
  5016  00B2'                    	endif
  5017  00B2' 0008               	tblrd		*
  5018  00B4' 50F5               	movf	tablat,w,c
  5019  00B6' 6E00'              	movwf	??_atoi^0,c
  5020  00B8' 6A00'              	clrf	(??_atoi+1)^0,c
  5021                           
  5022                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5023                           ; Switch size 1, requested type "simple"
  5024                           ; Number of cases is 1, Range of values is 0 to 0
  5025                           ; switch strategies available:
  5026                           ; Name         Instructions Cycles
  5027                           ; simple_byte            4     3 (average)
  5028                           ;	Chosen strategy is simple_byte
  5029  00BA' 5000'              	movf	(??_atoi+1)^0,w,c
  5030  00BC' 0A00               	xorlw	0	; case 0
  5031  00BE' B4D8               	btfsc	status,2,c
  5032  00C0' EF00' F000'        	goto	l3297
  5033  00C4' EF00' F000'        	goto	l3075
  5034  00C8'                    l3297:
  5035                           
  5036                           ; Switch size 1, requested type "simple"
  5037                           ; Number of cases is 2, Range of values is 43 to 45
  5038                           ; switch strategies available:
  5039                           ; Name         Instructions Cycles
  5040                           ; simple_byte            7     4 (average)
  5041                           ;	Chosen strategy is simple_byte
  5042  00C8' 5000'              	movf	??_atoi^0,w,c
  5043  00CA' 0A2B               	xorlw	43	; case 43
  5044  00CC' B4D8               	btfsc	status,2,c
  5045  00CE' EF00' F000'        	goto	l3067
  5046  00D2' 0A06               	xorlw	6	; case 45
  5047  00D4' B4D8               	btfsc	status,2,c
  5048  00D6' EF00' F000'        	goto	l3065
  5049  00DA' EF00' F000'        	goto	l3075
  5050  00DE'                    l3071:
  5051  00DE' C017' F003'        	movff	atoi@n,___wmul@multiplier
  5052  00E2' C018' F004'        	movff	atoi@n+1,___wmul@multiplier+1
  5053  00E6' 0E00               	movlw	0
  5054  00E8' 6E00'              	movwf	(___wmul@multiplicand+1)^0,c
  5055  00EA' 0E0A               	movlw	10
  5056  00EC' 6E00'              	movwf	___wmul@multiplicand^0,c
  5057  00EE' EC00' F000'        	call	___wmul	;wreg free
  5058  00F2' C00A' FFF6         	movff	atoi@s,tblptrl
  5059  00F6' C00B' FFF7         	movff	atoi@s+1,tblptrh
  5060  00FA'                    	if	0	;tblptru may be non-zero
  5061  00FA'                    	endif
  5062  00FA'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  5063  00FA' 0E00'              	movlw	low (__mediumconst shr (0+16))
  5064  00FC' 6EF8               	movwf	tblptru,c
  5065  00FE'                    	endif
  5066  00FE' 0008               	tblrd		*
  5067  0100' 50F5               	movf	tablat,w,c
  5068  0102' 5E00'              	subwf	?___wmul^0,f,c
  5069  0104' 0E00               	movlw	0
  5070  0106' 5A00'              	subwfb	(?___wmul+1)^0,f,c
  5071  0108' 0E30               	movlw	48
  5072  010A' 2400'              	addwf	?___wmul^0,w,c
  5073  010C' 6E00'              	movwf	atoi@n^0,c
  5074  010E' 0E00               	movlw	0
  5075  0110' 2000'              	addwfc	(?___wmul+1)^0,w,c
  5076  0112' 6E00'              	movwf	(atoi@n+1)^0,c
  5077  0114' EF00' F000'        	goto	l3067
  5078  0118'                    l3075:
  5079  0118' 0ED0               	movlw	208
  5080  011A' 6E00'              	movwf	??_atoi^0,c
  5081  011C' 0EFF               	movlw	255
  5082  011E' 6E00'              	movwf	(??_atoi+1)^0,c
  5083  0120' C00A' FFF6         	movff	atoi@s,tblptrl
  5084  0124' C00B' FFF7         	movff	atoi@s+1,tblptrh
  5085  0128'                    	if	0	;tblptru may be non-zero
  5086  0128'                    	endif
  5087  0128'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  5088  0128' 0E00'              	movlw	low (__mediumconst shr (0+16))
  5089  012A' 6EF8               	movwf	tblptru,c
  5090  012C'                    	endif
  5091  012C' 0008               	tblrd		*
  5092  012E' 50F5               	movf	tablat,w,c
  5093  0130' 6E00'              	movwf	(??_atoi+2)^0,c
  5094  0132' 6A00'              	clrf	(??_atoi+3)^0,c
  5095  0134' 5000'              	movf	??_atoi^0,w,c
  5096  0136' 2600'              	addwf	(??_atoi+2)^0,f,c
  5097  0138' 5000'              	movf	(??_atoi+1)^0,w,c
  5098  013A' 2200'              	addwfc	(??_atoi+3)^0,f,c
  5099  013C' 5000'              	movf	(??_atoi+3)^0,w,c
  5100  013E' E10A               	bnz	u3230
  5101  0140' 0E0A               	movlw	10
  5102  0142' 5C00'              	subwf	(??_atoi+2)^0,w,c
  5103  0144' A0D8               	btfss	status,0,c
  5104  0146' EF00' F000'        	goto	u3231
  5105  014A' EF00' F000'        	goto	u3230
  5106  014E'                    u3231:
  5107  014E' 0E01               	movlw	1
  5108  0150' EF00' F000'        	goto	u3240
  5109  0154'                    u3230:
  5110  0154' 0E00               	movlw	0
  5111  0156'                    u3240:
  5112  0156' 6E00'              	movwf	_atoi$1949^0,c
  5113  0158' 6A00'              	clrf	(_atoi$1949+1)^0,c
  5114  015A' 5000'              	movf	_atoi$1949^0,w,c
  5115  015C' 1000'              	iorwf	(_atoi$1949+1)^0,w,c
  5116  015E' A4D8               	btfss	status,2,c
  5117  0160' EF00' F000'        	goto	u3251
  5118  0164' EF00' F000'        	goto	u3250
  5119  0168'                    u3251:
  5120  0168' EF00' F000'        	goto	l3071
  5121  016C'                    u3250:
  5122  016C' 5000'              	movf	atoi@neg^0,w,c
  5123  016E' 1000'              	iorwf	(atoi@neg+1)^0,w,c
  5124  0170' A4D8               	btfss	status,2,c
  5125  0172' EF00' F000'        	goto	u3261
  5126  0176' EF00' F000'        	goto	u3260
  5127  017A'                    u3261:
  5128  017A' EF00' F000'        	goto	l1097
  5129  017E'                    u3260:
  5130  017E' C017' F00C'        	movff	atoi@n,??_atoi
  5131  0182' C018' F00D'        	movff	atoi@n+1,??_atoi+1
  5132  0186' 1E00'              	comf	??_atoi^0,f,c
  5133  0188' 1E00'              	comf	(??_atoi+1)^0,f,c
  5134  018A' 4A00'              	infsnz	??_atoi^0,f,c
  5135  018C' 2A00'              	incf	(??_atoi+1)^0,f,c
  5136  018E' C00C' F00A'        	movff	??_atoi,?_atoi
  5137  0192' C00D' F00B'        	movff	??_atoi+1,?_atoi+1
  5138  0196' EF00' F000'        	goto	l1100
  5139  019A'                    l1097:
  5140  019A' C017' F00A'        	movff	atoi@n,?_atoi
  5141  019E' C018' F00B'        	movff	atoi@n+1,?_atoi+1
  5142  01A2'                    l1100:
  5143  01A2' 0012               	return		;funcret
  5144  01A4'                    __end_of_atoi:
  5145                           	callstack 0
  5146                           
  5147 ;; *************** function _isspace *****************
  5148 ;; Defined at:
  5149 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\isspace.c"
  5150 ;; Parameters:    Size  Location     Type
  5151 ;;  c               2    3[COMRAM] int 
  5152 ;; Auto vars:     Size  Location     Type
  5153 ;;		None
  5154 ;; Return value:  Size  Location     Type
  5155 ;;                  2    3[COMRAM] int 
  5156 ;; Registers used:
  5157 ;;		wreg, status,2, status,0
  5158 ;; Tracked objects:
  5159 ;;		On entry : 0/0
  5160 ;;		On exit  : 0/0
  5161 ;;		Unchanged: 0/0
  5162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5163 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5164 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5165 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5166 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5167 ;;Total ram usage:        7 bytes
  5168 ;; Hardware stack levels used: 1
  5169 ;; Hardware stack levels required when called: 2
  5170 ;; This function calls:
  5171 ;;		Nothing
  5172 ;; This function is called by:
  5173 ;;		_atoi
  5174 ;; This function uses a non-reentrant model
  5175 ;;
  5176                           
  5177                           	psect	text27
  5178  0000'                    __ptext27:
  5179                           	callstack 0
  5180  0000'                    _isspace:
  5181                           	callstack 23
  5182  0000' 0E01               	movlw	1
  5183  0002' 6E00'              	movwf	_isspace$1965^0,c
  5184  0004' 0E20               	movlw	32
  5185  0006' 1800'              	xorwf	isspace@c^0,w,c
  5186  0008' 1000'              	iorwf	(isspace@c+1)^0,w,c
  5187  000A' B4D8               	btfsc	status,2,c
  5188  000C' EF00' F000'        	goto	u3031
  5189  0010' EF00' F000'        	goto	u3030
  5190  0014'                    u3031:
  5191  0014' EF00' F000'        	goto	l2981
  5192  0018'                    u3030:
  5193  0018' 0EF7               	movlw	247
  5194  001A' 6E00'              	movwf	??_isspace^0,c
  5195  001C' 0EFF               	movlw	255
  5196  001E' 6E00'              	movwf	(??_isspace+1)^0,c
  5197  0020' C003' F007'        	movff	isspace@c,??_isspace+2
  5198  0024' C004' F008'        	movff	isspace@c+1,??_isspace+3
  5199  0028' 5000'              	movf	??_isspace^0,w,c
  5200  002A' 2600'              	addwf	(??_isspace+2)^0,f,c
  5201  002C' 5000'              	movf	(??_isspace+1)^0,w,c
  5202  002E' 2200'              	addwfc	(??_isspace+3)^0,f,c
  5203  0030' 5000'              	movf	(??_isspace+3)^0,w,c
  5204  0032' E109               	bnz	u3040
  5205  0034' 0E05               	movlw	5
  5206  0036' 5C00'              	subwf	(??_isspace+2)^0,w,c
  5207  0038' A0D8               	btfss	status,0,c
  5208  003A' EF00' F000'        	goto	u3041
  5209  003E' EF00' F000'        	goto	u3040
  5210  0042'                    u3041:
  5211  0042' EF00' F000'        	goto	l2981
  5212  0046'                    u3040:
  5213  0046' 0E00               	movlw	0
  5214  0048' 6E00'              	movwf	_isspace$1965^0,c
  5215  004A'                    l2981:
  5216  004A' C009' F003'        	movff	_isspace$1965,?_isspace
  5217  004E' 6A00'              	clrf	(?_isspace+1)^0,c
  5218  0050' 0012               	return		;funcret
  5219  0052'                    __end_of_isspace:
  5220                           	callstack 0
  5221                           
  5222 ;; *************** function _isdigit *****************
  5223 ;; Defined at:
  5224 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\isdigit.c"
  5225 ;; Parameters:    Size  Location     Type
  5226 ;;  c               2    3[COMRAM] int 
  5227 ;; Auto vars:     Size  Location     Type
  5228 ;;		None
  5229 ;; Return value:  Size  Location     Type
  5230 ;;                  2    3[COMRAM] int 
  5231 ;; Registers used:
  5232 ;;		wreg, status,2, status,0
  5233 ;; Tracked objects:
  5234 ;;		On entry : 0/0
  5235 ;;		On exit  : 0/0
  5236 ;;		Unchanged: 0/0
  5237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5238 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5240 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5241 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5242 ;;Total ram usage:        6 bytes
  5243 ;; Hardware stack levels used: 1
  5244 ;; Hardware stack levels required when called: 2
  5245 ;; This function calls:
  5246 ;;		Nothing
  5247 ;; This function is called by:
  5248 ;;		_vfpfcnvrt
  5249 ;;		_atoi
  5250 ;; This function uses a non-reentrant model
  5251 ;;
  5252                           
  5253                           	psect	text28
  5254  0000'                    __ptext28:
  5255                           	callstack 0
  5256  0000'                    _isdigit:
  5257                           	callstack 24
  5258  0000' 0ED0               	movlw	208
  5259  0002' 6E00'              	movwf	??_isdigit^0,c
  5260  0004' 0EFF               	movlw	255
  5261  0006' 6E00'              	movwf	(??_isdigit+1)^0,c
  5262  0008' C003' F007'        	movff	isdigit@c,??_isdigit+2
  5263  000C' C004' F008'        	movff	isdigit@c+1,??_isdigit+3
  5264  0010' 5000'              	movf	??_isdigit^0,w,c
  5265  0012' 2600'              	addwf	(??_isdigit+2)^0,f,c
  5266  0014' 5000'              	movf	(??_isdigit+1)^0,w,c
  5267  0016' 2200'              	addwfc	(??_isdigit+3)^0,f,c
  5268  0018' 5000'              	movf	(??_isdigit+3)^0,w,c
  5269  001A' E10A               	bnz	u3010
  5270  001C' 0E0A               	movlw	10
  5271  001E' 5C00'              	subwf	(??_isdigit+2)^0,w,c
  5272  0020' A0D8               	btfss	status,0,c
  5273  0022' EF00' F000'        	goto	u3011
  5274  0026' EF00' F000'        	goto	u3010
  5275  002A'                    u3011:
  5276  002A' 0E01               	movlw	1
  5277  002C' EF00' F000'        	goto	u3020
  5278  0030'                    u3010:
  5279  0030' 0E00               	movlw	0
  5280  0032'                    u3020:
  5281  0032' 6E00'              	movwf	?_isdigit^0,c
  5282  0034' 6A00'              	clrf	(?_isdigit+1)^0,c
  5283  0036' 0012               	return		;funcret
  5284  0038'                    __end_of_isdigit:
  5285                           	callstack 0
  5286                           
  5287 ;; *************** function ___wmul *****************
  5288 ;; Defined at:
  5289 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\Umul16.c"
  5290 ;; Parameters:    Size  Location     Type
  5291 ;;  multiplier      2    3[COMRAM] unsigned int 
  5292 ;;  multiplicand    2    5[COMRAM] unsigned int 
  5293 ;; Auto vars:     Size  Location     Type
  5294 ;;  product         2    7[COMRAM] unsigned int 
  5295 ;; Return value:  Size  Location     Type
  5296 ;;                  2    3[COMRAM] unsigned int 
  5297 ;; Registers used:
  5298 ;;		wreg, status,2, status,0, prodl, prodh
  5299 ;; Tracked objects:
  5300 ;;		On entry : 0/0
  5301 ;;		On exit  : 0/0
  5302 ;;		Unchanged: 0/0
  5303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5304 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5305 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5307 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5308 ;;Total ram usage:        6 bytes
  5309 ;; Hardware stack levels used: 1
  5310 ;; Hardware stack levels required when called: 2
  5311 ;; This function calls:
  5312 ;;		Nothing
  5313 ;; This function is called by:
  5314 ;;		_weekdaycheck
  5315 ;;		_atoi
  5316 ;; This function uses a non-reentrant model
  5317 ;;
  5318                           
  5319                           	psect	text29
  5320  0000'                    __ptext29:
  5321                           	callstack 0
  5322  0000'                    ___wmul:
  5323                           	callstack 27
  5324  0000' 5000'              	movf	___wmul@multiplier^0,w,c
  5325  0002' 0200'              	mulwf	___wmul@multiplicand^0,c
  5326  0004' CFF3 F007'         	movff	prodl,___wmul@product
  5327  0008' CFF4 F008'         	movff	prodh,___wmul@product+1
  5328  000C' 5000'              	movf	___wmul@multiplier^0,w,c
  5329  000E' 0200'              	mulwf	(___wmul@multiplicand+1)^0,c
  5330  0010' 50F3               	movf	243,w,c
  5331  0012' 2600'              	addwf	(___wmul@product+1)^0,f,c
  5332  0014' 5000'              	movf	(___wmul@multiplier+1)^0,w,c
  5333  0016' 0200'              	mulwf	___wmul@multiplicand^0,c
  5334  0018' 50F3               	movf	243,w,c
  5335  001A' 2600'              	addwf	(___wmul@product+1)^0,f,c
  5336  001C' C007' F003'        	movff	___wmul@product,?___wmul
  5337  0020' C008' F004'        	movff	___wmul@product+1,?___wmul+1
  5338  0024' 0012               	return		;funcret
  5339  0026'                    __end_of___wmul:
  5340                           	callstack 0
  5341                           
  5342 ;; *************** function _LCD_setline *****************
  5343 ;; Defined at:
  5344 ;;		line 95 in file "LCD.c"
  5345 ;; Parameters:    Size  Location     Type
  5346 ;;  line            1    wreg     unsigned char 
  5347 ;; Auto vars:     Size  Location     Type
  5348 ;;  line            1    6[COMRAM] unsigned char 
  5349 ;; Return value:  Size  Location     Type
  5350 ;;                  1    wreg      void 
  5351 ;; Registers used:
  5352 ;;		wreg, status,2, status,0, cstack
  5353 ;; Tracked objects:
  5354 ;;		On entry : 0/0
  5355 ;;		On exit  : 0/0
  5356 ;;		Unchanged: 0/0
  5357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5359 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5361 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5362 ;;Total ram usage:        1 bytes
  5363 ;; Hardware stack levels used: 1
  5364 ;; Hardware stack levels required when called: 5
  5365 ;; This function calls:
  5366 ;;		_LCD_sendbyte
  5367 ;; This function is called by:
  5368 ;;		_LCD_Disp
  5369 ;; This function uses a non-reentrant model
  5370 ;;
  5371                           
  5372                           	psect	text30
  5373  0000'                    __ptext30:
  5374                           	callstack 0
  5375  0000'                    _LCD_setline:
  5376                           	callstack 24
  5377                           
  5378                           ;incstack = 0
  5379                           ;LCD_setline@line stored from wreg
  5380  0000' 6E00'              	movwf	LCD_setline@line^0,c
  5381  0002'                    
  5382                           ;LCD.c: 95: void LCD_setline (char line);LCD.c: 96: {;LCD.c: 97:     if(line==1)
  5383  0002' 0400'              	decf	LCD_setline@line^0,w,c
  5384  0004' A4D8               	btfss	status,2,c
  5385  0006' EF00' F000'        	goto	u2061
  5386  000A' EF00' F000'        	goto	u2060
  5387  000E'                    u2061:
  5388  000E' EF00' F000'        	goto	l2397
  5389  0012'                    u2060:
  5390  0012'                    
  5391                           ;LCD.c: 98:     {;LCD.c: 99:         LCD_sendbyte(0x80,0);
  5392  0012' 0E00               	movlw	0
  5393  0014' 6E00'              	movwf	LCD_sendbyte@type^0,c
  5394  0016' 0E80               	movlw	128
  5395  0018' EC00' F000'        	call	_LCD_sendbyte
  5396  001C'                    
  5397                           ;LCD.c: 100:         _delay((unsigned long)((45)*(64000000/4000000.0)));
  5398  001C' 0EF0               	movlw	240
  5399  001E'                    u3517:
  5400  001E' 2EE8               	decfsz	wreg,f,c
  5401  0020' D7FE               	bra	u3517
  5402  0022'                    l2397:
  5403                           
  5404                           ;LCD.c: 102:     if(line==2){
  5405  0022' 0E02               	movlw	2
  5406  0024' 1800'              	xorwf	LCD_setline@line^0,w,c
  5407  0026' A4D8               	btfss	status,2,c
  5408  0028' EF00' F000'        	goto	u2071
  5409  002C' EF00' F000'        	goto	u2070
  5410  0030'                    u2071:
  5411  0030' EF00' F000'        	goto	l171
  5412  0034'                    u2070:
  5413  0034'                    
  5414                           ;LCD.c: 103:         LCD_sendbyte(0xC0,0);
  5415  0034' 0E00               	movlw	0
  5416  0036' 6E00'              	movwf	LCD_sendbyte@type^0,c
  5417  0038' 0EC0               	movlw	192
  5418  003A' EC00' F000'        	call	_LCD_sendbyte
  5419  003E'                    
  5420                           ;LCD.c: 104:         _delay((unsigned long)((45)*(64000000/4000000.0)));
  5421  003E' 0EF0               	movlw	240
  5422  0040'                    u3527:
  5423  0040' 2EE8               	decfsz	wreg,f,c
  5424  0042' D7FE               	bra	u3527
  5425  0044'                    l171:
  5426  0044' 0012               	return		;funcret
  5427  0046'                    __end_of_LCD_setline:
  5428                           	callstack 0
  5429                           
  5430 ;; *************** function _LCD_sendstring *****************
  5431 ;; Defined at:
  5432 ;;		line 111 in file "LCD.c"
  5433 ;; Parameters:    Size  Location     Type
  5434 ;;  string          2    6[COMRAM] PTR unsigned char 
  5435 ;;		 -> main@buf(16), 
  5436 ;; Auto vars:     Size  Location     Type
  5437 ;;		None
  5438 ;; Return value:  Size  Location     Type
  5439 ;;                  1    wreg      void 
  5440 ;; Registers used:
  5441 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5442 ;; Tracked objects:
  5443 ;;		On entry : 0/0
  5444 ;;		On exit  : 0/0
  5445 ;;		Unchanged: 0/0
  5446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5447 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5448 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5450 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5451 ;;Total ram usage:        2 bytes
  5452 ;; Hardware stack levels used: 1
  5453 ;; Hardware stack levels required when called: 5
  5454 ;; This function calls:
  5455 ;;		_LCD_sendbyte
  5456 ;; This function is called by:
  5457 ;;		_LCD_Disp
  5458 ;; This function uses a non-reentrant model
  5459 ;;
  5460                           
  5461                           	psect	text31
  5462  0000'                    __ptext31:
  5463                           	callstack 0
  5464  0000'                    _LCD_sendstring:
  5465                           	callstack 24
  5466  0000'                    
  5467                           ;LCD.c: 111: void LCD_sendstring(char *string);LCD.c: 112: {;LCD.c: 113:  while(*string 
      +                          != 0){
  5468  0000' EF00' F000'        	goto	l2409
  5469  0004'                    l2405:
  5470                           
  5471                           ;LCD.c: 114:   LCD_sendbyte(*string++,1);
  5472  0004' 0E01               	movlw	1
  5473  0006' 6E00'              	movwf	LCD_sendbyte@type^0,c
  5474  0008' C006' FFD9         	movff	LCD_sendstring@string,fsr2l
  5475  000C' C007' FFDA         	movff	LCD_sendstring@string+1,fsr2h
  5476  0010' 50DF               	movf	indf2,w,c
  5477  0012' EC00' F000'        	call	_LCD_sendbyte
  5478  0016' 4A00'              	infsnz	LCD_sendstring@string^0,f,c
  5479  0018' 2A00'              	incf	(LCD_sendstring@string+1)^0,f,c
  5480  001A'                    l2409:
  5481                           
  5482                           ;LCD.c: 113:  while(*string != 0){
  5483  001A' C006' FFD9         	movff	LCD_sendstring@string,fsr2l
  5484  001E' C007' FFDA         	movff	LCD_sendstring@string+1,fsr2h
  5485  0022' 50DF               	movf	indf2,w,c
  5486  0024' A4D8               	btfss	status,2,c
  5487  0026' EF00' F000'        	goto	u2081
  5488  002A' EF00' F000'        	goto	u2080
  5489  002E'                    u2081:
  5490  002E' EF00' F000'        	goto	l2405
  5491  0032'                    u2080:
  5492  0032' 0012               	return		;funcret
  5493  0034'                    __end_of_LCD_sendstring:
  5494                           	callstack 0
  5495                           
  5496 ;; *************** function _LCD_sendbyte *****************
  5497 ;; Defined at:
  5498 ;;		line 35 in file "LCD.c"
  5499 ;; Parameters:    Size  Location     Type
  5500 ;;  Byte            1    wreg     unsigned char 
  5501 ;;  type            1    4[COMRAM] unsigned char 
  5502 ;; Auto vars:     Size  Location     Type
  5503 ;;  Byte            1    5[COMRAM] unsigned char 
  5504 ;; Return value:  Size  Location     Type
  5505 ;;                  1    wreg      void 
  5506 ;; Registers used:
  5507 ;;		wreg, status,2, status,0, cstack
  5508 ;; Tracked objects:
  5509 ;;		On entry : 0/0
  5510 ;;		On exit  : 0/0
  5511 ;;		Unchanged: 0/0
  5512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5513 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5514 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5516 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5517 ;;Total ram usage:        2 bytes
  5518 ;; Hardware stack levels used: 1
  5519 ;; Hardware stack levels required when called: 4
  5520 ;; This function calls:
  5521 ;;		_LCD_sendnibble
  5522 ;; This function is called by:
  5523 ;;		_LCD_Init
  5524 ;;		_LCD_setline
  5525 ;;		_LCD_sendstring
  5526 ;; This function uses a non-reentrant model
  5527 ;;
  5528                           
  5529                           	psect	text32
  5530  0000'                    __ptext32:
  5531                           	callstack 0
  5532  0000'                    _LCD_sendbyte:
  5533                           	callstack 25
  5534                           
  5535                           ;incstack = 0
  5536                           ;LCD_sendbyte@Byte stored from wreg
  5537  0000' 6E00'              	movwf	LCD_sendbyte@Byte^0,c
  5538  0002'                    
  5539                           ;LCD.c: 35: void LCD_sendbyte(unsigned char Byte, char type);LCD.c: 36: {;LCD.c: 38:    
      +                            LATCbits.LATC6 = type;
  5540  0002' B000'              	btfsc	LCD_sendbyte@type^0,0,c
  5541  0004' D002               	bra	u2045
  5542  0006' 9C7B               	bcf	123,6,c	;volatile
  5543  0008' D001               	bra	u2046
  5544  000A'                    u2045:
  5545  000A' 8C7B               	bsf	123,6,c	;volatile
  5546  000C'                    u2046:
  5547  000C'                    
  5548                           ;LCD.c: 40:      LCD_sendnibble(Byte>>4);
  5549  000C' 3800'              	swapf	LCD_sendbyte@Byte^0,w,c
  5550  000E' 0B0F               	andlw	15
  5551  0010' EC00' F000'        	call	_LCD_sendnibble
  5552                           
  5553                           ;LCD.c: 42:      LCD_sendnibble(Byte&0b1111);
  5554  0014' 5000'              	movf	LCD_sendbyte@Byte^0,w,c
  5555  0016' 0B0F               	andlw	15
  5556  0018' EC00' F000'        	call	_LCD_sendnibble
  5557  001C'                    
  5558                           ;LCD.c: 43:     _delay((unsigned long)((50)*(64000000/4000000.0)));
  5559  001C' 0EA0               	movlw	160
  5560  001E'                    u3537:
  5561  001E' D000               	nop2	
  5562  0020' 2EE8               	decfsz	wreg,f,c
  5563  0022' D7FD               	bra	u3537
  5564  0024' 0012               	return		;funcret
  5565  0026'                    __end_of_LCD_sendbyte:
  5566                           	callstack 0
  5567                           
  5568 ;; *************** function _LCD_sendnibble *****************
  5569 ;; Defined at:
  5570 ;;		line 20 in file "LCD.c"
  5571 ;; Parameters:    Size  Location     Type
  5572 ;;  number          1    wreg     unsigned char 
  5573 ;; Auto vars:     Size  Location     Type
  5574 ;;  number          1    3[COMRAM] unsigned char 
  5575 ;; Return value:  Size  Location     Type
  5576 ;;                  1    wreg      void 
  5577 ;; Registers used:
  5578 ;;		wreg, cstack
  5579 ;; Tracked objects:
  5580 ;;		On entry : 0/0
  5581 ;;		On exit  : 0/0
  5582 ;;		Unchanged: 0/0
  5583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5585 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5587 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5588 ;;Total ram usage:        1 bytes
  5589 ;; Hardware stack levels used: 1
  5590 ;; Hardware stack levels required when called: 3
  5591 ;; This function calls:
  5592 ;;		_LCD_E_TOG
  5593 ;; This function is called by:
  5594 ;;		_LCD_sendbyte
  5595 ;;		_LCD_Init
  5596 ;; This function uses a non-reentrant model
  5597 ;;
  5598                           
  5599                           	psect	text33
  5600  0000'                    __ptext33:
  5601                           	callstack 0
  5602  0000'                    _LCD_sendnibble:
  5603                           	callstack 26
  5604                           
  5605                           ;incstack = 0
  5606                           ;LCD_sendnibble@number stored from wreg
  5607  0000' 6E00'              	movwf	LCD_sendnibble@number^0,c
  5608  0002'                    
  5609                           ;LCD.c: 20: void LCD_sendnibble(unsigned char number);LCD.c: 21: {;LCD.c: 23:     if (nu
      +                          mber & 0b0001) {LATBbits.LATB3 = 1;} else {LATBbits.LATB3 = 0;}
  5610  0002' A000'              	btfss	LCD_sendnibble@number^0,0,c
  5611  0004' EF00' F000'        	goto	u1891
  5612  0008' EF00' F000'        	goto	u1890
  5613  000C'                    u1891:
  5614  000C' EF00' F000'        	goto	l152
  5615  0010'                    u1890:
  5616  0010' 867A               	bsf	122,3,c	;volatile
  5617  0012' EF00' F000'        	goto	l2259
  5618  0016'                    l152:
  5619  0016' 967A               	bcf	122,3,c	;volatile
  5620  0018'                    l2259:
  5621                           
  5622                           ;LCD.c: 24:     if (number & 0b0010) {LATBbits.LATB2 = 1;} else {LATBbits.LATB2 = 0;}
  5623  0018' A200'              	btfss	LCD_sendnibble@number^0,1,c
  5624  001A' EF00' F000'        	goto	u1901
  5625  001E' EF00' F000'        	goto	u1900
  5626  0022'                    u1901:
  5627  0022' EF00' F000'        	goto	l154
  5628  0026'                    u1900:
  5629  0026' 847A               	bsf	122,2,c	;volatile
  5630  0028' EF00' F000'        	goto	l2263
  5631  002C'                    l154:
  5632  002C' 947A               	bcf	122,2,c	;volatile
  5633  002E'                    l2263:
  5634                           
  5635                           ;LCD.c: 25:     if (number & 0b0100) {LATEbits.LATE3 = 1;} else {LATEbits.LATE3 = 0;}
  5636  002E' A400'              	btfss	LCD_sendnibble@number^0,2,c
  5637  0030' EF00' F000'        	goto	u1911
  5638  0034' EF00' F000'        	goto	u1910
  5639  0038'                    u1911:
  5640  0038' EF00' F000'        	goto	l156
  5641  003C'                    u1910:
  5642  003C' 867D               	bsf	125,3,c	;volatile
  5643  003E' EF00' F000'        	goto	l2267
  5644  0042'                    l156:
  5645  0042' 967D               	bcf	125,3,c	;volatile
  5646  0044'                    l2267:
  5647                           
  5648                           ;LCD.c: 26:     if (number & 0b1000) {LATEbits.LATE1 = 1;} else {LATEbits.LATE1 = 0;}
  5649  0044' A600'              	btfss	LCD_sendnibble@number^0,3,c
  5650  0046' EF00' F000'        	goto	u1921
  5651  004A' EF00' F000'        	goto	u1920
  5652  004E'                    u1921:
  5653  004E' EF00' F000'        	goto	l158
  5654  0052'                    u1920:
  5655  0052' 827D               	bsf	125,1,c	;volatile
  5656  0054' EF00' F000'        	goto	l2271
  5657  0058'                    l158:
  5658  0058' 927D               	bcf	125,1,c	;volatile
  5659  005A'                    l2271:
  5660                           
  5661                           ;LCD.c: 27:     LCD_E_TOG();
  5662  005A' EC00' F000'        	call	_LCD_E_TOG	;wreg free
  5663  005E'                    
  5664                           ;LCD.c: 28:     _delay((unsigned long)((5)*(64000000/4000000.0)));
  5665  005E' 0E1A               	movlw	26
  5666  0060'                    u3547:
  5667  0060' 2EE8               	decfsz	wreg,f,c
  5668  0062' D7FE               	bra	u3547
  5669  0064' D000               	nop2	
  5670  0066' 0012               	return		;funcret
  5671  0068'                    __end_of_LCD_sendnibble:
  5672                           	callstack 0
  5673                           
  5674 ;; *************** function _LCD_E_TOG *****************
  5675 ;; Defined at:
  5676 ;;		line 8 in file "LCD.c"
  5677 ;; Parameters:    Size  Location     Type
  5678 ;;		None
  5679 ;; Auto vars:     Size  Location     Type
  5680 ;;		None
  5681 ;; Return value:  Size  Location     Type
  5682 ;;                  1    wreg      void 
  5683 ;; Registers used:
  5684 ;;		wreg
  5685 ;; Tracked objects:
  5686 ;;		On entry : 0/0
  5687 ;;		On exit  : 0/0
  5688 ;;		Unchanged: 0/0
  5689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5693 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5694 ;;Total ram usage:        0 bytes
  5695 ;; Hardware stack levels used: 1
  5696 ;; Hardware stack levels required when called: 2
  5697 ;; This function calls:
  5698 ;;		Nothing
  5699 ;; This function is called by:
  5700 ;;		_LCD_sendnibble
  5701 ;; This function uses a non-reentrant model
  5702 ;;
  5703                           
  5704                           	psect	text34
  5705  0000'                    __ptext34:
  5706                           	callstack 0
  5707  0000'                    _LCD_E_TOG:
  5708                           	callstack 26
  5709  0000'                    
  5710                           ;LCD.c: 11:     LATCbits.LATC2 = 1;
  5711  0000' 847B               	bsf	123,2,c	;volatile
  5712  0002'                    
  5713                           ;LCD.c: 12:  _delay((unsigned long)((5)*(64000000/4000000.0)));
  5714  0002' 0E1A               	movlw	26
  5715  0004'                    u3557:
  5716  0004' 2EE8               	decfsz	wreg,f,c
  5717  0006' D7FE               	bra	u3557
  5718  0008' D000               	nop2	
  5719  000A'                    
  5720                           ;LCD.c: 14:     LATCbits.LATC2 = 0;
  5721  000A' 947B               	bcf	123,2,c	;volatile
  5722  000C' 0012               	return		;funcret
  5723  000E'                    __end_of_LCD_E_TOG:
  5724                           	callstack 0
  5725                           
  5726 ;; *************** function _Interrupts_init *****************
  5727 ;; Defined at:
  5728 ;;		line 16 in file "interrupts.c"
  5729 ;; Parameters:    Size  Location     Type
  5730 ;;		None
  5731 ;; Auto vars:     Size  Location     Type
  5732 ;;		None
  5733 ;; Return value:  Size  Location     Type
  5734 ;;                  1    wreg      void 
  5735 ;; Registers used:
  5736 ;;		None
  5737 ;; Tracked objects:
  5738 ;;		On entry : 0/0
  5739 ;;		On exit  : 0/0
  5740 ;;		Unchanged: 0/0
  5741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5745 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5746 ;;Total ram usage:        0 bytes
  5747 ;; Hardware stack levels used: 1
  5748 ;; Hardware stack levels required when called: 2
  5749 ;; This function calls:
  5750 ;;		Nothing
  5751 ;; This function is called by:
  5752 ;;		_main
  5753 ;; This function uses a non-reentrant model
  5754 ;;
  5755                           
  5756                           	psect	text35
  5757  0000'                    __ptext35:
  5758                           	callstack 0
  5759  0000'                    _Interrupts_init:
  5760                           	callstack 28
  5761  0000'                    
  5762                           ;interrupts.c: 19:     PIR2bits.C1IF=0;
  5763  0000' 010E               	movlb	14	; () banked
  5764  0002' 9135               	bcf	53,0,b	;volatile
  5765                           
  5766                           ;interrupts.c: 20:     PIE2bits.C1IE = 1;
  5767  0004' 812B               	bsf	43,0,b	;volatile
  5768                           
  5769                           ;interrupts.c: 21:     IPR2bits.C1IP = 0;
  5770  0006' 9121               	bcf	33,0,b	;volatile
  5771                           
  5772                           ;interrupts.c: 22:     PIE0bits.TMR0IE = 1;
  5773  0008' 8B29               	bsf	41,5,b	;volatile
  5774                           
  5775                           ;interrupts.c: 23:     IPR0bits.TMR0IP = 1;
  5776  000A' 8B1F               	bsf	31,5,b	;volatile
  5777                           
  5778                           ;interrupts.c: 24:     INTCONbits.IPEN = 1;
  5779  000C' 8AF2               	bsf	242,5,c	;volatile
  5780                           
  5781                           ;interrupts.c: 25:     INTCONbits.GIEL = 1;
  5782  000E' 8CF2               	bsf	242,6,c	;volatile
  5783                           
  5784                           ;interrupts.c: 26:     INTCONbits.GIEH = 1;
  5785  0010' 8EF2               	bsf	242,7,c	;volatile
  5786  0012'                    
  5787                           ; BSR set to: 14
  5788  0012' 0012               	return		;funcret
  5789  0014'                    __end_of_Interrupts_init:
  5790                           	callstack 0
  5791                           
  5792 ;; *************** function _Comp1_init *****************
  5793 ;; Defined at:
  5794 ;;		line 22 in file "comparator.c"
  5795 ;; Parameters:    Size  Location     Type
  5796 ;;		None
  5797 ;; Auto vars:     Size  Location     Type
  5798 ;;		None
  5799 ;; Return value:  Size  Location     Type
  5800 ;;                  1    wreg      void 
  5801 ;; Registers used:
  5802 ;;		wreg, status,2, cstack
  5803 ;; Tracked objects:
  5804 ;;		On entry : 0/0
  5805 ;;		On exit  : 0/0
  5806 ;;		Unchanged: 0/0
  5807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5811 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5812 ;;Total ram usage:        0 bytes
  5813 ;; Hardware stack levels used: 1
  5814 ;; Hardware stack levels required when called: 3
  5815 ;; This function calls:
  5816 ;;		_DAC_init
  5817 ;; This function is called by:
  5818 ;;		_main
  5819 ;; This function uses a non-reentrant model
  5820 ;;
  5821                           
  5822                           	psect	text36
  5823  0000'                    __ptext36:
  5824                           	callstack 0
  5825  0000'                    _Comp1_init:
  5826                           	callstack 27
  5827  0000'                    
  5828                           ;comparator.c: 24:     TRISFbits.TRISF7=1;
  5829  0000' 8E86               	bsf	134,7,c	;volatile
  5830  0002'                    
  5831                           ;comparator.c: 25:     CM1NCHbits.NCH=0b011;
  5832  0002' 010E               	movlb	14	; () banked
  5833  0004' 51D2               	movf	210,w,b	;volatile
  5834  0006' 0BF8               	andlw	-8
  5835  0008' 0903               	iorlw	3
  5836  000A' 6FD2               	movwf	210,b	;volatile
  5837                           
  5838                           ;comparator.c: 26:     CM1PCHbits.PCH=0b101;
  5839  000C' 51D3               	movf	211,w,b	;volatile
  5840  000E' 0BF8               	andlw	-8
  5841  0010' 0905               	iorlw	5
  5842  0012' 6FD3               	movwf	211,b	;volatile
  5843  0014'                    
  5844                           ; BSR set to: 14
  5845                           ;comparator.c: 27:     CM1CON0bits.HYS=1;
  5846  0014' 83D0               	bsf	208,1,b	;volatile
  5847  0016'                    
  5848                           ; BSR set to: 14
  5849                           ;comparator.c: 28:     CM1CON0bits.POL=1;
  5850  0016' 89D0               	bsf	208,4,b	;volatile
  5851  0018'                    
  5852                           ; BSR set to: 14
  5853                           ;comparator.c: 29:     CM1CON1bits.INTP=1;
  5854  0018' 83D1               	bsf	209,1,b	;volatile
  5855  001A'                    
  5856                           ; BSR set to: 14
  5857                           ;comparator.c: 30:     CM1CON1bits.INTN=1;
  5858  001A' 81D1               	bsf	209,0,b	;volatile
  5859  001C'                    
  5860                           ; BSR set to: 14
  5861                           ;comparator.c: 31:     DAC_init();
  5862  001C' EC00' F000'        	call	_DAC_init	;wreg free
  5863  0020'                    
  5864                           ;comparator.c: 32:     CM1CON0bits.EN=1;
  5865  0020' 010E               	movlb	14	; () banked
  5866  0022' 8FD0               	bsf	208,7,b	;volatile
  5867  0024'                    
  5868                           ; BSR set to: 14
  5869  0024' 0012               	return		;funcret
  5870  0026'                    __end_of_Comp1_init:
  5871                           	callstack 0
  5872                           
  5873 ;; *************** function _DAC_init *****************
  5874 ;; Defined at:
  5875 ;;		line 7 in file "comparator.c"
  5876 ;; Parameters:    Size  Location     Type
  5877 ;;		None
  5878 ;; Auto vars:     Size  Location     Type
  5879 ;;		None
  5880 ;; Return value:  Size  Location     Type
  5881 ;;                  1    wreg      void 
  5882 ;; Registers used:
  5883 ;;		wreg, status,2
  5884 ;; Tracked objects:
  5885 ;;		On entry : 0/0
  5886 ;;		On exit  : 0/0
  5887 ;;		Unchanged: 0/0
  5888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5892 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5893 ;;Total ram usage:        0 bytes
  5894 ;; Hardware stack levels used: 1
  5895 ;; Hardware stack levels required when called: 2
  5896 ;; This function calls:
  5897 ;;		Nothing
  5898 ;; This function is called by:
  5899 ;;		_Comp1_init
  5900 ;; This function uses a non-reentrant model
  5901 ;;
  5902                           
  5903                           	psect	text37
  5904  0000'                    __ptext37:
  5905                           	callstack 0
  5906  0000'                    _DAC_init:
  5907                           	callstack 27
  5908  0000'                    
  5909                           ;comparator.c: 9:     DAC1CON0bits.PSS=0b00;
  5910  0000' 0EF3               	movlw	-13
  5911  0002' 010E               	movlb	14	; () banked
  5912  0004' 17C6               	andwf	198,f,b	;volatile
  5913  0006'                    
  5914                           ; BSR set to: 14
  5915                           ;comparator.c: 10:     DAC1CON0bits.NSS=0b0;
  5916  0006' 91C6               	bcf	198,0,b	;volatile
  5917                           
  5918                           ;comparator.c: 14:     DAC1CON1bits.DAC1R=0b11011;
  5919  0008' 51C7               	movf	199,w,b	;volatile
  5920  000A' 0BE0               	andlw	-32
  5921  000C' 091B               	iorlw	27
  5922  000E' 6FC7               	movwf	199,b	;volatile
  5923  0010'                    
  5924                           ; BSR set to: 14
  5925                           ;comparator.c: 15:     DAC1CON0bits.DAC1EN=1;
  5926  0010' 8FC6               	bsf	198,7,b	;volatile
  5927  0012'                    
  5928                           ; BSR set to: 14
  5929  0012' 0012               	return		;funcret
  5930  0014'                    __end_of_DAC_init:
  5931                           	callstack 0
  5932                           
  5933 ;; *************** function _LowISR *****************
  5934 ;; Defined at:
  5935 ;;		line 34 in file "interrupts.c"
  5936 ;; Parameters:    Size  Location     Type
  5937 ;;		None
  5938 ;; Auto vars:     Size  Location     Type
  5939 ;;		None
  5940 ;; Return value:  Size  Location     Type
  5941 ;;                  1    wreg      void 
  5942 ;; Registers used:
  5943 ;;		wreg, status,2, status,0
  5944 ;; Tracked objects:
  5945 ;;		On entry : 0/0
  5946 ;;		On exit  : 0/0
  5947 ;;		Unchanged: 0/0
  5948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5951 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5952 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5953 ;;Total ram usage:        3 bytes
  5954 ;; Hardware stack levels used: 1
  5955 ;; Hardware stack levels required when called: 1
  5956 ;; This function calls:
  5957 ;;		Nothing
  5958 ;; This function is called by:
  5959 ;;		Interrupt level 1
  5960 ;; This function uses a non-reentrant model
  5961 ;;
  5962                           
  5963                           	psect	intcodelo
  5964  0000'                    __pintcodelo:
  5965                           	callstack 0
  5966  0000'                    _LowISR:
  5967                           	callstack 20
  5968                           
  5969                           ; BSR set to: 14
  5970                           ;incstack = 0
  5971  0000' 8000'              	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  5972  0002' CFD8 F000'         	movff	status,??_LowISR
  5973  0006' CFE8 F001'         	movff	wreg,??_LowISR+1
  5974  000A' CFE0 F002'         	movff	bsr,??_LowISR+2
  5975  000E'                    
  5976                           ;interrupts.c: 36:     if(PIR2bits.C1IF){
  5977  000E' 010E               	movlb	14	; () banked
  5978  0010' A135               	btfss	53,0,b	;volatile
  5979  0012' EF00' F000'        	goto	i1u265_21
  5980  0016' EF00' F000'        	goto	i1u265_20
  5981  001A'                    i1u265_21:
  5982  001A' EF00' F000'        	goto	i1l276
  5983  001E'                    i1u265_20:
  5984  001E'                    
  5985                           ; BSR set to: 14
  5986                           ;interrupts.c: 37:         light = !light;
  5987  001E' 5000'              	movf	_light^0,w,c
  5988  0020' B4D8               	btfsc	status,2,c
  5989  0022' EF00' F000'        	goto	i1u266_21
  5990  0026' EF00' F000'        	goto	i1u266_20
  5991  002A'                    i1u266_21:
  5992  002A' 0E01               	movlw	1
  5993  002C' EF00' F000'        	goto	i1u267_20
  5994  0030'                    i1u266_20:
  5995  0030' 0E00               	movlw	0
  5996  0032'                    i1u267_20:
  5997  0032' 6E00'              	movwf	_light^0,c
  5998  0034'                    
  5999                           ; BSR set to: 14
  6000                           ;interrupts.c: 38:         if(hour < 1 || hour >= 5){
  6001  0034' 0100               	movlb	0	; () banked
  6002  0036' BF00'              	btfsc	(_hour+1)& (0+255),7,b	;volatile
  6003  0038' EF00' F000'        	goto	i1u268_21
  6004  003C' 5100'              	movf	(_hour+1)& (0+255),w,b	;volatile
  6005  003E' E108               	bnz	i1u268_20
  6006  0040' 0500'              	decf	_hour& (0+255),w,b	;volatile
  6007  0042' A0D8               	btfss	status,0,c
  6008  0044' EF00' F000'        	goto	i1u268_21
  6009  0048' EF00' F000'        	goto	i1u268_20
  6010  004C'                    i1u268_21:
  6011  004C' EF00' F000'        	goto	i1l275
  6012  0050'                    i1u268_20:
  6013  0050'                    
  6014                           ; BSR set to: 0
  6015  0050' BF00'              	btfsc	(_hour+1)& (0+255),7,b	;volatile
  6016  0052' EF00' F000'        	goto	i1u269_21
  6017  0056' 5100'              	movf	(_hour+1)& (0+255),w,b	;volatile
  6018  0058' E109               	bnz	i1u269_20
  6019  005A' 0E05               	movlw	5
  6020  005C' 5D00'              	subwf	_hour& (0+255),w,b	;volatile
  6021  005E' A0D8               	btfss	status,0,c
  6022  0060' EF00' F000'        	goto	i1u269_21
  6023  0064' EF00' F000'        	goto	i1u269_20
  6024  0068'                    i1u269_21:
  6025  0068' EF00' F000'        	goto	i1l273
  6026  006C'                    i1u269_20:
  6027  006C'                    i1l275:
  6028                           
  6029                           ; BSR set to: 0
  6030                           ;interrupts.c: 39:             LATDbits.LATD7 = light;
  6031  006C' B000'              	btfsc	_light^0,0,c
  6032  006E' D002               	bra	i1u270_25
  6033  0070' 9E7C               	bcf	124,7,c	;volatile
  6034  0072' D001               	bra	i1u270_26
  6035  0074'                    i1u270_25:
  6036  0074' 8E7C               	bsf	124,7,c	;volatile
  6037  0076'                    i1u270_26:
  6038                           
  6039                           ;interrupts.c: 40:             LATHbits.LATH3 = light;
  6040  0076' B000'              	btfsc	_light^0,0,c
  6041  0078' D002               	bra	i1u271_25
  6042  007A' 9680               	bcf	128,3,c	;volatile
  6043  007C' D001               	bra	i1u271_26
  6044  007E'                    i1u271_25:
  6045  007E' 8680               	bsf	128,3,c	;volatile
  6046  0080'                    i1u271_26:
  6047  0080'                    i1l273:
  6048                           
  6049                           ;interrupts.c: 42:         on_min = hour;
  6050  0080' C026' F000'        	movff	_hour,_on_min	;volatile
  6051  0084' C027' F001'        	movff	_hour+1,_on_min+1	;volatile
  6052                           
  6053                           ;interrupts.c: 43:         PIR2bits.C1IF=0;
  6054  0088' 010E               	movlb	14	; () banked
  6055  008A' 9135               	bcf	53,0,b	;volatile
  6056  008C'                    i1l276:
  6057                           
  6058                           ; BSR set to: 14
  6059  008C' C002' FFE0         	movff	??_LowISR+2,bsr
  6060  0090' C001' FFE8         	movff	??_LowISR+1,wreg
  6061  0094' C000' FFD8         	movff	??_LowISR,status
  6062  0098' 9000'              	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  6063  009A' 0010               	retfie	
  6064  009C'                    __end_of_LowISR:
  6065                           	callstack 0
  6066                           
  6067 ;; *************** function _HighISR *****************
  6068 ;; Defined at:
  6069 ;;		line 53 in file "interrupts.c"
  6070 ;; Parameters:    Size  Location     Type
  6071 ;;		None
  6072 ;; Auto vars:     Size  Location     Type
  6073 ;;		None
  6074 ;; Return value:  Size  Location     Type
  6075 ;;                  1    wreg      void 
  6076 ;; Registers used:
  6077 ;;		wreg, status,2, status,0
  6078 ;; Tracked objects:
  6079 ;;		On entry : 0/0
  6080 ;;		On exit  : 0/0
  6081 ;;		Unchanged: 0/0
  6082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6086 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6087 ;;Total ram usage:        0 bytes
  6088 ;; Hardware stack levels used: 1
  6089 ;; This function calls:
  6090 ;;		Nothing
  6091 ;; This function is called by:
  6092 ;;		Interrupt level 2
  6093 ;; This function uses a non-reentrant model
  6094 ;;
  6095                           
  6096                           	psect	intcode
  6097  0000'                    __pintcode:
  6098                           	callstack 0
  6099  0000'                    _HighISR:
  6100                           	callstack 20
  6101                           
  6102                           ; BSR set to: 14
  6103                           ;incstack = 0
  6104  0000' 8200'              	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6105  0002' EF00' F000'        	goto	int_func
  6106                           
  6107                           	psect	intcode_body
  6108  0000'                    __pintcode_body:
  6109                           	callstack 20
  6110  0000'                    int_func:
  6111                           	callstack 20
  6112  0000'                    
  6113                           ;interrupts.c: 56:     if(PIR0bits.TMR0IF){
  6114  0000' 010E               	movlb	14	; () banked
  6115  0002' AB33               	btfss	51,5,b	;volatile
  6116  0004' EF00' F000'        	goto	i2u272_41
  6117  0008' EF00' F000'        	goto	i2u272_40
  6118  000C'                    i2u272_41:
  6119  000C' EF00' F000'        	goto	i2l283
  6120  0010'                    i2u272_40:
  6121  0010'                    
  6122                           ; BSR set to: 14
  6123                           ;interrupts.c: 58:         TMR0H=3035>>8;
  6124  0010' 0E0B               	movlw	11
  6125  0012' 6ED4               	movwf	212,c	;volatile
  6126                           
  6127                           ;interrupts.c: 59:         TMR0L=3035&0b11111111;
  6128  0014' 0EDB               	movlw	219
  6129  0016' 6ED3               	movwf	211,c	;volatile
  6130  0018'                    
  6131                           ; BSR set to: 14
  6132                           ;interrupts.c: 61:             ++hour;
  6133  0018' 0100               	movlb	0	; () banked
  6134  001A' 4B00'              	infsnz	_hour& (0+255),f,b	;volatile
  6135  001C' 2B00'              	incf	(_hour+1)& (0+255),f,b	;volatile
  6136  001E'                    
  6137                           ; BSR set to: 0
  6138                           ;interrupts.c: 67:         LATDbits.LATD7 = light;
  6139  001E' B000'              	btfsc	_light^0,0,c
  6140  0020' D002               	bra	i2u273_45
  6141  0022' 9E7C               	bcf	124,7,c	;volatile
  6142  0024' D001               	bra	i2u273_46
  6143  0026'                    i2u273_45:
  6144  0026' 8E7C               	bsf	124,7,c	;volatile
  6145  0028'                    i2u273_46:
  6146  0028'                    
  6147                           ;interrupts.c: 68:         LATHbits.LATH3 = light;
  6148  0028' B000'              	btfsc	_light^0,0,c
  6149  002A' D002               	bra	i2u274_45
  6150  002C' 9680               	bcf	128,3,c	;volatile
  6151  002E' D001               	bra	i2u274_46
  6152  0030'                    i2u274_45:
  6153  0030' 8680               	bsf	128,3,c	;volatile
  6154  0032'                    i2u274_46:
  6155  0032'                    
  6156                           ;interrupts.c: 69:         if(hour >= 1 && hour < 5){
  6157  0032' 0100               	movlb	0	; () banked
  6158  0034' BF00'              	btfsc	(_hour+1)& (0+255),7,b	;volatile
  6159  0036' EF00' F000'        	goto	i2u275_41
  6160  003A' 5100'              	movf	(_hour+1)& (0+255),w,b	;volatile
  6161  003C' E108               	bnz	i2u275_40
  6162  003E' 0500'              	decf	_hour& (0+255),w,b	;volatile
  6163  0040' A0D8               	btfss	status,0,c
  6164  0042' EF00' F000'        	goto	i2u275_41
  6165  0046' EF00' F000'        	goto	i2u275_40
  6166  004A'                    i2u275_41:
  6167  004A' EF00' F000'        	goto	i2l282
  6168  004E'                    i2u275_40:
  6169  004E'                    
  6170                           ; BSR set to: 0
  6171  004E' BF00'              	btfsc	(_hour+1)& (0+255),7,b	;volatile
  6172  0050' EF00' F000'        	goto	i2u276_40
  6173  0054' 5100'              	movf	(_hour+1)& (0+255),w,b	;volatile
  6174  0056' E107               	bnz	i2u276_41
  6175  0058' 0E05               	movlw	5
  6176  005A' 5D00'              	subwf	_hour& (0+255),w,b	;volatile
  6177  005C' B0D8               	btfsc	status,0,c
  6178  005E' EF00' F000'        	goto	i2u276_41
  6179  0062' EF00' F000'        	goto	i2u276_40
  6180  0066'                    i2u276_41:
  6181  0066' EF00' F000'        	goto	i2l282
  6182  006A'                    i2u276_40:
  6183  006A'                    
  6184                           ; BSR set to: 0
  6185                           ;interrupts.c: 70:             LATDbits.LATD7=0;
  6186  006A' 9E7C               	bcf	124,7,c	;volatile
  6187                           
  6188                           ;interrupts.c: 71:             LATHbits.LATH3=0;
  6189  006C' 9680               	bcf	128,3,c	;volatile
  6190  006E'                    i2l282:
  6191                           
  6192                           ; BSR set to: 0
  6193                           ;interrupts.c: 73:         PIR0bits.TMR0IF=0;
  6194  006E' 010E               	movlb	14	; () banked
  6195  0070' 9B33               	bcf	51,5,b	;volatile
  6196  0072'                    i2l283:
  6197                           
  6198                           ; BSR set to: 14
  6199  0072' 9200'              	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  6200  0074' 0011               	retfie		f
  6201  0076'                    __end_of_HighISR:
  6202                           	callstack 0
  6203                           
  6204                           	psect	rparam
  6205  0000                     
  6206                           	psect	temp
  6207  0000'                    btemp:
  6208                           	callstack 0
  6209  0000'                    	ds	1
  6210  0000                     int$flags	set	btemp
  6211  0000                     wtemp8	set	btemp+1
  6212  0000                     ttemp5	set	btemp+1
  6213  0000                     ttemp6	set	btemp+4
  6214  0000                     ttemp7	set	btemp+8
  6215                           
  6216                           	psect	idloc
  6217                           
  6218                           ;Config register IDLOC0 @ 0x200000
  6219                           ;	unspecified, using default values
  6220  200000                     	org	2097152
  6221  200000  0FFF               	dw	4095
  6222                           
  6223                           ;Config register IDLOC1 @ 0x200002
  6224                           ;	unspecified, using default values
  6225  200002                     	org	2097154
  6226  200002  0FFF               	dw	4095
  6227                           
  6228                           ;Config register IDLOC2 @ 0x200004
  6229                           ;	unspecified, using default values
  6230  200004                     	org	2097156
  6231  200004  0FFF               	dw	4095
  6232                           
  6233                           ;Config register IDLOC3 @ 0x200006
  6234                           ;	unspecified, using default values
  6235  200006                     	org	2097158
  6236  200006  0FFF               	dw	4095
  6237                           
  6238                           ;Config register IDLOC4 @ 0x200008
  6239                           ;	unspecified, using default values
  6240  200008                     	org	2097160
  6241  200008  0FFF               	dw	4095
  6242                           
  6243                           ;Config register IDLOC5 @ 0x20000A
  6244                           ;	unspecified, using default values
  6245  20000A                     	org	2097162
  6246  20000A  0FFF               	dw	4095
  6247                           
  6248                           ;Config register IDLOC6 @ 0x20000C
  6249                           ;	unspecified, using default values
  6250  20000C                     	org	2097164
  6251  20000C  0FFF               	dw	4095
  6252                           
  6253                           ;Config register IDLOC7 @ 0x20000E
  6254                           ;	unspecified, using default values
  6255  20000E                     	org	2097166
  6256  20000E  0FFF               	dw	4095
  6257                           
  6258                           	psect	config
  6259                           
  6260                           ;Config register CONFIG1L @ 0x300000
  6261                           ;	External Oscillator mode Selection bits
  6262                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  6263                           ;	Power-up default value for COSC bits
  6264                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  6265  300000                     	org	3145728
  6266  300000  AA                 	db	170
  6267                           
  6268                           ;Config register CONFIG1H @ 0x300001
  6269                           ;	unspecified, using default values
  6270                           ;	Clock Out Enable bit
  6271                           ;	CLKOUTEN = 0x1, unprogrammed default
  6272                           ;	Clock Switch Enable bit
  6273                           ;	CSWEN = 0x1, unprogrammed default
  6274                           ;	Fail-Safe Clock Monitor Enable bit
  6275                           ;	FCMEN = 0x1, unprogrammed default
  6276  300001                     	org	3145729
  6277  300001  FF                 	db	255
  6278                           
  6279                           ;Config register CONFIG2L @ 0x300002
  6280                           ;	unspecified, using default values
  6281                           ;	Master Clear Enable bit
  6282                           ;	MCLRE = 0x1, unprogrammed default
  6283                           ;	Power-up Timer Enable bit
  6284                           ;	PWRTE = 0x1, unprogrammed default
  6285                           ;	Low-power BOR enable bit
  6286                           ;	LPBOREN = 0x1, unprogrammed default
  6287                           ;	Brown-out Reset Enable bits
  6288                           ;	BOREN = 0x3, unprogrammed default
  6289  300002                     	org	3145730
  6290  300002  FF                 	db	255
  6291                           
  6292                           ;Config register CONFIG2H @ 0x300003
  6293                           ;	unspecified, using default values
  6294                           ;	Brown Out Reset Voltage selection bits
  6295                           ;	BORV = 0x3, unprogrammed default
  6296                           ;	ZCD Disable bit
  6297                           ;	ZCD = 0x1, unprogrammed default
  6298                           ;	PPSLOCK bit One-Way Set Enable bit
  6299                           ;	PPS1WAY = 0x1, unprogrammed default
  6300                           ;	Stack Full/Underflow Reset Enable bit
  6301                           ;	STVREN = 0x1, unprogrammed default
  6302                           ;	Debugger Enable bit
  6303                           ;	DEBUG = 0x1, unprogrammed default
  6304                           ;	Extended Instruction Set Enable bit
  6305                           ;	XINST = 0x1, unprogrammed default
  6306  300003                     	org	3145731
  6307  300003  FF                 	db	255
  6308                           
  6309                           ;Config register CONFIG3L @ 0x300004
  6310                           ;	WDT Period Select bits
  6311                           ;	WDTCPS = 0x1F, unprogrammed default
  6312                           ;	WDT operating mode
  6313                           ;	WDTE = OFF, WDT Disabled
  6314  300004                     	org	3145732
  6315  300004  9F                 	db	159
  6316                           
  6317                           ;Config register CONFIG3H @ 0x300005
  6318                           ;	unspecified, using default values
  6319                           ;	WDT Window Select bits
  6320                           ;	WDTCWS = 0x7, unprogrammed default
  6321                           ;	WDT input clock selector
  6322                           ;	WDTCCS = 0x7, unprogrammed default
  6323  300005                     	org	3145733
  6324  300005  FF                 	db	255
  6325                           
  6326                           ;Config register CONFIG4L @ 0x300006
  6327                           ;	unspecified, using default values
  6328                           ;	Write Protection Block 0
  6329                           ;	WRT0 = 0x1, unprogrammed default
  6330                           ;	Write Protection Block 1
  6331                           ;	WRT1 = 0x1, unprogrammed default
  6332                           ;	Write Protection Block 2
  6333                           ;	WRT2 = 0x1, unprogrammed default
  6334                           ;	Write Protection Block 3
  6335                           ;	WRT3 = 0x1, unprogrammed default
  6336                           ;	Write Protection Block 3
  6337                           ;	WRT4 = 0x1, unprogrammed default
  6338                           ;	Write Protection Block 3
  6339                           ;	WRT5 = 0x1, unprogrammed default
  6340                           ;	Write Protection Block 3
  6341                           ;	WRT6 = 0x1, unprogrammed default
  6342                           ;	Write Protection Block 3
  6343                           ;	WRT7 = 0x1, unprogrammed default
  6344  300006                     	org	3145734
  6345  300006  FF                 	db	255
  6346                           
  6347                           ;Config register CONFIG4H @ 0x300007
  6348                           ;	unspecified, using default values
  6349                           ;	Configuration Register Write Protection bit
  6350                           ;	WRTC = 0x1, unprogrammed default
  6351                           ;	Boot Block Write Protection bit
  6352                           ;	WRTB = 0x1, unprogrammed default
  6353                           ;	Data EEPROM Write Protection bit
  6354                           ;	WRTD = 0x1, unprogrammed default
  6355                           ;	Scanner Enable bit
  6356                           ;	SCANE = 0x1, unprogrammed default
  6357                           ;	Low Voltage Programming Enable bit
  6358                           ;	LVP = 0x1, unprogrammed default
  6359  300007                     	org	3145735
  6360  300007  FF                 	db	255
  6361                           
  6362                           ;Config register CONFIG5L @ 0x300008
  6363                           ;	unspecified, using default values
  6364                           ;	UserNVM Program Memory Code Protection bit
  6365                           ;	CP = 0x1, unprogrammed default
  6366                           ;	DataNVM Memory Code Protection bit
  6367                           ;	CPD = 0x1, unprogrammed default
  6368  300008                     	org	3145736
  6369  300008  FF                 	db	255
  6370                           
  6371                           ;Config register CONFIG5H @ 0x300009
  6372                           ;	unspecified, using default values
  6373  300009                     	org	3145737
  6374  300009  FF                 	db	255
  6375                           
  6376                           ;Config register CONFIG6L @ 0x30000A
  6377                           ;	unspecified, using default values
  6378                           ;	Table Read Protection Block 0
  6379                           ;	EBTR0 = 0x1, unprogrammed default
  6380                           ;	Table Read Protection Block 1
  6381                           ;	EBTR1 = 0x1, unprogrammed default
  6382                           ;	Table Read Protection Block 2
  6383                           ;	EBTR2 = 0x1, unprogrammed default
  6384                           ;	Table Read Protection Block 3
  6385                           ;	EBTR3 = 0x1, unprogrammed default
  6386                           ;	Table Read Protection Block 4
  6387                           ;	EBTR4 = 0x1, unprogrammed default
  6388                           ;	Table Read Protection Block 5
  6389                           ;	EBTR5 = 0x1, unprogrammed default
  6390                           ;	Table Read Protection Block 6
  6391                           ;	EBTR6 = 0x1, unprogrammed default
  6392                           ;	Table Read Protection Block 7
  6393                           ;	EBTR7 = 0x1, unprogrammed default
  6394  30000A                     	org	3145738
  6395  30000A  FF                 	db	255
  6396                           
  6397                           ;Config register CONFIG6H @ 0x30000B
  6398                           ;	unspecified, using default values
  6399                           ;	Boot Block Table Read Protection bit
  6400                           ;	EBTRB = 0x1, unprogrammed default
  6401  30000B                     	org	3145739
  6402  30000B  FF                 	db	255
  6403                           tosu	equ	0xFFF
  6404                           tosh	equ	0xFFE
  6405                           tosl	equ	0xFFD
  6406                           stkptr	equ	0xFFC
  6407                           pclatu	equ	0xFFB
  6408                           pclath	equ	0xFFA
  6409                           pcl	equ	0xFF9
  6410                           tblptru	equ	0xFF8
  6411                           tblptrh	equ	0xFF7
  6412                           tblptrl	equ	0xFF6
  6413                           tablat	equ	0xFF5
  6414                           prodh	equ	0xFF4
  6415                           prodl	equ	0xFF3
  6416                           indf0	equ	0xFEF
  6417                           postinc0	equ	0xFEE
  6418                           postdec0	equ	0xFED
  6419                           preinc0	equ	0xFEC
  6420                           plusw0	equ	0xFEB
  6421                           fsr0h	equ	0xFEA
  6422                           fsr0l	equ	0xFE9
  6423                           wreg	equ	0xFE8
  6424                           indf1	equ	0xFE7
  6425                           postinc1	equ	0xFE6
  6426                           postdec1	equ	0xFE5
  6427                           preinc1	equ	0xFE4
  6428                           plusw1	equ	0xFE3
  6429                           fsr1h	equ	0xFE2
  6430                           fsr1l	equ	0xFE1
  6431                           bsr	equ	0xFE0
  6432                           indf2	equ	0xFDF
  6433                           postinc2	equ	0xFDE
  6434                           postdec2	equ	0xFDD
  6435                           preinc2	equ	0xFDC
  6436                           plusw2	equ	0xFDB
  6437                           fsr2h	equ	0xFDA
  6438                           fsr2l	equ	0xFD9
  6439                           status	equ	0xFD8

Data Sizes:
    Strings     44
    Constant    0
    Data        11
    BSS         44
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     88      91
    BANK0           160     68     118
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> main@buf(BANK0[16]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_2(CODE[24]), STR_1(CODE[20]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_2(CODE[24]), STR_1(CODE[20]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 24
		 -> STR_2(CODE[24]), STR_1(CODE[20]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_2(CODE[24]), STR_1(CODE[20]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> main@buf(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S1829_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> main@buf(BANK0[16]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> main@buf(BANK0[16]), 

    dst@bwdcheck	PTR int  size(2) Largest target is 2
		 -> main@bwdcheck(BANK0[2]), 

    dst@hour	PTR volatile int  size(2) Largest target is 2
		 -> hour(BANK0[2]), 

    datecount@bwdcheck	PTR int  size(2) Largest target is 2
		 -> main@bwdcheck(BANK0[2]), 

    datecount@year	PTR volatile int  size(2) Largest target is 2
		 -> year(BANK0[2]), 

    datecount@month	PTR volatile int  size(2) Largest target is 2
		 -> month(BANK0[2]), 

    datecount@day	PTR volatile int  size(2) Largest target is 2
		 -> day(BANK0[2]), 

    datecount@hour	PTR volatile int  size(2) Largest target is 2
		 -> hour(BANK0[2]), 

    mincount@min	PTR volatile int  size(2) Largest target is 2
		 -> min(BANK0[2]), 

    seccount@sec	PTR volatile int  size(2) Largest target is 2
		 -> sec(BANK0[2]), 

    LCD_Disp@buf	PTR unsigned char  size(2) Largest target is 16
		 -> main@buf(BANK0[16]), 

    LCD_sendstring@string	PTR unsigned char  size(2) Largest target is 16
		 -> main@buf(BANK0[16]), 


Critical Paths under _main in COMRAM

    _weekdaycheck->___awmod
    ___awdiv->___wmul
    _datecount->___awmod
    ___awmod->___awdiv
    _LCD_Init->_LCD_sendbyte
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _atoi->_isspace
    _LCD_setline->_LCD_sendbyte
    _LCD_sendstring->_LCD_sendbyte
    _LCD_sendbyte->_LCD_sendnibble

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_LCD_Disp
    _LCD_Disp->_sprintf
    _sprintf->_vfprintf

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowISR in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowISR in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowISR in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowISR in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowISR in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowISR in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                22    22      0   21500
                                             46 BANK0     22    22      0
                         _Comp1_init
                    _Interrupts_init
                           _LCD_Disp
                           _LCD_Init
                  _LEDarray_disp_bin
                      _LEDarray_init
                       _RH3_RD7_init
                        _Timer0_init
                          _datecount
                                _dst
                           _mincount
                           _seccount
                       _weekdaycheck
 ---------------------------------------------------------------------------------
 (1) _weekdaycheck                                        10     4      6    2879
                                             23 COMRAM    10     4      6
                            ___awdiv
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     908
                                              9 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _seccount                                             4     2      2     120
                                              3 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _mincount                                             4     2      2     120
                                              3 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _dst                                                 12     2     10     688
                                              3 COMRAM    12     2     10
 ---------------------------------------------------------------------------------
 (1) _datecount                                           12     2     10    1880
                                             23 COMRAM    12     2     10
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     752
                                             17 COMRAM     6     2      4
                            ___awdiv (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RH3_RD7_init                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LEDarray_init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LEDarray_disp_bin                                    5     3      2     274
                                              3 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0    1002
                                              6 COMRAM     2     2      0
                       _LCD_sendbyte
                     _LCD_sendnibble
 ---------------------------------------------------------------------------------
 (1) _LCD_Disp                                            18     2     16   14343
                                             28 BANK0     18     2     16
                     _LCD_sendstring
                        _LCD_setline
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             22    10     12   11213
                                              8 BANK0     20     8     12
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             8     2      6   10541
                                              0 BANK0      8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           46    40      6   10011
                                             66 COMRAM    22    16      6
                               _atoi
                               _dtoa
                              _fputc
                            _isdigit
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                36    26     10    5683
                                             30 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                 11     5      6    3417
                                             19 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (7) _strlen                                               4     2      2     220
                                              3 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) _fputs                                                7     3      4    1537
                                             12 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                9     5      4    1037
                                              3 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     183
                                             21 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___aomod                                             18     2     16     613
                                              3 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (6) ___aodiv                                             26    10     16     625
                                              3 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (5) _atoi                                                15    13      2    1795
                                             10 COMRAM    15    13      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (6) _isspace                                              7     5      2     259
                                              3 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              6     4      2     281
                                              3 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     692
                                              3 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _LCD_setline                                          1     1      0     958
                                              6 COMRAM     1     1      0
                       _LCD_sendbyte
 ---------------------------------------------------------------------------------
 (2) _LCD_sendstring                                       2     0      2    1111
                                              6 COMRAM     2     0      2
                       _LCD_sendbyte
 ---------------------------------------------------------------------------------
 (2) _LCD_sendbyte                                         2     1      1     914
                                              4 COMRAM     2     1      1
                     _LCD_sendnibble
 ---------------------------------------------------------------------------------
 (2) _LCD_sendnibble                                       1     1      0      88
                                              3 COMRAM     1     1      0
                          _LCD_E_TOG
 ---------------------------------------------------------------------------------
 (3) _LCD_E_TOG                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Comp1_init                                           0     0      0       0
                           _DAC_init
 ---------------------------------------------------------------------------------
 (2) _DAC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _LowISR                                              3     3      0       0
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _HighISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Comp1_init
     _DAC_init
   _Interrupts_init
   _LCD_Disp
     _LCD_sendstring
       _LCD_sendbyte
         _LCD_sendnibble
           _LCD_E_TOG
     _LCD_setline
       _LCD_sendbyte
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _atoi
             ___wmul
             _isdigit
             _isspace
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
               _strlen
           _fputc
           _isdigit
   _LCD_Init
     _LCD_sendbyte
     _LCD_sendnibble
   _LEDarray_disp_bin
   _LEDarray_init
   _RH3_RD7_init
   _Timer0_init
   _datecount
     ___awmod
       ___awdiv (ARG)
         ___wmul (ARG)
       ___wmul (ARG)
   _dst
   _mincount
   _seccount
   _weekdaycheck
     ___awdiv
     ___awmod
     ___wmul

 _LowISR (ROOT)

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      33        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      31        0.0%
BANK13              EA      0       0      32        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     44      76       5       73.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     58      5B       1       96.8%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D1       8        0.0%
DATA                 0      0      D1       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Thu Nov 11 15:38:45 2021

                        l81 000014                          l91 0000EA                          l83 000034  
                        l75 000024                          l93 000118                          l85 00005E  
                        l78 000008                          l95 000146                          l87 00008E  
                        l97 000166                          l89 0000BC                          l99 000168  
              ___awdiv@sign 00000E                          bsr 000FE0         ___wmul@multiplicand 000005  
         ??_Interrupts_init 000003                         l110 00001E                         l130 000024  
                       l221 0002B2                         l127 000012                         l160 000066  
                       l152 000016                         l400 000186                         l154 00002C  
                       l163 000024                         l171 000044                         l156 000042  
                       l180 0000A2                         l236 000140                         l228 0000FA  
                       l149 00000C                         l413 000162                         l158 000058  
                       l166 0000B6                         l192 000032                         l177 000032  
                       l530 0000AE                         l267 000012                         l188 000032  
                       l517 0000C2                         l286 000024                         l964 000050  
                       l995 000044                         l998 000086                 dst@bwdcheck 00000B  
                       _abs 000000                         _day 000004                         _pad 000000  
                       _dst 000000                         _min 000002                         _sec 000000  
              ___awmod@sign 000016                         wreg 000FE8                        l1000 0000C0  
                      l1100 0001A2                        l1006 0000A0                        l1103 000036  
                      l1111 000050                        l1008 0000A8                        l1040 0000FA  
                      l1026 0002DC                        ?_abs 000015                        l1061 00005C  
                      l1126 0000C8                        l1134 000042                        l1062 000064  
                      l1143 000034                        l1055 00038A                        l1137 000000  
                      l3001 0000C2                        l1066 000036                        l3011 0000EC  
                      l3003 0000D0                        l1069 00003E                        l3021 0001F8  
                      l3013 00016E                        l3005 0000D6                        l3101 00005A  
                      l3031 00026A                        l3023 000216                        l3015 000174  
                      l3007 0000DE                        l3111 000078                        l3103 00006C  
                      l2145 000000                        l2401 00003E                        l1097 00019A  
                      l3041 0002A4                        l3033 000278                        l3025 000230  
                      l3017 00017A                        l3009 0000E6                        l3201 00003E  
                      l2147 000002                        l2403 000000                        l3051 000018  
                      l3035 00027E                        l3043 0002B4                        l3027 00024A  
                      l3019 0001DE                        l3131 000132                        l3123 000090  
                      l3115 00007E                        l3107 000072                        l3211 000048  
                      l2149 00000A                        l2261 000026                        l2405 000004  
                      l3053 00001C                        l3037 000290                        l3029 000258  
                      l3141 0001B4                        l3133 000168                        l3125 0000E8  
                      l3221 000034                        l3213 00004E                        l3205 000000  
                      l2271 00005A                        l2263 00002E                        l2255 000002  
                      l2407 000016                        l3071 0000DE                        l3063 000080  
                      l3055 00003C                        l3047 000000                        l3039 00029C  
                      l3151 000260                        l3135 000178                        l3127 000108  
                      l3119 000084                        l3223 000040                        l2503 000000  
                      l2511 000012                        l2431 00001E                        l2423 000000  
                      l3207 00001C                        l3231 000008                        l2521 000014  
                      l2273 00005E                        l2265 00003C                        l2257 000010  
                      l2409 00001A                        l3081 00016C                        l3065 000096  
                      l3057 000076                        l3049 000014                        l3161 000316  
                      l3153 0002A8                        l3145 0001FE                        l3137 000186  
                      l3129 00010A                        l3225 000046                        l3217 000000  
                      l2505 000000                        l2513 00001C                        l2601 00013E  
                      l2441 000052                        l2433 00002C                        l2425 000004  
                      l3209 000040                        l3241 00002E                        l3233 00000C  
                      l2531 000020                        l2523 000016                        l2515 000000  
                      l2267 000044                        l2259 000018                        l2371 000002  
                      l3083 00017E                        l3075 000118                        l3067 00009E  
                      l3059 00007A                        l3163 00032A                        l3139 0001A6  
                      l3147 000210                        l3091 000028                        l3227 000088  
                      l3219 000006                        l2507 000000                        l2603 00014E  
                      l2451 00008C                        l2443 00005A                        l2435 000034  
                      l2427 000012                        l3251 0000C2                        l3243 00003A  
                      l3235 000014                        l2525 000018                        l2517 000000  
                      l2269 000052                        l2373 00000C                        l3069 0000A6  
                      l3157 0002E0                        l3149 000238                        l3093 000036  
                      l3173 000350                        l2541 00003C                        l2533 000000  
                      l2701 000088                        l2509 000008                        l2621 0001D4  
                      l2461 0000B2                        l2453 000094                        l2445 000062  
                      l2437 000038                        l2429 00001A                        l3253 000108  
                      l3245 000066                        l3237 000018                        l3229 000000  
                      l2527 00001A                        l2519 000002                        l2375 00001C  
                      l2391 000002                        l3079 00015A                        l3175 000378  
                      l3159 000308                        l3167 000336                        l3095 000048  
                      l3191 00003C                        l2551 000066                        l2543 000046  
                      l2535 000018                        l2711 0000EC                        l2703 000090  
                      l2471 000012                        l2623 0001F0                        l2607 000160  
                      l2463 0000BA                        l2455 000096                        l2447 000070  
                      l2439 000040                        l3247 00008A                        l3239 000022  
                      l2385 000000                        l2529 00001C                        l2393 000012  
                      l3169 000344                        l3097 00004C                        l3089 000000  
                      l3185 000000                        l3193 000000                        l2561 000096  
                      l2553 00006C                        l2545 00004C                        l2537 000030  
                      l2721 000160                        l2713 000112                        l2705 0000B6  
                      l2481 000046                        l2473 00001A                        l2641 000284  
                      l2625 00020C                        l2633 00022C                        l2609 00017C  
                      l2617 00019C                        l2457 00009C                        l2449 000076  
                      l3249 0000B6                        l2387 000006                        l2395 00001C  
                      l3099 000058                        l3187 000008                        l3195 000012  
                      l2563 0000A0                        l2555 000076                        l2547 000056  
                      l2539 000036                        l2715 00011A                        l2707 0000BE  
                      l2491 000082                        l2483 00004E                        l2475 00001E  
                      l2467 000000                        l2643 000292                        l2635 000248  
                      l2619 0001B8                        l2571 00001C                        l2459 0000A2  
                      l2389 000010                        l2397 000022                        l2901 000146  
                      l3189 000016                        l3197 00001A                        l2565 0000A6  
                      l2557 00007C                        l2549 00005C                        l2717 000140  
                      l2709 0000E4                        l2493 000088                        l2485 000056  
                      l2477 00002C                        l2469 000004                        l2637 000258  
                      l2581 000000                        l2661 000000                        l2573 000022  
                      l2399 000034                        l2903 000166                        l2911 000012  
                      l2831 00002E                        l3295 0000BA                        l3199 000022  
                      l2567 0000B0                        l2559 000086                        l2719 000148  
                      l2487 000064                        l2495 00008E                        l2479 000034  
                      l2639 000274                        l2591 000098                        l2647 0002A2  
                      l2583 00001C                        l2671 000078                        l2663 00001C  
                      l2575 000000                        l3297 0000C8                        l2921 000082  
                      l2913 000032                        l2833 00004C                        l2825 000000  
                      l2841 00000C                        l2497 00009E                        l2489 00007A  
                      l2593 0000B4                        l2585 000042                        l2681 0000EA  
                      l2665 000038                        l2673 00008C                        l2577 00001C  
                      l2569 000000                        l2931 0000FA                        l2923 00008A  
                      l2915 000036                        l2907 000000                        l2835 000082  
                      l2827 000012                        l2843 00001E                        l2851 000010  
                      l2691 000016                        l2499 0000A6                        l2595 0000E2  
                      l2587 00006A                        l2683 000104                        l2675 0000A8  
                      l2667 00004C                        l2579 000022                        l2933 00010C  
                      l2925 00009E                        l2917 000044                        l2909 000004  
                      l2829 000024                        l2845 000022                        l2853 000028  
                      l2693 00002E                        l2597 000110                        l2589 00007C  
                      l2685 000120                        l2677 0000C4                        l2669 00005E  
                      ?_pad 000013                        l2871 000036                        l2863 000000  
                      l2927 0000AC                        l2935 000112                        l2919 000064  
                      l2839 000000                        l2847 000000                        l2951 00003C  
                      l2943 000000                        l2695 000036                        l2687 000000  
                      l2679 0000D8                        l2857 000000                        l2881 000092  
                      l2873 000044                        l2865 000004                        l2937 000122  
                      l2929 0000DA                        l2849 00000C                        l2961 0000A8  
                      l2953 000050                        l2945 00000E                        l2697 000058  
                      l2689 00000E                        ?_dst 000003                        l2859 00001C  
                      l2891 0000FC                        l2883 00009A                        l2875 000064  
                      l2867 000012                        l2939 000142                        l2955 000064  
                      l2947 000022                        l2699 000060                        l2981 00004A  
                      l2973 000000                        l2893 00011C                        l2885 0000AE  
                      l2877 000068                        l2869 000032                        l2965 000000  
                      l2957 000068                        l2949 000030                        l2975 000004  
                      l2895 00011E                        l2887 0000BC                        l2879 000074  
                      l2967 00001A                        l2959 000094                        l2991 000068  
                      l2969 000000                        l2977 000018                        l2897 000130  
                      l2889 0000CE                        l2993 000078                        l2985 000000  
                      l2979 000046                        l2899 000136                        l2995 00007A  
                      l2987 000020                        l2997 000094                        l2989 000048  
                      l2999 0000B0                        STR_1 000019                        STR_2 000001  
                      u2100 00002C                        u2101 000028                        u2110 000052  
                      u2111 00004E                        u3000 00001A                        u2200 00009E  
                      u2120 000070                        u3001 000016                        u2201 00009A  
                      u2121 00006C                        u3010 000030                        u2210 00001C  
                      u2130 00008C                        u3011 00002A                        u2211 000018  
                      u2131 000088                        u2060 000012                        u3020 000032  
                      u3100 0000C2                        u2300 00013A                        u2220 00001C  
                      u2140 0000B2                        u2045 00000A                        u2061 00000E  
                      u3101 0000BE                        u2301 000136                        u2221 000018  
                      u2141 0000AE                        u2046 00000C                        u2070 000034  
                      u3030 000018                        u3110 0000D0                        u2150 000012  
                      u2310 00017C                        u2230 00001C                        u2071 000030  
                      u3031 000014                        u3111 0000CC                        u2151 00000E  
                      u2311 000178                        u2231 000018                        u2080 000032  
                      u3040 000046                        u3200 00003C                        u3120 0001F8  
                      u2160 00002C                        u2320 000198                        u2240 000042  
                      u2081 00002E                        u3041 000042                        u3201 000038  
                      u3121 0001F4                        u2161 000028                        u2321 000194  
                      u2241 00003E                        u3210 000076                        u3130 000216  
                      u3050 000030                        u2170 000046                        u2330 0001B8  
                      u2250 00006A                        u2410 00001C                        u2090 000012  
                      u3211 000072                        u3131 000212                        u3051 00002A  
                      u2171 000042                        u2331 0001B4                        u2251 000066  
                      u2411 000018                        u2091 00000E                        u3220 000092  
                      u3140 000230                        u3060 000032                        u3300 000132  
                      u2180 000064                        u2340 0001D4                        u2260 000098  
                      u2500 000104                        u2420 000038                        u3221 00008E  
                      u3141 00022C                        u3301 00012E                        u2181 000060  
                      u2341 0001D0                        u2261 000094                        u2501 000100  
                      u2421 000034                        u3230 000154                        u3150 00024A  
                      u3070 000048                        u3310 000178                        u2190 00007A  
                      u2350 0001F0                        u2270 0000B4                        u2510 000120  
                      u2430 00004C                        u3231 00014E                        u3151 000246  
                      u3071 000044                        u3311 000174                        u2191 000076  
                      u2351 0001EC                        u2271 0000B0                        u2511 00011C  
                      u2431 000048                        u3240 000156                        u3160 000258  
                      u3080 000078                        u3320 0001F8                        u2520 00000E  
                      u2360 00020C                        u2280 0000E2                        u2440 00005E  
                      u3161 000254                        u3081 000074                        u3321 0001F2  
                      u2521 00000A                        u2361 000208                        u2281 0000DE  
                      u2441 00005A                        u3250 00016C                        u3170 00026A  
                      u3090 000094                        u3330 0001FA                        u2610 000112  
                      u2530 00002E                        u2370 000228                        u2290 000110  
                      u2450 000078                        u3251 000168                        u3171 000266  
                      u3091 000090                        u2611 00010E                        u2531 00002A  
                      u2371 000224                        u2291 00010C                        u2451 000074  
                      u1900 000026                        u3260 00017E                        u3180 000278  
                      u3340 000210                        u2540 000058                        u2380 000248  
                      u2460 0000A8                        u1901 000022                        u3261 00017A  
                      u3181 000274                        u3341 00020C                        u2605 0000F8  
                      u2541 000054                        u2381 000244                        u2461 0000A4  
                      u1910 00003C                        u3190 000290                        u3350 000238  
                      u3270 000028                        u2630 000140                        u2550 000088  
                      u2390 000274                        u2470 0000C4                        u1911 000038  
                      u3191 00028C                        u3351 000234                        u3271 000024  
                      u2631 00013C                        u2551 000084                        u2391 000270  
                      u2471 0000C0                        u3407 000114                        u1920 000052  
                      u2800 000082                        u3360 000260                        u3280 0000FA  
                      u2640 000160                        u2480 0000D8                        u1921 00004E  
                      u2801 00007E                        u3361 00025C                        u3281 0000F6  
                      u3417 000022                        u2641 00015C                        u2625 000126  
                      u2481 0000D4                        u2810 000042                        u3370 000308  
                      u3290 000108                        u2570 0000B6                        u2490 0000EA  
                      u2811 00003E                        u3371 000304                        u3291 000104  
                      u3507 000094                        u3427 000038                        u2571 0000B2  
                      u2491 0000E6                        u2900 000012                        u2820 000028  
                      u3380 00005C                        u3517 00001E                        u2901 00000E  
                      u2821 000024                        u3381 000058                        u3437 000048  
                      u2565 00009C                        u2830 000012                        u2910 000044  
                      u2590 0000E4                        u3390 00001C                        u3527 000040  
                      u2831 00000E                        u2911 000040                        u3447 000058  
                      u2591 0000E0                        u3391 000018                        u2840 000044  
                      u2920 000082                        u3537 00001E                        u2841 000040  
                      u2921 00007E                        u3457 000068                        u2585 0000CA  
                      u1890 000010                        u2930 0000AC                        u2770 000012  
                      u3547 000060                        u1891 00000C                        u2851 00006E  
                      u2931 0000A8                        u2771 00000E                        u3467 000078  
                      u2860 000092                        u2940 0000DA                        u2780 000024  
                      u3557 000004                        u2861 00008E                        u2941 0000D6  
                      u2781 000020                        u3477 00008C                        u2870 0000BC  
                      u2950 000122                        u2790 00004C                        u2871 0000B8  
                      u2951 00011E                        u2791 000048                        u3487 0000A2  
                      u2880 0000FC                        u2960 00000E                        u2881 0000F8  
                      u2961 00000A                        u3497 0000B2                        u2890 000146  
                      u2970 000030                        u2891 000142                        u2971 00002C  
                      u2980 000086                        u2981 000082                        u2990 000094  
                      u2991 000090          __size_of_LCD_E_TOG 000000              datecount@month 00001B  
                      abs@a 000015                        _dbuf 000006                 LCD_Disp@day 000022  
               LCD_Disp@buf 00001C                        _atoi 000000                 LCD_Disp@min 000026  
               LCD_Disp@sec 000028                        _main 000000                        _dtoa 000000  
                      _hour 000026                        _prec 000004                        _nout 000000  
                      _year 000008                        pad@i 00001A                        pad@p 000017  
                      fsr1h 000FE2                        fsr2h 000FDA                        indf2 000FDF  
                      fsr1l 000FE1                        pad@w 00001C                        fsr2l 000FD9  
                      btemp 000000                 main@weekday 000040                ?_LCD_setline 000000  
                      prodh 000FF4                        prodl 000FF3                        start 000000* 
          __end_of_DAC_init 000014             __end_of_HighISR 000076                ___param_bank 000000  
                _Comp1_init 000000                       ??_abs 000017                       ??_pad 000019  
                     ??_dst 00000D            __end_of_LCD_Disp 0000A4            __end_of_LCD_Init 0000B8  
              main@bwdcheck 000042             __end_of___aodiv 000188                       ?_atoi 00000A  
                     ?_main 000000                       ?_dtoa 00001E             __end_of___aomod 000164  
           __end_of___awdiv 0000C4             __end_of___awmod 0000B0             ___awdiv@divisor 00000B  
                     i1l273 000080                       i1l275 00006C                       i1l276 00008C  
                     i2l282 00006E                       i2l283 000072             ___awdiv@counter 00000D  
              vfpfcnvrt@fmt 000044                       _TMR0H 000FD4                       _TMR0L 000FD3  
                     _flags 000000                LCD_Disp@hour 000024                       _light 000000  
              LCD_Disp@year 00001E                       _fputc 000000                       _fputs 000000  
           __end_of_isdigit 000038                       _month 000006                       atoi@n 000017  
                     pad@fp 000013                       atoi@s 00000A                       _width 000002  
                     _putch 000000                       dtoa@d 000020                       dtoa@i 000040  
                     dtoa@n 000038                       dtoa@p 000032                       dtoa@s 000036  
                     dtoa@w 000034             __end_of_isspace 000052               ?_LCD_sendbyte 000004  
                     tablat 000FF5                       plusw2 000FDB                       ttemp5 000001  
                     ttemp6 000004                       ttemp7 000008                       status 000FD8  
             ?_RH3_RD7_init 000000                       wtemp8 000001             __end_of_sprintf 000052  
   __size_of_LCD_sendnibble 000000     __size_of_LCD_sendstring 000000             __initialization 000000  
              __end_of_atoi 0001A4                __end_of_main 00012A                __end_of_dtoa 0002DE  
         __end_of_LCD_E_TOG 00000E                      ??_atoi 00000C                      ??_main 00002E  
                    ??_dtoa 000028               __activetblptr 000003      __size_of_LEDarray_init 000000  
                    ?_fputc 000003                      ?_fputs 00000C              ??_LCD_sendbyte 000005  
          ___awdiv@dividend 000009                      ?_putch 000000                      i1l2761 00000E  
                    i1l2763 00001E                      i1l2765 000034                      i1l2767 000050  
                    i2l2771 000010                      i2l2781 00004E                      i2l2773 000018  
                    i2l2783 00006A                      i2l2775 00001E                      i2l2777 000028  
                    i2l2769 000000                      i2l2779 000032              ??_RH3_RD7_init 000003  
             vfpfcnvrt@done 000054                   ??_HighISR 000000           _LEDarray_disp_bin 000000  
                    _LowISR 000000          ?_LEDarray_disp_bin 000003               ??_Timer0_init 000003  
              vfprintf@cfmt 000006                   ??___aodiv 000013                   ??___aomod 000013  
                    ___wmul 000000                 ?_Comp1_init 000000                   ??___awdiv 00000D  
                 ??___awmod 000015               LCD_Disp@month 000020         ??_LEDarray_disp_bin 000005  
                    clear_0 000038                      _on_min 000000*           ___awdiv@quotient 00000F  
           ___awmod@divisor 000013                      isa$std 000001            __end_of_mincount 000034  
           ___awmod@counter 000015                      pad@buf 000015                      dst@day 000005  
                    dtoa@fp 00001E            __end_of_seccount 000034                      _strlen 000000  
                    fputc@c 000003                      fputs@c 000010                      fputs@i 000011  
              __pdataCOMRAM 000000                      fputs@s 00000C                   ??_isdigit 000005  
              __mediumconst 000000*                  ??_isspace 000005                      tblptrh 000FF7  
                    tblptrl 000FF6                      tblptru 000FF8                      putch@c 000000  
                 ?_DAC_init 000000            __end_of_vfprintf 000066                   ??_sprintf 000058  
 __end_of_LEDarray_disp_bin 00016A                  __accesstop 000000*    __end_of__initialization 000042  
                 ?_LCD_Disp 00001C                   ?_LCD_Init 000000               ___rparam_used 000001  
             _LEDarray_init 000000             _Interrupts_init 000000        __size_of_LCD_setline 000000  
            __pcstackCOMRAM 000000                __pidataBANK0 000000               __end_of_fputc 0000CA  
             __end_of_fputs 000044               __end_of_putch 000002          __size_of_datecount 000000  
       __end_of_Timer0_init 000020                 mincount@min 000003                  ??_DAC_init 000003  
                   ??_fputc 000007                     ??_fputs 000010                     ??_putch 000003  
       __size_of_Comp1_init 000000                  __pbssBANK0 000000                  ??_LCD_Disp 00002C  
                ??_LCD_Init 000006              _LCD_sendnibble 000000              ?_LEDarray_init 000000  
            _LCD_sendstring 000000                     ?_LowISR 000000                 seccount@sec 000003  
                   ?___wmul 000003        __end_of_LCD_sendbyte 000026        __end_of_RH3_RD7_init 00000A  
                   ?_strlen 000003          __size_of_vfpfcnvrt 000000      __end_of_LCD_sendnibble 000068  
__size_of_LEDarray_disp_bin 000000     __end_of_Interrupts_init 000014                     _HighISR 000000  
         __end_of_datecount 0002B4      __end_of_LCD_sendstring 000034           datecount@bwdcheck 00001F  
                 ?_mincount 000003                   ?_seccount 000003                     __Hparam 000000  
                   __Lparam 000000             __size_of_LowISR 000000                 _Timer0_init 000000  
                   ___aodiv 000000                     ___aomod 000000                     ___awdiv 000000  
                   ___awmod 000000             __size_of___wmul 000000                   ?_vfprintf 000000  
              __psmallconst 000000                     __pcinit 000000                     __ramtop 000000* 
                   __ptext0 000000                     __ptext1 000000                     __ptext2 000000  
                   __ptext3 000000                     __ptext4 000000                     __ptext5 000000  
                   __ptext6 000000                     __ptext7 000000                     __ptext8 000000  
                   __ptext9 000000             __size_of_strlen 000000                __size_of_abs 000000  
              __size_of_pad 000000                __size_of_dst 000000                     _isdigit 000000  
          ___awmod@dividend 000011                     _isspace 000000                   _LCD_E_TOG 000000  
           LCD_setline@line 000006                     atoi@neg 000010                     dst@hour 000003  
                   main@buf 000030                     _sprintf 000000               ?_weekdaycheck 000017  
            __pintcode_body 000000        end_of_initialization 000042             ?_LCD_sendnibble 000000  
                   fputc@fp 000005             ??_LEDarray_init 000003                     int_func 000000  
                   fputs@fp 00000E             ?_LCD_sendstring 000006                  ??_mincount 000005  
                ??_seccount 000005           __end_of_vfpfcnvrt 00038C                     postdec1 000FE5  
                   postdec2 000FDD                ??_Comp1_init 000003                     postinc0 000FEE  
                   postinc1 000FE6                     postinc2 000FDE                  ??_vfprintf 000058  
                   strlen@a 000005                     strlen@s 000003                  ?_LCD_E_TOG 000000  
                 _TRISAbits 000F81                   _TRISBbits 000F82                   _TRISCbits 000F83  
                 _TRISDbits 000F84                   _TRISEbits 000F85                   _TRISFbits 000F86  
                 _TRISGbits 000F87                   _TRISHbits 000F88              ??_weekdaycheck 00001D  
         __size_of_DAC_init 000000          __end_of_Comp1_init 000026                 _CM1CON0bits 000ED0  
               _CM1CON1bits 000ED1            ?_Interrupts_init 000000               datecount@hour 000017  
                dst@weekday 000009               datecount@year 00001D           __size_of_LCD_Disp 000000  
         __size_of_LCD_Init 000000       __size_of_LCD_sendbyte 000000              __end_of_LowISR 00009C  
     __size_of_RH3_RD7_init 000000                 vfpfcnvrt@ap 000046                 vfpfcnvrt@fp 000042  
               vfpfcnvrt@ll 00004C              __end_of___wmul 000026        LCD_sendnibble@number 000003  
             __pidataCOMRAM 000000              __end_of_strlen 000036         start_initialization 000000  
               __end_of_abs 000040                 __end_of_pad 0000C2                 __end_of_dst 000142  
              _LCD_sendbyte 000000                _RH3_RD7_init 000000               ??_LCD_setline 000006  
                  ??_LowISR 000000                 vfprintf@fmt 000002        LCD_sendstring@string 000006  
                  ??___wmul 000007                 __pdataBANK0 000000                    ??_strlen 000005  
               __pbssCOMRAM 000000                 ??_LCD_E_TOG 000003               __pcstackBANK0 000000  
          ___aodiv@dividend 000003                    ?_HighISR 000000                   _atoi$1947 000012  
                 _atoi$1948 000016                   _atoi$1949 000014                   _datecount 000000  
                 _dtoa$1912 000030                ?_Timer0_init 000000           __size_of_mincount 000000  
         __size_of_seccount 000000                   __pintcode 000000                    ?___aodiv 000003  
                  ?___aomod 000003                    ?___awdiv 000009            ___aodiv@quotient 000015  
                  ?___awmod 000011        __end_of_weekdaycheck 0000FC         __end_of_LCD_setline 000046  
               __pintcodelo 000000           __size_of_vfprintf 000000                 __smallconst 000000* 
                  ?_isdigit 000003                    ?_isspace 000003            ??_LCD_sendnibble 000003  
                  _DAC_init 000000            ??_LCD_sendstring 000008                    ?_sprintf 000008  
            __size_of_fputc 000000              __size_of_fputs 000000              __size_of_putch 000000  
          LCD_sendbyte@Byte 000005                    _LCD_Disp 000000                    _LCD_Init 000000  
          LCD_sendbyte@type 000004              ___wmul@product 000007                    _LATAbits 000F79  
                  _LATBbits 000F7A                    _LATCbits 000F7B                    _LATDbits 000F7C  
                  _LATEbits 000F7D                    _LATFbits 000F7E                    _LATGbits 000F7F  
                  _LATHbits 000F80                    _IPR0bits 000E1F                    _IPR2bits 000E21  
                  _PIE0bits 000E29                    _PIE2bits 000E2B                    i1u270_25 000074  
                  i1u270_26 000076                    i1u271_25 00007E                    i1u271_26 000080  
                  i1u265_20 00001E                    i1u265_21 00001A                    i1u266_20 000030  
                  i1u266_21 00002A                    i1u267_20 000032                    i1u268_20 000050  
                  i1u268_21 00004C                    i1u269_20 00006C                    i1u269_21 000068  
                ?_datecount 000017                    _PIR0bits 000E33                    i2u272_40 000010  
                  i2u272_41 00000C                    i2u273_45 000026                    i2u273_46 000028  
                  i2u274_45 000030                    i2u274_46 000032                    i2u275_40 00004E  
                  i2u275_41 00004A                    _PIR2bits 000E35                    i2u276_40 00006A  
                  i2u276_41 000066                   _vfpfcnvrt 000000           ___wmul@multiplier 000003  
              datecount@day 000019                _isspace$1965 000009                  _CM1NCHbits 000ED2  
                _CM1PCHbits 000ED3                   copy_data0 000014            __size_of_HighISR 000000  
     __end_of_LEDarray_init 000026                 _LCD_setline 000000                    __Hrparam 000000* 
                vfprintf@ap 000004                    __Lrparam 000000*                 vfprintf@fp 000000  
          __size_of___aodiv 000000            __size_of___aomod 000000            __size_of___awdiv 000000  
          __size_of___awmod 000000                  ?_vfpfcnvrt 000042             ___aodiv@divisor 00000B  
           ___aodiv@counter 000013                  sprintf@fmt 00000A                  _T0CON0bits 000FD5  
                _T0CON1bits 000FD6            __size_of_isdigit 000000            __size_of_isspace 000000  
                  __ptext10 000000                    __ptext11 000000                    __ptext20 000000  
                  __ptext12 000000                    __ptext21 000000                    __ptext13 000000  
                  __ptext30 000000                    __ptext22 000000                    __ptext14 000000  
                  __ptext31 000000                    __ptext23 000000                    __ptext15 000000  
                  __ptext32 000000                    __ptext24 000000                    __ptext16 000000  
                  __ptext33 000000                    __ptext25 000000                    __ptext17 000000  
                  __ptext34 000000                    __ptext26 000000                    __ptext18 000000  
                  __ptext35 000000                    __ptext27 000000                    __ptext19 000000  
                  __ptext36 000000                    __ptext28 000000                    __ptext37 000000  
                  __ptext29 000000     LEDarray_disp_bin@number 000003            __size_of_sprintf 000000  
           LCD_Disp@weekday 00002A               __size_of_atoi 000000               __size_of_main 000000  
             __size_of_dtoa 000000                    _mincount 000000                    _seccount 000000  
     __size_of_weekdaycheck 000000                 ??_datecount 000021                    isa$xinst 000000  
  __size_of_Interrupts_init 000000                    int$flags 000000        __size_of_Timer0_init 000000  
                  _vfprintf 000000                    dst@month 000007            ___aomod@dividend 000003  
            _vfpfcnvrt$1927 000056                  _INTCONbits 000FF2                    isdigit@c 000003  
             weekdaycheck@d 000017               weekdaycheck@m 000019               weekdaycheck@y 00001B  
              _weekdaycheck 000000                    intlevel1 000000*                   intlevel2 000000* 
                 sprintf@ap 000014                _DAC1CON0bits 000EC6                _DAC1CON1bits 000EC7  
                  isspace@c 000003             ___aomod@divisor 00000B                 ??_vfpfcnvrt 000048  
           ___aomod@counter 000013                    sprintf@f 000016                    sprintf@s 000008  
              ___aodiv@sign 000014                ___aomod@sign 000014  
